

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Sat Apr 18 19:11:12 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og9 
     1                           	processor	18F4431
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	text44,global,reloc=2,class=CODE,delta=1
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1
    65                           	psect	text47,global,reloc=2,class=CODE,delta=1
    66                           	psect	text48,global,reloc=2,class=CODE,delta=1
    67                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    68                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    69                           	psect	text50,global,reloc=2,class=CODE,delta=1
    70                           	psect	text51,global,reloc=2,class=CODE,delta=1
    71                           	psect	text52,global,reloc=2,class=CODE,delta=1
    72                           	psect	text53,global,reloc=2,class=CODE,delta=1
    73                           	psect	text54,global,reloc=2,class=CODE,delta=1
    74                           	psect	text55,global,reloc=2,class=CODE,delta=1
    75                           	psect	text56,global,reloc=2,class=CODE,delta=1
    76                           	psect	text57,global,reloc=2,class=CODE,delta=1
    77                           	psect	text58,global,reloc=2,class=CODE,delta=1
    78                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    79                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    80                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    81  0000                     
    82                           ; Version 2.10
    83                           ; Generated 31/07/2019 GMT
    84                           ; 
    85                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    86                           ; All rights reserved.
    87                           ; 
    88                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    89                           ; 
    90                           ; Redistribution and use in source and binary forms, with or without modification, are
    91                           ; permitted provided that the following conditions are met:
    92                           ; 
    93                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    94                           ;        conditions and the following disclaimer.
    95                           ; 
    96                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    97                           ;        of conditions and the following disclaimer in the documentation and/or other
    98                           ;        materials provided with the distribution.
    99                           ; 
   100                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   101                           ;        software without specific prior written permission.
   102                           ; 
   103                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   104                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   105                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   106                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   107                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   108                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   109                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   110                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   111                           ; 
   112                           ; 
   113                           ; Code-generator required, PIC18F4431 Definitions
   114                           ; 
   115                           ; SFR Addresses
   116  0000                     
   117                           	psect	idataCOMRAM
   118  001ED0                     __pidataCOMRAM:
   119                           	opt callstack 0
   120                           
   121                           ;initializer for _hysteresis
   122  001ED0  0033               	dw	51
   123                           
   124                           ;initializer for _MVF_DATA
   125  001ED2  64                 	db	100
   126                           
   127                           ;initializer for _MVE_DATA
   128  001ED3  64                 	db	100
   129                           
   130                           ;initializer for _THF_ADR
   131  001ED4  01                 	db	1
   132                           
   133                           ;initializer for _controlRate
   134  001ED5  0A                 	db	10
   135                           
   136                           	psect	idataBANK0
   137  001CDA                     __pidataBANK0:
   138                           	opt callstack 0
   139                           
   140                           ;initializer for _closing5
   141  001CDA  05                 	db	5
   142  001CDB  84                 	db	132
   143  001CDC  84                 	db	132
   144  001CDD  05                 	db	5
   145  001CDE  05                 	db	5
   146                           
   147                           ;initializer for _closing3
   148  001CDF  6E                 	db	110
   149  001CE0  C8                 	db	200
   150  001CE1  A0                 	db	160
   151  001CE2  F5                 	db	245
   152  001CE3  F5                 	db	245
   153                           
   154                           ;initializer for _closing1
   155  001CE4  F5                 	db	245
   156  001CE5  AA                 	db	170
   157  001CE6  F5                 	db	245
   158  001CE7  F5                 	db	245
   159  001CE8  F5                 	db	245
   160                           
   161                           ;initializer for _PrePos4
   162  001CE9  F5                 	db	245
   163  001CEA  05                 	db	5
   164  001CEB  50                 	db	80
   165  001CEC  05                 	db	5
   166  001CED  05                 	db	5
   167                           
   168                           ;initializer for _PrePos2
   169  001CEE  6E                 	db	110
   170  001CEF  05                 	db	5
   171  001CF0  A0                 	db	160
   172  001CF1  F5                 	db	245
   173  001CF2  F5                 	db	245
   174                           
   175                           ;initializer for _PrePos0
   176  001CF3  F5                 	db	245
   177  001CF4  05                 	db	5
   178  001CF5  1E                 	db	30
   179  001CF6  32                 	db	50
   180  001CF7  32                 	db	50
   181                           
   182                           ;initializer for _Dbyte
   183  001CF8  FF                 	db	255
   184                           
   185                           ;initializer for _STPbyte
   186  001CF9  EF                 	db	239
   187                           
   188                           ;initializer for _Sbyte
   189  001CFA  EE                 	db	238
   190                           
   191                           ;initializer for _mvFbyte
   192  001CFB  DD                 	db	221
   193                           
   194                           ;initializer for _mvEbyte
   195  001CFC  CC                 	db	204
   196                           
   197                           ;initializer for _thFbyte
   198  001CFD  BB                 	db	187
   199                           
   200                           ;initializer for _thEbyte
   201  001CFE  AA                 	db	170
   202                           
   203                           ;initializer for _MVF_ADR
   204  001CFF  03                 	db	3
   205                           
   206                           ;initializer for _MVE_ADR
   207  001D00  02                 	db	2
   208                           
   209                           ;initializer for _USARTinput_length
   210  001D01  32                 	db	50
   211                           
   212                           	psect	nvCOMRAM
   213  000036                     __pnvCOMRAM:
   214                           	opt callstack 0
   215  000036                     _thF:
   216                           	opt callstack 0
   217  000036                     	ds	2
   218  000038                     _thE:
   219                           	opt callstack 0
   220  000038                     	ds	2
   221  00003A                     _THF_DATA:
   222                           	opt callstack 0
   223  00003A                     	ds	1
   224  00003B                     _THE_DATA:
   225                           	opt callstack 0
   226  00003B                     	ds	1
   227                           
   228                           	psect	nvBANK0
   229  0000E2                     __pnvBANK0:
   230                           	opt callstack 0
   231  0000E2                     _thF_l:
   232                           	opt callstack 0
   233  0000E2                     	ds	2
   234  0000E4                     _thF_h:
   235                           	opt callstack 0
   236  0000E4                     	ds	2
   237  0000E6                     _thE_l:
   238                           	opt callstack 0
   239  0000E6                     	ds	2
   240  0000E8                     _thE_h:
   241                           	opt callstack 0
   242  0000E8                     	ds	2
   243  0000                     _PIR1bits	set	3998
   244  0000                     _RCREG	set	4014
   245  0000                     _EECON2	set	4007
   246  0000                     _EECON1bits	set	4006
   247  0000                     _EEDATA	set	4008
   248  0000                     _EEADR	set	4009
   249  0000                     _ADRESL	set	4035
   250  0000                     _ADRESH	set	4036
   251  0000                     _TMR0L	set	4054
   252  0000                     _TXREG	set	4013
   253  0000                     _PORTBbits	set	3969
   254  0000                     _PORTDbits	set	3971
   255  0000                     _ADCON2bits	set	4032
   256  0000                     _ADCON1bits	set	4033
   257  0000                     _ADCON0bits	set	4034
   258  0000                     _ADCHSbits	set	3993
   259  0000                     _ANSEL1bits	set	4025
   260  0000                     _TRISEbits	set	3990
   261  0000                     _TRISCbits	set	3988
   262  0000                     _RCSTAbits	set	4011
   263  0000                     _TXSTAbits	set	4012
   264  0000                     _BAUDCONbits	set	4010
   265  0000                     _SPBRG	set	4015
   266  0000                     _IPR1bits	set	3999
   267  0000                     _PIE1bits	set	3997
   268  0000                     _TMR1L	set	4046
   269  0000                     _TMR1H	set	4047
   270  0000                     _T1CONbits	set	4045
   271  0000                     _T0CONbits	set	4053
   272  0000                     _INTCON2bits	set	4081
   273  0000                     _INTCONbits	set	4082
   274  0000                     _RCONbits	set	4048
   275  0000                     _TRISBbits	set	3987
   276  0000                     _TRISDbits	set	3989
   277  0000                     _TRISAbits	set	3986
   278  0000                     _ANSEL0bits	set	4024
   279                           
   280                           ; #config settings
   281  0000                     
   282                           	psect	cinit
   283  001638                     __pcinit:
   284                           	opt callstack 0
   285  001638                     start_initialization:
   286                           	opt callstack 0
   287  001638                     __initialization:
   288                           	opt callstack 0
   289                           
   290                           ; Initialize objects allocated to BANK0 (40 bytes)
   291                           ; load TBLPTR registers with __pidataBANK0
   292  001638  0EDA               	movlw	low __pidataBANK0
   293  00163A  6EF6               	movwf	tblptrl,c
   294  00163C  0E1C               	movlw	high __pidataBANK0
   295  00163E  6EF7               	movwf	tblptrh,c
   296  001640  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   297  001642  6EF8               	movwf	tblptru,c
   298  001644  EE00  F09E         	lfsr	0,__pdataBANK0
   299  001648  EE10 F028          	lfsr	1,40
   300  00164C                     copy_data0:
   301  00164C  0009               	tblrd		*+
   302  00164E  CFF5 FFEE          	movff	tablat,postinc0
   303  001652  50E5               	movf	postdec1,w,c
   304  001654  50E1               	movf	fsr1l,w,c
   305  001656  E1FA               	bnz	copy_data0
   306                           
   307                           ; Initialize objects allocated to COMRAM (6 bytes)
   308                           ; load TBLPTR registers with __pidataCOMRAM
   309  001658  0ED0               	movlw	low __pidataCOMRAM
   310  00165A  6EF6               	movwf	tblptrl,c
   311  00165C  0E1E               	movlw	high __pidataCOMRAM
   312  00165E  6EF7               	movwf	tblptrh,c
   313  001660  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   314  001662  6EF8               	movwf	tblptru,c
   315  001664  EE00  F03C         	lfsr	0,__pdataCOMRAM
   316  001668  EE10 F006          	lfsr	1,6
   317  00166C                     copy_data1:
   318  00166C  0009               	tblrd		*+
   319  00166E  CFF5 FFEE          	movff	tablat,postinc0
   320  001672  50E5               	movf	postdec1,w,c
   321  001674  50E1               	movf	fsr1l,w,c
   322  001676  E1FA               	bnz	copy_data1
   323                           
   324                           ; Clear objects allocated to BANK1 (50 bytes)
   325  001678  EE01  F000         	lfsr	0,__pbssBANK1
   326  00167C  0E32               	movlw	50
   327  00167E                     clear_0:
   328  00167E  6AEE               	clrf	postinc0,c
   329  001680  06E8               	decf	wreg,f,c
   330  001682  E1FD               	bnz	clear_0
   331                           
   332                           ; Clear objects allocated to BANK0 (62 bytes)
   333  001684  EE00  F060         	lfsr	0,__pbssBANK0
   334  001688  0E3E               	movlw	62
   335  00168A                     clear_1:
   336  00168A  6AEE               	clrf	postinc0,c
   337  00168C  06E8               	decf	wreg,f,c
   338  00168E  E1FD               	bnz	clear_1
   339                           
   340                           ; Clear objects allocated to COMRAM (15 bytes)
   341  001690  EE00  F027         	lfsr	0,__pbssCOMRAM
   342  001694  0E0F               	movlw	15
   343  001696                     clear_2:
   344  001696  6AEE               	clrf	postinc0,c
   345  001698  06E8               	decf	wreg,f,c
   346  00169A  E1FD               	bnz	clear_2
   347  00169C                     end_of_initialization:
   348                           	opt callstack 0
   349  00169C                     __end_of__initialization:
   350                           	opt callstack 0
   351  00169C  9042               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   352  00169E  9242               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   353  0016A0  0E00               	movlw	low (__Lmediumconst shr (0+16))
   354  0016A2  6EF8               	movwf	tblptru,c
   355  0016A4  0100               	movlb	0
   356  0016A6  EFBD  F000         	goto	_main	;jump to C main() function
   357                           
   358                           	psect	bssCOMRAM
   359  000027                     __pbssCOMRAM:
   360                           	opt callstack 0
   361  000027                     _extensor_averagePart:
   362                           	opt callstack 0
   363  000027                     	ds	2
   364  000029                     _flexor_averagePart:
   365                           	opt callstack 0
   366  000029                     	ds	2
   367  00002B                     _is:
   368                           	opt callstack 0
   369  00002B                     	ds	2
   370  00002D                     _extensor:
   371                           	opt callstack 0
   372  00002D                     	ds	2
   373  00002F                     _flexor:
   374                           	opt callstack 0
   375  00002F                     	ds	2
   376  000031                     _TCF_F:
   377                           	opt callstack 0
   378  000031                     	ds	1
   379  000032                     _TCF_E:
   380                           	opt callstack 0
   381  000032                     	ds	1
   382  000033                     _THE_ADR:
   383                           	opt callstack 0
   384  000033                     	ds	1
   385  000034                     _deviceMode:
   386                           	opt callstack 0
   387  000034                     	ds	1
   388  000035                     _iw:
   389                           	opt callstack 0
   390  000035                     	ds	1
   391                           
   392                           	psect	dataCOMRAM
   393  00003C                     __pdataCOMRAM:
   394                           	opt callstack 0
   395  00003C                     _hysteresis:
   396                           	opt callstack 0
   397  00003C                     	ds	2
   398  00003E                     _MVF_DATA:
   399                           	opt callstack 0
   400  00003E                     	ds	1
   401  00003F                     _MVE_DATA:
   402                           	opt callstack 0
   403  00003F                     	ds	1
   404  000040                     _THF_ADR:
   405                           	opt callstack 0
   406  000040                     	ds	1
   407  000041                     _controlRate:
   408                           	opt callstack 0
   409  000041                     	ds	1
   410                           
   411                           	psect	bssBANK0
   412  000060                     __pbssBANK0:
   413                           	opt callstack 0
   414  000060                     _USARTinput_val:
   415                           	opt callstack 0
   416  000060                     	ds	50
   417  000092                     _Pos:
   418                           	opt callstack 0
   419  000092                     	ds	4
   420  000096                     _extensor_average:
   421                           	opt callstack 0
   422  000096                     	ds	2
   423  000098                     _flexor_average:
   424                           	opt callstack 0
   425  000098                     	ds	2
   426  00009A                     _blinkCount:
   427                           	opt callstack 0
   428  00009A                     	ds	2
   429  00009C                     _CT10F:
   430                           	opt callstack 0
   431  00009C                     	ds	1
   432  00009D                     _ir:
   433                           	opt callstack 0
   434  00009D                     	ds	1
   435                           
   436                           	psect	dataBANK0
   437  00009E                     __pdataBANK0:
   438                           	opt callstack 0
   439  00009E                     _closing5:
   440                           	opt callstack 0
   441  00009E                     	ds	5
   442  0000A3                     _closing3:
   443                           	opt callstack 0
   444  0000A3                     	ds	5
   445  0000A8                     _closing1:
   446                           	opt callstack 0
   447  0000A8                     	ds	5
   448  0000AD                     _PrePos4:
   449                           	opt callstack 0
   450  0000AD                     	ds	5
   451  0000B2                     _PrePos2:
   452                           	opt callstack 0
   453  0000B2                     	ds	5
   454  0000B7                     _PrePos0:
   455                           	opt callstack 0
   456  0000B7                     	ds	5
   457  0000BC                     _Dbyte:
   458                           	opt callstack 0
   459  0000BC                     	ds	1
   460  0000BD                     _STPbyte:
   461                           	opt callstack 0
   462  0000BD                     	ds	1
   463  0000BE                     _Sbyte:
   464                           	opt callstack 0
   465  0000BE                     	ds	1
   466  0000BF                     _mvFbyte:
   467                           	opt callstack 0
   468  0000BF                     	ds	1
   469  0000C0                     _mvEbyte:
   470                           	opt callstack 0
   471  0000C0                     	ds	1
   472  0000C1                     _thFbyte:
   473                           	opt callstack 0
   474  0000C1                     	ds	1
   475  0000C2                     _thEbyte:
   476                           	opt callstack 0
   477  0000C2                     	ds	1
   478  0000C3                     _MVF_ADR:
   479                           	opt callstack 0
   480  0000C3                     	ds	1
   481  0000C4                     _MVE_ADR:
   482                           	opt callstack 0
   483  0000C4                     	ds	1
   484  0000C5                     _USARTinput_length:
   485                           	opt callstack 0
   486  0000C5                     	ds	1
   487                           
   488                           	psect	bssBANK1
   489  000100                     __pbssBANK1:
   490                           	opt callstack 0
   491  000100                     _USARTinput_data:
   492                           	opt callstack 0
   493  000100                     	ds	50
   494                           
   495                           	psect	cstackBANK1
   496  000132                     __pcstackBANK1:
   497                           	opt callstack 0
   498  000132                     ?_absFunc:
   499                           	opt callstack 0
   500  000132                     ?___wmul:
   501                           	opt callstack 0
   502  000132                     ?___awmod:
   503                           	opt callstack 0
   504  000132                     ?___lwmod:
   505                           	opt callstack 0
   506  000132                     ?___tmul:
   507                           	opt callstack 0
   508  000132                     ?___ltdiv:
   509                           	opt callstack 0
   510  000132                     Display_segment@on_off:
   511                           	opt callstack 0
   512  000132                     sendUSART@A:
   513                           	opt callstack 0
   514  000132                     adjustEEPROMdata@data:
   515                           	opt callstack 0
   516  000132                     write_EEprom@data:
   517                           	opt callstack 0
   518  000132                     read_EEprom@address:
   519                           	opt callstack 0
   520  000132                     Delay_ms@time:
   521                           	opt callstack 0
   522  000132                     absFunc@A:
   523                           	opt callstack 0
   524  000132                     signFunc@F:
   525                           	opt callstack 0
   526  000132                     conditionRelax@closingState:
   527                           	opt callstack 0
   528  000132                     ___wmul@multiplier:
   529                           	opt callstack 0
   530  000132                     ___awmod@dividend:
   531                           	opt callstack 0
   532  000132                     ___lwmod@dividend:
   533                           	opt callstack 0
   534  000132                     ___tmul@multiplier:
   535                           	opt callstack 0
   536  000132                     ___ltdiv@dividend:
   537                           	opt callstack 0
   538                           
   539                           ; 3 bytes @ 0x0
   540  000132                     	ds	1
   541  000133                     Display_segment@segment:
   542                           	opt callstack 0
   543  000133                     adjustEEPROMdata@type:
   544                           	opt callstack 0
   545  000133                     write_EEprom@address:
   546                           	opt callstack 0
   547  000133                     MoveMotor@MA3210:
   548                           	opt callstack 0
   549                           
   550                           ; 1 bytes @ 0x1
   551  000133                     	ds	1
   552  000134                     ??_Delay_ms:
   553  000134                     ??_conditionRelax:
   554  000134                     Display_letter@letter:
   555                           	opt callstack 0
   556  000134                     absFunc@B:
   557                           	opt callstack 0
   558  000134                     signFunc@E:
   559                           	opt callstack 0
   560  000134                     MoveMotor@vel:
   561                           	opt callstack 0
   562  000134                     ___wmul@multiplicand:
   563                           	opt callstack 0
   564  000134                     ___awmod@divisor:
   565                           	opt callstack 0
   566  000134                     ___lwmod@divisor:
   567                           	opt callstack 0
   568                           
   569                           ; 2 bytes @ 0x2
   570  000134                     	ds	1
   571  000135                     adjustEEPROMdata@defVal_mv:
   572                           	opt callstack 0
   573  000135                     Delay_ms@timer:
   574                           	opt callstack 0
   575  000135                     ___tmul@multiplicand:
   576                           	opt callstack 0
   577  000135                     ___ltdiv@divisor:
   578                           	opt callstack 0
   579                           
   580                           ; 3 bytes @ 0x3
   581  000135                     	ds	1
   582  000136                     ??_MoveMotor:
   583  000136                     adjustEEPROMdata@value:
   584                           	opt callstack 0
   585  000136                     signFunc@signResult:
   586                           	opt callstack 0
   587  000136                     conditionRelax@conditionMet:
   588                           	opt callstack 0
   589  000136                     ___awmod@counter:
   590                           	opt callstack 0
   591  000136                     ___lwmod@counter:
   592                           	opt callstack 0
   593  000136                     absFunc@result:
   594                           	opt callstack 0
   595  000136                     ___wmul@product:
   596                           	opt callstack 0
   597                           
   598                           ; 2 bytes @ 0x4
   599  000136                     	ds	1
   600  000137                     MoveMotor@S:
   601                           	opt callstack 0
   602  000137                     ___awmod@sign:
   603                           	opt callstack 0
   604  000137                     Display_number@number:
   605                           	opt callstack 0
   606                           
   607                           ; 2 bytes @ 0x5
   608  000137                     	ds	1
   609  000138                     ?___lwdiv:
   610                           	opt callstack 0
   611  000138                     readUSART@value:
   612                           	opt callstack 0
   613  000138                     MoveMotor@D8:
   614                           	opt callstack 0
   615  000138                     sendUSART_int@A:
   616                           	opt callstack 0
   617  000138                     ___lwdiv@dividend:
   618                           	opt callstack 0
   619  000138                     ___tmul@product:
   620                           	opt callstack 0
   621  000138                     ___ltdiv@quotient:
   622                           	opt callstack 0
   623                           
   624                           ; 3 bytes @ 0x6
   625  000138                     	ds	1
   626  000139                     readUSART_withTIMEOUT@value:
   627                           	opt callstack 0
   628  000139                     MoveMotor@D70:
   629                           	opt callstack 0
   630  000139                     getFingerStatus@MA3210:
   631                           	opt callstack 0
   632  000139                     getFingerPosition@MA:
   633                           	opt callstack 0
   634                           
   635                           ; 1 bytes @ 0x7
   636  000139                     	ds	1
   637  00013A                     sendUSART_int@lowpart:
   638                           	opt callstack 0
   639  00013A                     readUSART_withTIMEOUT@time:
   640                           	opt callstack 0
   641  00013A                     MoveMotor@FirstByte:
   642                           	opt callstack 0
   643  00013A                     getFingerStatus@statusFinger:
   644                           	opt callstack 0
   645  00013A                     getFingerPosition@value:
   646                           	opt callstack 0
   647  00013A                     ___lwdiv@divisor:
   648                           	opt callstack 0
   649                           
   650                           ; 2 bytes @ 0x8
   651  00013A                     	ds	1
   652  00013B                     ??_getHandPosition:
   653  00013B                     ?___atdiv:
   654                           	opt callstack 0
   655  00013B                     sendUSART_int@highpart:
   656                           	opt callstack 0
   657  00013B                     waitFingerReached@motorID:
   658                           	opt callstack 0
   659  00013B                     ___ltdiv@counter:
   660                           	opt callstack 0
   661  00013B                     ___atdiv@dividend:
   662                           	opt callstack 0
   663                           
   664                           ; 3 bytes @ 0x9
   665  00013B                     	ds	1
   666  00013C                     ?_velMapping:
   667                           	opt callstack 0
   668  00013C                     waitFingerReached@status:
   669                           	opt callstack 0
   670  00013C                     getHandPosition@i_finger:
   671                           	opt callstack 0
   672  00013C                     ___lwdiv@counter:
   673                           	opt callstack 0
   674  00013C                     velMapping@value:
   675                           	opt callstack 0
   676                           
   677                           ; 2 bytes @ 0xA
   678  00013C                     	ds	1
   679  00013D                     waitFingerReached@statusBit4:
   680                           	opt callstack 0
   681  00013D                     ___lwdiv@quotient:
   682                           	opt callstack 0
   683                           
   684                           ; 2 bytes @ 0xB
   685  00013D                     	ds	1
   686  00013E                     waitHandReached@motorID:
   687                           	opt callstack 0
   688  00013E                     velMapping@threshold:
   689                           	opt callstack 0
   690  00013E                     ___atdiv@divisor:
   691                           	opt callstack 0
   692                           
   693                           ; 3 bytes @ 0xC
   694  00013E                     	ds	1
   695  00013F                     GraspPreshape@preshapeState:
   696                           	opt callstack 0
   697  00013F                     GraspControl@S:
   698                           	opt callstack 0
   699                           
   700                           ; 1 bytes @ 0xD
   701  00013F                     	ds	1
   702  000140                     ??_velMapping:
   703  000140                     GraspControl@speed:
   704                           	opt callstack 0
   705                           
   706                           ; 2 bytes @ 0xE
   707  000140                     	ds	1
   708  000141                     ___atdiv@counter:
   709                           	opt callstack 0
   710                           
   711                           ; 1 bytes @ 0xF
   712  000141                     	ds	1
   713  000142                     GraspControl@graspState:
   714                           	opt callstack 0
   715  000142                     ___atdiv@sign:
   716                           	opt callstack 0
   717  000142                     velMapping@aux:
   718                           	opt callstack 0
   719                           
   720                           ; 3 bytes @ 0x10
   721  000142                     	ds	1
   722  000143                     GraspControl@thumbPercentage:
   723                           	opt callstack 0
   724  000143                     ___atdiv@quotient:
   725                           	opt callstack 0
   726                           
   727                           ; 3 bytes @ 0x11
   728  000143                     	ds	2
   729  000145                     GraspControl@auxspeed_thumb:
   730                           	opt callstack 0
   731                           
   732                           ; 2 bytes @ 0x13
   733  000145                     	ds	1
   734  000146                     ?_percentage2threshold:
   735                           	opt callstack 0
   736                           
   737                           ; 2 bytes @ 0x14
   738  000146                     	ds	1
   739  000147                     velMapping@resultingVel:
   740                           	opt callstack 0
   741                           
   742                           ; 2 bytes @ 0x15
   743  000147                     	ds	1
   744  000148                     percentage2threshold@threshold_shortlong:
   745                           	opt callstack 0
   746                           
   747                           ; 3 bytes @ 0x16
   748  000148                     	ds	2
   749  00014A                     GraspControl@auxspeed_little:
   750                           	opt callstack 0
   751                           
   752                           ; 2 bytes @ 0x18
   753  00014A                     	ds	1
   754  00014B                     percentage2threshold@threshold_int:
   755                           	opt callstack 0
   756                           
   757                           ; 2 bytes @ 0x19
   758  00014B                     	ds	2
   759  00014D                     percentage2threshold@percentage:
   760                           	opt callstack 0
   761                           
   762                           ; 1 bytes @ 0x1B
   763  00014D                     	ds	1
   764  00014E                     main@forthbyte:
   765                           	opt callstack 0
   766                           
   767                           ; 1 bytes @ 0x1C
   768  00014E                     	ds	1
   769  00014F                     main@SCFLAG:
   770                           	opt callstack 0
   771                           
   772                           ; 1 bytes @ 0x1D
   773  00014F                     	ds	1
   774  000150                     main@PrealertLimit:
   775                           	opt callstack 0
   776                           
   777                           ; 2 bytes @ 0x1E
   778  000150                     	ds	2
   779  000152                     main@speed:
   780                           	opt callstack 0
   781                           
   782                           ; 2 bytes @ 0x20
   783  000152                     	ds	2
   784  000154                     main@firstByte:
   785                           	opt callstack 0
   786                           
   787                           ; 1 bytes @ 0x22
   788  000154                     	ds	1
   789  000155                     main@comState:
   790                           	opt callstack 0
   791                           
   792                           ; 1 bytes @ 0x23
   793  000155                     	ds	1
   794  000156                     main@speedExt:
   795                           	opt callstack 0
   796                           
   797                           ; 2 bytes @ 0x24
   798  000156                     	ds	2
   799  000158                     main@speedFlex:
   800                           	opt callstack 0
   801                           
   802                           ; 2 bytes @ 0x26
   803  000158                     	ds	2
   804  00015A                     main@Prealert:
   805                           	opt callstack 0
   806                           
   807                           ; 2 bytes @ 0x28
   808  00015A                     	ds	2
   809  00015C                     main@S:
   810                           	opt callstack 0
   811                           
   812                           ; 1 bytes @ 0x2A
   813  00015C                     	ds	1
   814  00015D                     main@thirdByte:
   815                           	opt callstack 0
   816                           
   817                           ; 1 bytes @ 0x2B
   818  00015D                     	ds	1
   819  00015E                     main@extensor_active:
   820                           	opt callstack 0
   821                           
   822                           ; 1 bytes @ 0x2C
   823  00015E                     	ds	1
   824  00015F                     main@flexor_active:
   825                           	opt callstack 0
   826                           
   827                           ; 1 bytes @ 0x2D
   828  00015F                     	ds	1
   829  000160                     main@secondByte:
   830                           	opt callstack 0
   831                           
   832                           ; 1 bytes @ 0x2E
   833  000160                     	ds	1
   834  000161                     main@state:
   835                           	opt callstack 0
   836                           
   837                           ; 1 bytes @ 0x2F
   838  000161                     	ds	1
   839                           
   840                           	psect	cstackBANK0
   841  0000C6                     __pcstackBANK0:
   842                           	opt callstack 0
   843  0000C6                     ?i1___atdiv:
   844                           	opt callstack 0
   845  0000C6                     i1___lwdiv@counter:
   846                           	opt callstack 0
   847  0000C6                     i1___atdiv@dividend:
   848                           	opt callstack 0
   849                           
   850                           ; 3 bytes @ 0x0
   851  0000C6                     	ds	1
   852  0000C7                     i1___lwdiv@quotient:
   853                           	opt callstack 0
   854                           
   855                           ; 2 bytes @ 0x1
   856  0000C7                     	ds	2
   857  0000C9                     i1___atdiv@divisor:
   858                           	opt callstack 0
   859                           
   860                           ; 3 bytes @ 0x3
   861  0000C9                     	ds	3
   862  0000CC                     i1___atdiv@counter:
   863                           	opt callstack 0
   864                           
   865                           ; 1 bytes @ 0x6
   866  0000CC                     	ds	1
   867  0000CD                     i1___atdiv@sign:
   868                           	opt callstack 0
   869                           
   870                           ; 1 bytes @ 0x7
   871  0000CD                     	ds	1
   872  0000CE                     i1___atdiv@quotient:
   873                           	opt callstack 0
   874                           
   875                           ; 3 bytes @ 0x8
   876  0000CE                     	ds	3
   877  0000D1                     ?_amplifiedSignalValue:
   878                           	opt callstack 0
   879  0000D1                     amplifiedSignalValue@signalVal:
   880                           	opt callstack 0
   881                           
   882                           ; 2 bytes @ 0xB
   883  0000D1                     	ds	2
   884  0000D3                     amplifiedSignalValue@maxVal:
   885                           	opt callstack 0
   886                           
   887                           ; 1 bytes @ 0xD
   888  0000D3                     	ds	1
   889  0000D4                     amplifiedSignalValue@amplifiedSignalValue_int:
   890                           	opt callstack 0
   891                           
   892                           ; 2 bytes @ 0xE
   893  0000D4                     	ds	2
   894  0000D6                     amplifiedSignalValue@amplifiedSignalValue_shortlong:
   895                           	opt callstack 0
   896                           
   897                           ; 3 bytes @ 0x10
   898  0000D6                     	ds	3
   899  0000D9                     ??_InterruptAction_low:
   900                           
   901                           ; 1 bytes @ 0x13
   902  0000D9                     	ds	9
   903                           
   904                           	psect	cstackCOMRAM
   905  000001                     __pcstackCOMRAM:
   906                           	opt callstack 0
   907  000001                     ?i2___tmul:
   908                           	opt callstack 0
   909  000001                     i2Display_segment@on_off:
   910                           	opt callstack 0
   911  000001                     i2read_EEprom@address:
   912                           	opt callstack 0
   913  000001                     i2Delay_ms@time:
   914                           	opt callstack 0
   915  000001                     i2___tmul@multiplier:
   916                           	opt callstack 0
   917                           
   918                           ; 3 bytes @ 0x0
   919  000001                     	ds	1
   920  000002                     clearUSARTbuffers@i_count:
   921                           	opt callstack 0
   922  000002                     i2Display_segment@segment:
   923                           	opt callstack 0
   924                           
   925                           ; 1 bytes @ 0x1
   926  000002                     	ds	1
   927  000003                     ??i2_Delay_ms:
   928  000003                     i2Display_letter@letter:
   929                           	opt callstack 0
   930                           
   931                           ; 1 bytes @ 0x2
   932  000003                     	ds	1
   933  000004                     i2Delay_ms@timer:
   934                           	opt callstack 0
   935  000004                     i2___tmul@multiplicand:
   936                           	opt callstack 0
   937                           
   938                           ; 3 bytes @ 0x3
   939  000004                     	ds	3
   940  000007                     i2___tmul@product:
   941                           	opt callstack 0
   942                           
   943                           ; 3 bytes @ 0x6
   944  000007                     	ds	3
   945  00000A                     ?i2___atdiv:
   946                           	opt callstack 0
   947  00000A                     i2___atdiv@dividend:
   948                           	opt callstack 0
   949                           
   950                           ; 3 bytes @ 0x9
   951  00000A                     	ds	3
   952  00000D                     i2___atdiv@divisor:
   953                           	opt callstack 0
   954                           
   955                           ; 3 bytes @ 0xC
   956  00000D                     	ds	3
   957  000010                     i2___atdiv@counter:
   958                           	opt callstack 0
   959                           
   960                           ; 1 bytes @ 0xF
   961  000010                     	ds	1
   962  000011                     i2___atdiv@sign:
   963                           	opt callstack 0
   964                           
   965                           ; 1 bytes @ 0x10
   966  000011                     	ds	1
   967  000012                     i2___atdiv@quotient:
   968                           	opt callstack 0
   969                           
   970                           ; 3 bytes @ 0x11
   971  000012                     	ds	3
   972  000015                     ?i2_percentage2threshold:
   973                           	opt callstack 0
   974                           
   975                           ; 2 bytes @ 0x14
   976  000015                     	ds	2
   977  000017                     i2percentage2threshold@percentage:
   978                           	opt callstack 0
   979                           
   980                           ; 1 bytes @ 0x16
   981  000017                     	ds	1
   982  000018                     i2percentage2threshold@threshold_shortlong:
   983                           	opt callstack 0
   984                           
   985                           ; 3 bytes @ 0x17
   986  000018                     	ds	3
   987  00001B                     i2percentage2threshold@threshold_int:
   988                           	opt callstack 0
   989                           
   990                           ; 2 bytes @ 0x1A
   991  00001B                     	ds	2
   992  00001D                     ??_ADC:
   993  00001D                     ?i1___wmul:
   994                           	opt callstack 0
   995  00001D                     ?i1___awmod:
   996                           	opt callstack 0
   997  00001D                     ?i1___tmul:
   998                           	opt callstack 0
   999  00001D                     i1___wmul@multiplier:
  1000                           	opt callstack 0
  1001  00001D                     i1___awmod@dividend:
  1002                           	opt callstack 0
  1003  00001D                     i1___tmul@multiplier:
  1004                           	opt callstack 0
  1005                           
  1006                           ; 3 bytes @ 0x1C
  1007  00001D                     	ds	2
  1008  00001F                     ADC@resultL:
  1009                           	opt callstack 0
  1010  00001F                     i1___wmul@multiplicand:
  1011                           	opt callstack 0
  1012  00001F                     i1___awmod@divisor:
  1013                           	opt callstack 0
  1014                           
  1015                           ; 2 bytes @ 0x1E
  1016  00001F                     	ds	1
  1017  000020                     ADC@resultH:
  1018                           	opt callstack 0
  1019  000020                     i1___tmul@multiplicand:
  1020                           	opt callstack 0
  1021                           
  1022                           ; 3 bytes @ 0x1F
  1023  000020                     	ds	1
  1024  000021                     i1___awmod@counter:
  1025                           	opt callstack 0
  1026  000021                     i1___wmul@product:
  1027                           	opt callstack 0
  1028                           
  1029                           ; 2 bytes @ 0x20
  1030  000021                     	ds	1
  1031  000022                     i1___awmod@sign:
  1032                           	opt callstack 0
  1033                           
  1034                           ; 1 bytes @ 0x21
  1035  000022                     	ds	1
  1036  000023                     ?i1___lwdiv:
  1037                           	opt callstack 0
  1038  000023                     i1___lwdiv@dividend:
  1039                           	opt callstack 0
  1040  000023                     i1___tmul@product:
  1041                           	opt callstack 0
  1042                           
  1043                           ; 3 bytes @ 0x22
  1044  000023                     	ds	2
  1045  000025                     i1___lwdiv@divisor:
  1046                           	opt callstack 0
  1047                           
  1048                           ; 2 bytes @ 0x24
  1049  000025                     	ds	1
  1050  000026                     
  1051                           ; 1 bytes @ 0x25
  1052  000026                     	ds	1
  1053  000027                     
  1054                           ; 1 bytes @ 0x26
  1055 ;;
  1056 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1057 ;;
  1058 ;; *************** function _main *****************
  1059 ;; Defined at:
  1060 ;;		line 120 in file "main.c"
  1061 ;; Parameters:    Size  Location     Type
  1062 ;;		None
  1063 ;; Auto vars:     Size  Location     Type
  1064 ;;  Prealert        2   40[BANK1 ] unsigned int 
  1065 ;;  speedFlex       2   38[BANK1 ] unsigned int 
  1066 ;;  speedExt        2   36[BANK1 ] unsigned int 
  1067 ;;  speed           2   32[BANK1 ] unsigned int 
  1068 ;;  PrealertLimi    2   30[BANK1 ] unsigned int 
  1069 ;;  state           1   47[BANK1 ] unsigned char 
  1070 ;;  secondByte      1   46[BANK1 ] unsigned char 
  1071 ;;  flexor_activ    1   45[BANK1 ] unsigned char 
  1072 ;;  extensor_act    1   44[BANK1 ] unsigned char 
  1073 ;;  thirdByte       1   43[BANK1 ] unsigned char 
  1074 ;;  S               1   42[BANK1 ] unsigned char 
  1075 ;;  comState        1   35[BANK1 ] unsigned char 
  1076 ;;  firstByte       1   34[BANK1 ] unsigned char 
  1077 ;;  SCFLAG          1   29[BANK1 ] unsigned char 
  1078 ;;  forthbyte       1   28[BANK1 ] unsigned char 
  1079 ;; Return value:  Size  Location     Type
  1080 ;;                  1    wreg      void 
  1081 ;; Registers used:
  1082 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1083 ;; Tracked objects:
  1084 ;;		On entry : 0/0
  1085 ;;		On exit  : 0/0
  1086 ;;		Unchanged: 0/0
  1087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1088 ;;      Params:         0       0       0       0
  1089 ;;      Locals:         0       0      20       0
  1090 ;;      Temps:          0       0       0       0
  1091 ;;      Totals:         0       0      20       0
  1092 ;;Total ram usage:       20 bytes
  1093 ;; Hardware stack levels required when called:   12
  1094 ;; This function calls:
  1095 ;;		_Delay_ms
  1096 ;;		_Display_letter
  1097 ;;		_Display_number
  1098 ;;		_GraspControl
  1099 ;;		_GraspPreshape
  1100 ;;		_Reset_segments
  1101 ;;		_absFunc
  1102 ;;		_adjustEEPROMdata
  1103 ;;		_blinkDisplayLetterC
  1104 ;;		_conditionRelax
  1105 ;;		_configADC
  1106 ;;		_configUSART
  1107 ;;		_config_DIO
  1108 ;;		_config_interrupt
  1109 ;;		_config_timer0
  1110 ;;		_config_timer1
  1111 ;;		_disableModeSwitch
  1112 ;;		_percentage2threshold
  1113 ;;		_readUSART_withTIMEOUT
  1114 ;;		_read_EEprom
  1115 ;;		_sendUSART
  1116 ;;		_sendUSART_int
  1117 ;;		_signFunc
  1118 ;;		_velMapping
  1119 ;;		_write_EEprom
  1120 ;; This function is called by:
  1121 ;;		Startup code after reset
  1122 ;; This function uses a non-reentrant model
  1123 ;;
  1124                           
  1125                           	psect	text0
  1126  00017A                     __ptext0:
  1127                           	opt callstack 0
  1128  00017A                     _main:
  1129                           	opt callstack 19
  1130                           
  1131                           ;main.c: 122: config_DIO();
  1132                           
  1133                           ;incstack = 0
  1134  00017A  EC20  F00F         	call	_config_DIO	;wreg free
  1135                           
  1136                           ;main.c: 123: config_interrupt();
  1137  00017E  EC62  F00F         	call	_config_interrupt	;wreg free
  1138                           
  1139                           ;main.c: 124: config_timer0();
  1140  000182  EC54  F00F         	call	_config_timer0	;wreg free
  1141                           
  1142                           ;main.c: 125: config_timer1();
  1143  000186  ECD4  F00E         	call	_config_timer1	;wreg free
  1144                           
  1145                           ;main.c: 126: configUSART();
  1146  00018A  ECE1  F00E         	call	_configUSART	;wreg free
  1147                           
  1148                           ;main.c: 127: configADC();
  1149  00018E  EC26  F00E         	call	_configADC	;wreg free
  1150                           
  1151                           ;main.c: 130: unsigned char comState = 0;
  1152  000192  0E00               	movlw	0
  1153  000194  0101               	movlb	1	; () banked
  1154  000196  6F55               	movwf	main@comState& (0+255),b
  1155                           
  1156                           ; BSR set to: 1
  1157                           ;main.c: 132: unsigned char secondByte = 0;
  1158                           
  1159                           ; BSR set to: 1
  1160  000198  0E00               	movlw	0
  1161  00019A  6F60               	movwf	main@secondByte& (0+255),b
  1162                           
  1163                           ; BSR set to: 1
  1164                           ;main.c: 136: unsigned char S = 0;
  1165                           
  1166                           ; BSR set to: 1
  1167                           
  1168                           ; BSR set to: 1
  1169  00019C  0E00               	movlw	0
  1170  00019E  6F5C               	movwf	main@S& (0+255),b
  1171                           
  1172                           ; BSR set to: 1
  1173                           ;main.c: 137: unsigned int speed = 0;
  1174  0001A0  0E00               	movlw	0
  1175  0001A2  6F53               	movwf	(main@speed+1)& (0+255),b
  1176  0001A4  0E00               	movlw	0
  1177  0001A6  6F52               	movwf	main@speed& (0+255),b
  1178                           
  1179                           ; BSR set to: 1
  1180                           ;main.c: 138: unsigned int speedExt = 0;
  1181  0001A8  0E00               	movlw	0
  1182  0001AA  6F57               	movwf	(main@speedExt+1)& (0+255),b
  1183  0001AC  0E00               	movlw	0
  1184  0001AE  6F56               	movwf	main@speedExt& (0+255),b
  1185                           
  1186                           ; BSR set to: 1
  1187                           ;main.c: 139: unsigned int speedFlex = 0;
  1188  0001B0  0E00               	movlw	0
  1189  0001B2  6F59               	movwf	(main@speedFlex+1)& (0+255),b
  1190  0001B4  0E00               	movlw	0
  1191  0001B6  6F58               	movwf	main@speedFlex& (0+255),b
  1192                           
  1193                           ; BSR set to: 1
  1194                           ;main.c: 141: unsigned char state = 0;
  1195  0001B8  0E00               	movlw	0
  1196  0001BA  6F61               	movwf	main@state& (0+255),b
  1197                           
  1198                           ; BSR set to: 1
  1199                           ;main.c: 142: unsigned char SCFLAG = 1;
  1200  0001BC  0E01               	movlw	1
  1201  0001BE  6F4F               	movwf	main@SCFLAG& (0+255),b
  1202                           
  1203                           ; BSR set to: 1
  1204                           ;main.c: 143: unsigned int Prealert = 0;
  1205  0001C0  0E00               	movlw	0
  1206  0001C2  6F5B               	movwf	(main@Prealert+1)& (0+255),b
  1207  0001C4  0E00               	movlw	0
  1208  0001C6  6F5A               	movwf	main@Prealert& (0+255),b
  1209                           
  1210                           ; BSR set to: 1
  1211                           ;main.c: 144: unsigned int PrealertLimit = 100;
  1212  0001C8  0E00               	movlw	0
  1213  0001CA  6F51               	movwf	(main@PrealertLimit+1)& (0+255),b
  1214  0001CC  0E64               	movlw	100
  1215  0001CE  6F50               	movwf	main@PrealertLimit& (0+255),b
  1216                           
  1217                           ; BSR set to: 1
  1218                           ;main.c: 145: unsigned char extensor_active = 0;
  1219  0001D0  0E00               	movlw	0
  1220  0001D2  6F5E               	movwf	main@extensor_active& (0+255),b
  1221                           
  1222                           ; BSR set to: 1
  1223                           ;main.c: 146: unsigned char flexor_active = 0;
  1224  0001D4  0E00               	movlw	0
  1225  0001D6  6F5F               	movwf	main@flexor_active& (0+255),b
  1226                           
  1227                           ; BSR set to: 1
  1228                           ;main.c: 149: CT10F = 0;
  1229  0001D8  0E00               	movlw	0
  1230  0001DA  0100               	movlb	0	; () banked
  1231  0001DC  6F9C               	movwf	_CT10F& (0+255),b
  1232                           
  1233                           ; BSR set to: 0
  1234                           ;main.c: 150: is = 0;
  1235  0001DE  0E00               	movlw	0
  1236  0001E0  6E2C               	movwf	(_is+1)^0,c
  1237  0001E2  0E00               	movlw	0
  1238  0001E4  6E2B               	movwf	_is^0,c
  1239                           
  1240                           ; BSR set to: 0
  1241                           ;main.c: 151: deviceMode = 0;
  1242  0001E6  0E00               	movlw	0
  1243  0001E8  6E34               	movwf	_deviceMode^0,c
  1244                           
  1245                           ; BSR set to: 0
  1246                           ;main.c: 154: MVE_DATA = read_EEprom(MVE_ADR);
  1247  0001EA  0E02               	movlw	2
  1248  0001EC  EC2B  F00F         	call	_read_EEprom
  1249  0001F0  6E3F               	movwf	_MVE_DATA^0,c
  1250                           
  1251                           ;main.c: 155: MVF_DATA = read_EEprom(MVF_ADR);
  1252  0001F2  0E03               	movlw	3
  1253  0001F4  EC2B  F00F         	call	_read_EEprom
  1254  0001F8  6E3E               	movwf	_MVF_DATA^0,c
  1255                           
  1256                           ;main.c: 156: THE_DATA = read_EEprom(THE_ADR);
  1257  0001FA  5033               	movf	_THE_ADR^0,w,c
  1258  0001FC  EC2B  F00F         	call	_read_EEprom
  1259  000200  6E3B               	movwf	_THE_DATA^0,c
  1260                           
  1261                           ;main.c: 157: THF_DATA = read_EEprom(THF_ADR);
  1262  000202  5040               	movf	_THF_ADR^0,w,c
  1263  000204  EC2B  F00F         	call	_read_EEprom
  1264  000208  6E3A               	movwf	_THF_DATA^0,c
  1265                           
  1266                           ;main.c: 158: MVE_DATA = adjustEEPROMdata('M',MVE_DATA);
  1267  00020A  C03F  F132         	movff	_MVE_DATA,adjustEEPROMdata@data
  1268  00020E  0E4D               	movlw	77
  1269  000210  EC0C  F00E         	call	_adjustEEPROMdata
  1270  000214  6E3F               	movwf	_MVE_DATA^0,c
  1271                           
  1272                           ; BSR set to: 1
  1273                           ;main.c: 159: MVF_DATA = adjustEEPROMdata('M',MVF_DATA);
  1274  000216  C03E  F132         	movff	_MVF_DATA,adjustEEPROMdata@data
  1275  00021A  0E4D               	movlw	77
  1276  00021C  EC0C  F00E         	call	_adjustEEPROMdata
  1277  000220  6E3E               	movwf	_MVF_DATA^0,c
  1278                           
  1279                           ; BSR set to: 1
  1280                           ;main.c: 160: THE_DATA = adjustEEPROMdata('T',THE_DATA);
  1281  000222  C03B  F132         	movff	_THE_DATA,adjustEEPROMdata@data
  1282  000226  0E54               	movlw	84
  1283  000228  EC0C  F00E         	call	_adjustEEPROMdata
  1284  00022C  6E3B               	movwf	_THE_DATA^0,c
  1285                           
  1286                           ; BSR set to: 1
  1287                           ;main.c: 161: THF_DATA = adjustEEPROMdata('T',THF_DATA);
  1288  00022E  C03A  F132         	movff	_THF_DATA,adjustEEPROMdata@data
  1289  000232  0E54               	movlw	84
  1290  000234  EC0C  F00E         	call	_adjustEEPROMdata
  1291  000238  6E3A               	movwf	_THF_DATA^0,c
  1292                           
  1293                           ; BSR set to: 1
  1294                           ;main.c: 162: thE = percentage2threshold(THE_DATA);
  1295  00023A  503B               	movf	_THE_DATA^0,w,c
  1296  00023C  ECE2  F00A         	call	_percentage2threshold
  1297  000240  C146  F038         	movff	?_percentage2threshold,_thE
  1298  000244  C147  F039         	movff	?_percentage2threshold+1,_thE+1
  1299                           
  1300                           ; BSR set to: 1
  1301                           ;main.c: 163: thF = percentage2threshold(THF_DATA);
  1302  000248  503A               	movf	_THF_DATA^0,w,c
  1303  00024A  ECE2  F00A         	call	_percentage2threshold
  1304  00024E  C146  F036         	movff	?_percentage2threshold,_thF
  1305  000252  C147  F037         	movff	?_percentage2threshold+1,_thF+1
  1306                           
  1307                           ; BSR set to: 1
  1308                           ;main.c: 164: thE_h = thE;
  1309  000256  C038  F0E8         	movff	_thE,_thE_h
  1310  00025A  C039  F0E9         	movff	_thE+1,_thE_h+1
  1311                           
  1312                           ; BSR set to: 1
  1313                           ;main.c: 165: thE_l = thE - hysteresis;
  1314  00025E  503C               	movf	_hysteresis^0,w,c
  1315  000260  5C38               	subwf	_thE^0,w,c
  1316  000262  0100               	movlb	0	; () banked
  1317  000264  6FE6               	movwf	_thE_l& (0+255),b
  1318  000266  503D               	movf	(_hysteresis+1)^0,w,c
  1319  000268  5839               	subwfb	(_thE+1)^0,w,c
  1320  00026A  6FE7               	movwf	(_thE_l+1)& (0+255),b
  1321                           
  1322                           ; BSR set to: 0
  1323                           ;main.c: 166: thF_h = thF;
  1324  00026C  C036  F0E4         	movff	_thF,_thF_h
  1325  000270  C037  F0E5         	movff	_thF+1,_thF_h+1
  1326                           
  1327                           ; BSR set to: 0
  1328                           ;main.c: 167: thF_l = thF - hysteresis;
  1329  000274  503C               	movf	_hysteresis^0,w,c
  1330  000276  5C36               	subwf	_thF^0,w,c
  1331  000278  6FE2               	movwf	_thF_l& (0+255),b
  1332  00027A  503D               	movf	(_hysteresis+1)^0,w,c
  1333  00027C  5837               	subwfb	(_thF+1)^0,w,c
  1334  00027E  6FE3               	movwf	(_thF_l+1)& (0+255),b
  1335                           
  1336                           ;main.c: 169: Reset_segments();
  1337  000280  EC34  F00F         	call	_Reset_segments	;wreg free
  1338                           
  1339                           ;main.c: 170: sendUSART(0x46);
  1340  000284  0E46               	movlw	70
  1341  000286  EC5B  F00F         	call	_sendUSART
  1342                           
  1343                           ;main.c: 172: Delay_ms(2000);
  1344  00028A  0E07               	movlw	7
  1345  00028C  0101               	movlb	1	; () banked
  1346  00028E  6F33               	movwf	(Delay_ms@time+1)& (0+255),b
  1347  000290  0ED0               	movlw	208
  1348  000292  6F32               	movwf	Delay_ms@time& (0+255),b
  1349  000294  ECD4  F00D         	call	_Delay_ms	;wreg free
  1350                           
  1351                           ; BSR set to: 1
  1352                           ;main.c: 173: GraspPreshape(state);
  1353  000298  5161               	movf	main@state& (0+255),w,b
  1354  00029A  EC44  F008         	call	_GraspPreshape
  1355  00029E  D318               	goto	l5352
  1356  0002A0                     l5020:
  1357                           
  1358                           ;main.c: 178: if (CT10F == 1){
  1359  0002A0  0100               	movlb	0	; () banked
  1360  0002A2  059C               	decf	_CT10F& (0+255),w,b
  1361  0002A4  A4D8               	btfss	status,2,c
  1362  0002A6  D314               	goto	l5352
  1363                           
  1364                           ; BSR set to: 0
  1365                           ;main.c: 179: CT10F = 0;
  1366  0002A8  0E00               	movlw	0
  1367  0002AA  6F9C               	movwf	_CT10F& (0+255),b
  1368                           
  1369                           ; BSR set to: 0
  1370                           ;main.c: 182: if (extensor_average > thE_h && extensor_active == 0) extensor_active = 1;
  1371  0002AC  5196               	movf	_extensor_average& (0+255),w,b
  1372  0002AE  5DE8               	subwf	_thE_h& (0+255),w,b
  1373  0002B0  5197               	movf	(_extensor_average+1)& (0+255),w,b
  1374  0002B2  59E9               	subwfb	(_thE_h+1)& (0+255),w,b
  1375  0002B4  B0D8               	btfsc	status,0,c
  1376  0002B6  D006               	goto	l5030
  1377                           
  1378                           ; BSR set to: 0
  1379  0002B8  0101               	movlb	1	; () banked
  1380  0002BA  515E               	movf	main@extensor_active& (0+255),w,b
  1381  0002BC  A4D8               	btfss	status,2,c
  1382  0002BE  D002               	goto	l5030
  1383                           
  1384                           ; BSR set to: 1
  1385  0002C0  0E01               	movlw	1
  1386  0002C2  D00C               	goto	L1
  1387  0002C4                     l5030:
  1388                           
  1389                           ;main.c: 183: else if (extensor_average < thE_l && extensor_active == 1) extensor_active
      +                           = 0;
  1390  0002C4  0100               	movlb	0	; () banked
  1391  0002C6  51E6               	movf	_thE_l& (0+255),w,b
  1392  0002C8  5D96               	subwf	_extensor_average& (0+255),w,b
  1393  0002CA  51E7               	movf	(_thE_l+1)& (0+255),w,b
  1394  0002CC  5997               	subwfb	(_extensor_average+1)& (0+255),w,b
  1395  0002CE  B0D8               	btfsc	status,0,c
  1396  0002D0  D006               	goto	l5036
  1397                           
  1398                           ; BSR set to: 0
  1399  0002D2  0101               	movlb	1	; () banked
  1400  0002D4  055E               	decf	main@extensor_active& (0+255),w,b
  1401  0002D6  A4D8               	btfss	status,2,c
  1402  0002D8  D002               	goto	l5036
  1403                           
  1404                           ; BSR set to: 1
  1405  0002DA  0E00               	movlw	0
  1406  0002DC                     L1:
  1407  0002DC  6F5E               	movwf	main@extensor_active& (0+255),b
  1408  0002DE                     l5036:
  1409                           
  1410                           ;main.c: 184: if (flexor_average > thF_h && flexor_active == 0) flexor_active = 1;
  1411  0002DE  0100               	movlb	0	; () banked
  1412  0002E0  5198               	movf	_flexor_average& (0+255),w,b
  1413  0002E2  5DE4               	subwf	_thF_h& (0+255),w,b
  1414  0002E4  5199               	movf	(_flexor_average+1)& (0+255),w,b
  1415  0002E6  59E5               	subwfb	(_thF_h+1)& (0+255),w,b
  1416  0002E8  B0D8               	btfsc	status,0,c
  1417  0002EA  D006               	goto	l5042
  1418                           
  1419                           ; BSR set to: 0
  1420  0002EC  0101               	movlb	1	; () banked
  1421  0002EE  515F               	movf	main@flexor_active& (0+255),w,b
  1422  0002F0  A4D8               	btfss	status,2,c
  1423  0002F2  D002               	goto	l5042
  1424                           
  1425                           ; BSR set to: 1
  1426  0002F4  0E01               	movlw	1
  1427  0002F6  D00C               	goto	L2
  1428  0002F8                     l5042:
  1429                           
  1430                           ;main.c: 185: else if (flexor_average < thF_l && flexor_active == 1) flexor_active = 0;
  1431  0002F8  0100               	movlb	0	; () banked
  1432  0002FA  51E2               	movf	_thF_l& (0+255),w,b
  1433  0002FC  5D98               	subwf	_flexor_average& (0+255),w,b
  1434  0002FE  51E3               	movf	(_thF_l+1)& (0+255),w,b
  1435  000300  5999               	subwfb	(_flexor_average+1)& (0+255),w,b
  1436  000302  B0D8               	btfsc	status,0,c
  1437  000304  D006               	goto	l5048
  1438                           
  1439                           ; BSR set to: 0
  1440  000306  0101               	movlb	1	; () banked
  1441  000308  055F               	decf	main@flexor_active& (0+255),w,b
  1442  00030A  A4D8               	btfss	status,2,c
  1443  00030C  D002               	goto	l5048
  1444                           
  1445                           ; BSR set to: 1
  1446  00030E  0E00               	movlw	0
  1447  000310                     L2:
  1448  000310  6F5F               	movwf	main@flexor_active& (0+255),b
  1449  000312                     l5048:
  1450                           
  1451                           ;main.c: 190: if (SCFLAG == 1){
  1452  000312  0101               	movlb	1	; () banked
  1453  000314  054F               	decf	main@SCFLAG& (0+255),w,b
  1454  000316  A4D8               	btfss	status,2,c
  1455  000318  D1B0               	goto	l5202
  1456                           
  1457                           ; BSR set to: 1
  1458                           ;main.c: 191: if (state == 0 || state == 2 || state == 4) {
  1459  00031A  5161               	movf	main@state& (0+255),w,b
  1460  00031C  B4D8               	btfsc	status,2,c
  1461  00031E  D008               	goto	u5240
  1462                           
  1463                           ; BSR set to: 1
  1464  000320  0E02               	movlw	2
  1465  000322  1961               	xorwf	main@state& (0+255),w,b
  1466  000324  B4D8               	btfsc	status,2,c
  1467  000326  D004               	goto	u5240
  1468                           
  1469                           ; BSR set to: 1
  1470  000328  0E04               	movlw	4
  1471  00032A  1961               	xorwf	main@state& (0+255),w,b
  1472  00032C  A4D8               	btfss	status,2,c
  1473  00032E  D00F               	goto	l5062
  1474  000330                     u5240:
  1475                           
  1476                           ; BSR set to: 1
  1477                           ;main.c: 192: if(conditionRelax(state) != 1) GraspPreshape(state);
  1478  000330  C161  F132         	movff	main@state,conditionRelax@closingState
  1479  000334  6B33               	clrf	(conditionRelax@closingState+1)& (0+255),b
  1480  000336  ECA4  F00A         	call	_conditionRelax	;wreg free
  1481  00033A  06E8               	decf	wreg,f,c
  1482  00033C  B4D8               	btfsc	status,2,c
  1483  00033E  D003               	goto	l5060
  1484                           
  1485                           ; BSR set to: 1
  1486  000340  5161               	movf	main@state& (0+255),w,b
  1487  000342  EC44  F008         	call	_GraspPreshape
  1488  000346                     l5060:
  1489                           
  1490                           ; BSR set to: 1
  1491                           ;main.c: 193: Prealert = 0;
  1492  000346  0E00               	movlw	0
  1493  000348  6F5B               	movwf	(main@Prealert+1)& (0+255),b
  1494  00034A  0E00               	movlw	0
  1495  00034C  6F5A               	movwf	main@Prealert& (0+255),b
  1496  00034E                     l5062:
  1497                           
  1498                           ; BSR set to: 1
  1499                           ;main.c: 194: };main.c: 195: if (flexor_active == 0 && extensor_active == 0) {
  1500  00034E  515F               	movf	main@flexor_active& (0+255),w,b
  1501  000350  A4D8               	btfss	status,2,c
  1502  000352  D2BE               	goto	l5352
  1503                           
  1504                           ; BSR set to: 1
  1505  000354  515E               	movf	main@extensor_active& (0+255),w,b
  1506  000356  A4D8               	btfss	status,2,c
  1507  000358  D2BB               	goto	l5352
  1508                           
  1509                           ; BSR set to: 1
  1510                           ;main.c: 196: SCFLAG=0;
  1511  00035A  0E00               	movlw	0
  1512  00035C  D00F               	goto	L3
  1513  00035E                     l486:
  1514                           
  1515                           ; BSR set to: 1
  1516                           ;main.c: 201: INTCONbits.INT0IE = 1;
  1517  00035E  88F2               	bsf	242,4,c	;volatile
  1518                           
  1519                           ; BSR set to: 1
  1520                           ;main.c: 202: Display_number(state);
  1521  000360  C161  F137         	movff	main@state,Display_number@number
  1522  000364  6B38               	clrf	(Display_number@number+1)& (0+255),b
  1523  000366  ECDE  F005         	call	_Display_number	;wreg free
  1524                           
  1525                           ;main.c: 203: if (flexor_active == 1 && extensor_active == 1){
  1526  00036A  0101               	movlb	1	; () banked
  1527  00036C  055F               	decf	main@flexor_active& (0+255),w,b
  1528  00036E  A4D8               	btfss	status,2,c
  1529  000370  D007               	goto	l5076
  1530                           
  1531                           ; BSR set to: 1
  1532  000372  055E               	decf	main@extensor_active& (0+255),w,b
  1533  000374  A4D8               	btfss	status,2,c
  1534  000376  D004               	goto	l5076
  1535                           
  1536                           ; BSR set to: 1
  1537                           ;main.c: 204: state = 2;
  1538  000378  0E02               	movlw	2
  1539  00037A  D10A               	goto	L19
  1540  00037C                     L3:
  1541  00037C  6F4F               	movwf	main@SCFLAG& (0+255),b
  1542                           
  1543                           ;main.c: 206: }else if (flexor_active == 1){
  1544  00037E  D2A8               	goto	l5352
  1545  000380                     l5076:
  1546                           
  1547                           ; BSR set to: 1
  1548  000380  055F               	decf	main@flexor_active& (0+255),w,b
  1549  000382  A4D8               	btfss	status,2,c
  1550  000384  D08C               	goto	L5
  1551                           
  1552                           ; BSR set to: 1
  1553                           ;main.c: 207: if (extensor_average < thE_l){
  1554  000386  0100               	movlb	0	; () banked
  1555  000388  51E6               	movf	_thE_l& (0+255),w,b
  1556  00038A  5D96               	subwf	_extensor_average& (0+255),w,b
  1557  00038C  51E7               	movf	(_thE_l+1)& (0+255),w,b
  1558  00038E  5997               	subwfb	(_extensor_average+1)& (0+255),w,b
  1559  000390  B0D8               	btfsc	status,0,c
  1560  000392  D004               	goto	l5082
  1561  000394                     u5310:
  1562                           
  1563                           ;main.c: 208: state = 1;
  1564  000394  0E01               	movlw	1
  1565  000396  0101               	movlb	1	; () banked
  1566  000398  6F61               	movwf	main@state& (0+255),b
  1567  00039A  D081               	goto	L5
  1568  00039C                     l5082:
  1569                           
  1570                           ; BSR set to: 0
  1571                           ;main.c: 211: Prealert++;
  1572  00039C  0101               	movlb	1	; () banked
  1573  00039E  4B5A               	infsnz	main@Prealert& (0+255),f,b
  1574  0003A0  2B5B               	incf	(main@Prealert+1)& (0+255),f,b
  1575                           
  1576                           ; BSR set to: 1
  1577                           ;main.c: 212: if (Prealert > PrealertLimit) {
  1578  0003A2  515A               	movf	main@Prealert& (0+255),w,b
  1579  0003A4  5D50               	subwf	main@PrealertLimit& (0+255),w,b
  1580  0003A6  515B               	movf	(main@Prealert+1)& (0+255),w,b
  1581  0003A8  5951               	subwfb	(main@PrealertLimit+1)& (0+255),w,b
  1582  0003AA  A0D8               	btfss	status,0,c
  1583  0003AC  D7F3               	goto	u5310
  1584  0003AE  D290               	goto	l5352
  1585  0003B0                     l5090:
  1586                           
  1587                           ; BSR set to: 1
  1588                           ;main.c: 220: disableModeSwitch();
  1589  0003B0  EC6B  F00F         	call	_disableModeSwitch	;wreg free
  1590                           
  1591                           ;main.c: 221: Display_number(state);
  1592  0003B4  C161  F137         	movff	main@state,Display_number@number
  1593  0003B8  0101               	movlb	1	; () banked
  1594  0003BA  6B38               	clrf	(Display_number@number+1)& (0+255),b
  1595  0003BC  ECDE  F005         	call	_Display_number	;wreg free
  1596                           
  1597                           ;main.c: 222: if ( flexor_active == 0 && extensor_active == 0){
  1598  0003C0  0101               	movlb	1	; () banked
  1599  0003C2  515F               	movf	main@flexor_active& (0+255),w,b
  1600  0003C4  A4D8               	btfss	status,2,c
  1601  0003C6  D013               	goto	l5104
  1602                           
  1603                           ; BSR set to: 1
  1604  0003C8  515E               	movf	main@extensor_active& (0+255),w,b
  1605  0003CA  A4D8               	btfss	status,2,c
  1606  0003CC  D010               	goto	l5104
  1607                           
  1608                           ; BSR set to: 1
  1609                           ;main.c: 223: if(conditionRelax(state) == 1) state = 0;
  1610  0003CE  C161  F132         	movff	main@state,conditionRelax@closingState
  1611  0003D2  6B33               	clrf	(conditionRelax@closingState+1)& (0+255),b
  1612  0003D4  ECA4  F00A         	call	_conditionRelax	;wreg free
  1613  0003D8  06E8               	decf	wreg,f,c
  1614  0003DA  A4D8               	btfss	status,2,c
  1615  0003DC  D003               	goto	l5102
  1616                           
  1617                           ; BSR set to: 1
  1618  0003DE  0E00               	movlw	0
  1619  0003E0  6F61               	movwf	main@state& (0+255),b
  1620  0003E2  D038               	goto	l5110
  1621  0003E4                     l5102:
  1622                           
  1623                           ; BSR set to: 1
  1624                           ;main.c: 224: else speed = 0;
  1625  0003E4  0E00               	movlw	0
  1626  0003E6  6F53               	movwf	(main@speed+1)& (0+255),b
  1627  0003E8  0E00               	movlw	0
  1628  0003EA  6F52               	movwf	main@speed& (0+255),b
  1629  0003EC  D033               	goto	l5110
  1630  0003EE                     l5104:
  1631                           
  1632                           ; BSR set to: 1
  1633                           ;main.c: 226: else{;main.c: 227: speedFlex = velMapping(flexor_average,thF_l);
  1634  0003EE  C098  F13C         	movff	_flexor_average,velMapping@value
  1635  0003F2  C099  F13D         	movff	_flexor_average+1,velMapping@value+1
  1636  0003F6  C0E2  F13E         	movff	_thF_l,velMapping@threshold
  1637  0003FA  C0E3  F13F         	movff	_thF_l+1,velMapping@threshold+1
  1638  0003FE  EC95  F009         	call	_velMapping	;wreg free
  1639  000402  C13C  F158         	movff	?_velMapping,main@speedFlex
  1640  000406  C13D  F159         	movff	?_velMapping+1,main@speedFlex+1
  1641                           
  1642                           ;main.c: 228: speedExt = velMapping(extensor_average,thE_l);
  1643  00040A  C096  F13C         	movff	_extensor_average,velMapping@value
  1644  00040E  C097  F13D         	movff	_extensor_average+1,velMapping@value+1
  1645  000412  C0E6  F13E         	movff	_thE_l,velMapping@threshold
  1646  000416  C0E7  F13F         	movff	_thE_l+1,velMapping@threshold+1
  1647  00041A  EC95  F009         	call	_velMapping	;wreg free
  1648  00041E  C13C  F156         	movff	?_velMapping,main@speedExt
  1649  000422  C13D  F157         	movff	?_velMapping+1,main@speedExt+1
  1650                           
  1651                           ;main.c: 229: S = signFunc(speedFlex,speedExt);
  1652  000426  C158  F132         	movff	main@speedFlex,signFunc@F
  1653  00042A  C159  F133         	movff	main@speedFlex+1,signFunc@F+1
  1654  00042E  C156  F134         	movff	main@speedExt,signFunc@E
  1655  000432  C157  F135         	movff	main@speedExt+1,signFunc@E+1
  1656  000436  EC08  F00F         	call	_signFunc	;wreg free
  1657  00043A  6F5C               	movwf	main@S& (0+255),b
  1658                           
  1659                           ; BSR set to: 1
  1660                           ;main.c: 230: if(S == 1) speed = speedFlex;
  1661  00043C  055C               	decf	main@S& (0+255),w,b
  1662  00043E  A4D8               	btfss	status,2,c
  1663  000440  D005               	goto	l500
  1664                           
  1665                           ; BSR set to: 1
  1666  000442  C158  F152         	movff	main@speedFlex,main@speed
  1667  000446  C159  F153         	movff	main@speedFlex+1,main@speed+1
  1668  00044A  D004               	goto	l5110
  1669  00044C                     l500:
  1670                           
  1671                           ; BSR set to: 1
  1672                           ;main.c: 231: else speed = speedExt;
  1673  00044C  C156  F152         	movff	main@speedExt,main@speed
  1674  000450  C157  F153         	movff	main@speedExt+1,main@speed+1
  1675  000454                     l5110:
  1676                           
  1677                           ; BSR set to: 1
  1678                           ;main.c: 232: };main.c: 234: GraspControl(state, S, speed);
  1679  000454  C15C  F13F         	movff	main@S,GraspControl@S
  1680  000458  C152  F140         	movff	main@speed,GraspControl@speed
  1681  00045C  C153  F141         	movff	main@speed+1,GraspControl@speed+1
  1682  000460  5161               	movf	main@state& (0+255),w,b
  1683  000462  EC70  F004         	call	_GraspControl
  1684                           
  1685                           ;main.c: 235: break;
  1686  000466  D234               	goto	l5352
  1687  000468                     l502:
  1688                           
  1689                           ; BSR set to: 1
  1690                           ;main.c: 237: INTCONbits.INT0IE = 1;
  1691  000468  88F2               	bsf	242,4,c	;volatile
  1692                           
  1693                           ; BSR set to: 1
  1694                           ;main.c: 238: Display_number(state);
  1695  00046A  C161  F137         	movff	main@state,Display_number@number
  1696  00046E  6B38               	clrf	(Display_number@number+1)& (0+255),b
  1697  000470  ECDE  F005         	call	_Display_number	;wreg free
  1698                           
  1699                           ;main.c: 239: if (flexor_active == 1 && extensor_active == 1){
  1700  000474  0101               	movlb	1	; () banked
  1701  000476  055F               	decf	main@flexor_active& (0+255),w,b
  1702  000478  A4D8               	btfss	status,2,c
  1703  00047A  D005               	goto	l5120
  1704                           
  1705                           ; BSR set to: 1
  1706  00047C  055E               	decf	main@extensor_active& (0+255),w,b
  1707  00047E  A4D8               	btfss	status,2,c
  1708  000480  D002               	goto	l5120
  1709                           
  1710                           ; BSR set to: 1
  1711                           ;main.c: 240: state = 4;
  1712  000482  0E04               	movlw	4
  1713  000484  D085               	goto	L19
  1714  000486                     l5120:
  1715                           
  1716                           ; BSR set to: 1
  1717  000486  055F               	decf	main@flexor_active& (0+255),w,b
  1718  000488  A4D8               	btfss	status,2,c
  1719  00048A  D009               	goto	L5
  1720                           
  1721                           ; BSR set to: 1
  1722                           ;main.c: 243: if (extensor_average < thE_l){
  1723  00048C  0100               	movlb	0	; () banked
  1724  00048E  51E6               	movf	_thE_l& (0+255),w,b
  1725  000490  5D96               	subwf	_extensor_average& (0+255),w,b
  1726  000492  51E7               	movf	(_thE_l+1)& (0+255),w,b
  1727  000494  5997               	subwfb	(_extensor_average+1)& (0+255),w,b
  1728  000496  B0D8               	btfsc	status,0,c
  1729  000498  D007               	goto	l5126
  1730  00049A                     u5400:
  1731                           
  1732                           ;main.c: 244: state = 3;
  1733  00049A  0E03               	movlw	3
  1734  00049C  D77C               	goto	L20
  1735  00049E                     L5:
  1736                           
  1737                           ;main.c: 245: Prealert = 0;
  1738  00049E  0E00               	movlw	0
  1739  0004A0  6F5B               	movwf	(main@Prealert+1)& (0+255),b
  1740  0004A2  0E00               	movlw	0
  1741  0004A4  6F5A               	movwf	main@Prealert& (0+255),b
  1742                           
  1743                           ;main.c: 246: }
  1744  0004A6  D214               	goto	l5352
  1745  0004A8                     l5126:
  1746                           
  1747                           ; BSR set to: 0
  1748                           ;main.c: 247: else {;main.c: 248: Prealert++;
  1749  0004A8  0101               	movlb	1	; () banked
  1750  0004AA  4B5A               	infsnz	main@Prealert& (0+255),f,b
  1751  0004AC  2B5B               	incf	(main@Prealert+1)& (0+255),f,b
  1752                           
  1753                           ; BSR set to: 1
  1754                           ;main.c: 249: if (Prealert>PrealertLimit){
  1755  0004AE  515A               	movf	main@Prealert& (0+255),w,b
  1756  0004B0  5D50               	subwf	main@PrealertLimit& (0+255),w,b
  1757  0004B2  515B               	movf	(main@Prealert+1)& (0+255),w,b
  1758  0004B4  5951               	subwfb	(main@PrealertLimit+1)& (0+255),w,b
  1759  0004B6  A0D8               	btfss	status,0,c
  1760  0004B8  D7F0               	goto	u5400
  1761  0004BA  D20A               	goto	l5352
  1762  0004BC                     l5134:
  1763                           
  1764                           ; BSR set to: 1
  1765                           ;main.c: 257: disableModeSwitch();
  1766  0004BC  EC6B  F00F         	call	_disableModeSwitch	;wreg free
  1767                           
  1768                           ;main.c: 258: Display_number(state);
  1769  0004C0  C161  F137         	movff	main@state,Display_number@number
  1770  0004C4  0101               	movlb	1	; () banked
  1771  0004C6  6B38               	clrf	(Display_number@number+1)& (0+255),b
  1772  0004C8  ECDE  F005         	call	_Display_number	;wreg free
  1773                           
  1774                           ;main.c: 259: if (flexor_active == 0 && extensor_active == 0){
  1775  0004CC  0101               	movlb	1	; () banked
  1776  0004CE  515F               	movf	main@flexor_active& (0+255),w,b
  1777  0004D0  A4D8               	btfss	status,2,c
  1778  0004D2  D013               	goto	l5148
  1779                           
  1780                           ; BSR set to: 1
  1781  0004D4  515E               	movf	main@extensor_active& (0+255),w,b
  1782  0004D6  A4D8               	btfss	status,2,c
  1783  0004D8  D010               	goto	l5148
  1784                           
  1785                           ; BSR set to: 1
  1786                           ;main.c: 260: if(conditionRelax(state) == 1) state = 2;
  1787  0004DA  C161  F132         	movff	main@state,conditionRelax@closingState
  1788  0004DE  6B33               	clrf	(conditionRelax@closingState+1)& (0+255),b
  1789  0004E0  ECA4  F00A         	call	_conditionRelax	;wreg free
  1790  0004E4  06E8               	decf	wreg,f,c
  1791  0004E6  A4D8               	btfss	status,2,c
  1792  0004E8  D003               	goto	l5146
  1793                           
  1794                           ; BSR set to: 1
  1795  0004EA  0E02               	movlw	2
  1796  0004EC  6F61               	movwf	main@state& (0+255),b
  1797  0004EE  D038               	goto	l5154
  1798  0004F0                     l5146:
  1799                           
  1800                           ; BSR set to: 1
  1801                           ;main.c: 261: else speed = 0;
  1802  0004F0  0E00               	movlw	0
  1803  0004F2  6F53               	movwf	(main@speed+1)& (0+255),b
  1804  0004F4  0E00               	movlw	0
  1805  0004F6  6F52               	movwf	main@speed& (0+255),b
  1806  0004F8  D033               	goto	l5154
  1807  0004FA                     l5148:
  1808                           
  1809                           ; BSR set to: 1
  1810                           ;main.c: 263: else{;main.c: 264: speedFlex = velMapping(flexor_average,thF_l);
  1811  0004FA  C098  F13C         	movff	_flexor_average,velMapping@value
  1812  0004FE  C099  F13D         	movff	_flexor_average+1,velMapping@value+1
  1813  000502  C0E2  F13E         	movff	_thF_l,velMapping@threshold
  1814  000506  C0E3  F13F         	movff	_thF_l+1,velMapping@threshold+1
  1815  00050A  EC95  F009         	call	_velMapping	;wreg free
  1816  00050E  C13C  F158         	movff	?_velMapping,main@speedFlex
  1817  000512  C13D  F159         	movff	?_velMapping+1,main@speedFlex+1
  1818                           
  1819                           ;main.c: 265: speedExt = velMapping(extensor_average,thE_l);
  1820  000516  C096  F13C         	movff	_extensor_average,velMapping@value
  1821  00051A  C097  F13D         	movff	_extensor_average+1,velMapping@value+1
  1822  00051E  C0E6  F13E         	movff	_thE_l,velMapping@threshold
  1823  000522  C0E7  F13F         	movff	_thE_l+1,velMapping@threshold+1
  1824  000526  EC95  F009         	call	_velMapping	;wreg free
  1825  00052A  C13C  F156         	movff	?_velMapping,main@speedExt
  1826  00052E  C13D  F157         	movff	?_velMapping+1,main@speedExt+1
  1827                           
  1828                           ;main.c: 266: S = signFunc(speedFlex,speedExt);
  1829  000532  C158  F132         	movff	main@speedFlex,signFunc@F
  1830  000536  C159  F133         	movff	main@speedFlex+1,signFunc@F+1
  1831  00053A  C156  F134         	movff	main@speedExt,signFunc@E
  1832  00053E  C157  F135         	movff	main@speedExt+1,signFunc@E+1
  1833  000542  EC08  F00F         	call	_signFunc	;wreg free
  1834  000546  6F5C               	movwf	main@S& (0+255),b
  1835                           
  1836                           ; BSR set to: 1
  1837                           ;main.c: 267: if(S==1) speed = speedFlex;
  1838  000548  055C               	decf	main@S& (0+255),w,b
  1839  00054A  A4D8               	btfss	status,2,c
  1840  00054C  D005               	goto	l515
  1841                           
  1842                           ; BSR set to: 1
  1843  00054E  C158  F152         	movff	main@speedFlex,main@speed
  1844  000552  C159  F153         	movff	main@speedFlex+1,main@speed+1
  1845  000556  D004               	goto	l5154
  1846  000558                     l515:
  1847                           
  1848                           ; BSR set to: 1
  1849                           ;main.c: 268: else speed = speedExt;
  1850  000558  C156  F152         	movff	main@speedExt,main@speed
  1851  00055C  C157  F153         	movff	main@speedExt+1,main@speed+1
  1852  000560                     l5154:
  1853                           
  1854                           ; BSR set to: 1
  1855                           ;main.c: 269: };main.c: 270: GraspControl(state, S, speed);
  1856  000560  C15C  F13F         	movff	main@S,GraspControl@S
  1857  000564  C152  F140         	movff	main@speed,GraspControl@speed
  1858  000568  C153  F141         	movff	main@speed+1,GraspControl@speed+1
  1859  00056C  5161               	movf	main@state& (0+255),w,b
  1860  00056E  EC70  F004         	call	_GraspControl
  1861                           
  1862                           ;main.c: 271: break;
  1863  000572  D1AE               	goto	l5352
  1864  000574                     l517:
  1865                           
  1866                           ; BSR set to: 1
  1867                           ;main.c: 273: INTCONbits.INT0IE = 1;
  1868  000574  88F2               	bsf	242,4,c	;volatile
  1869                           
  1870                           ; BSR set to: 1
  1871                           ;main.c: 274: Display_number(state);
  1872  000576  C161  F137         	movff	main@state,Display_number@number
  1873  00057A  6B38               	clrf	(Display_number@number+1)& (0+255),b
  1874  00057C  ECDE  F005         	call	_Display_number	;wreg free
  1875                           
  1876                           ;main.c: 275: if (flexor_active == 1 && extensor_active == 1){
  1877  000580  0101               	movlb	1	; () banked
  1878  000582  055F               	decf	main@flexor_active& (0+255),w,b
  1879  000584  A4D8               	btfss	status,2,c
  1880  000586  D007               	goto	l5164
  1881                           
  1882                           ; BSR set to: 1
  1883  000588  055E               	decf	main@extensor_active& (0+255),w,b
  1884  00058A  A4D8               	btfss	status,2,c
  1885  00058C  D004               	goto	l5164
  1886                           
  1887                           ; BSR set to: 1
  1888                           ;main.c: 276: state = 0;
  1889  00058E  0E00               	movlw	0
  1890  000590                     L19:
  1891  000590  6F61               	movwf	main@state& (0+255),b
  1892                           
  1893                           ;main.c: 277: SCFLAG=1;
  1894  000592  0E01               	movlw	1
  1895  000594  D6F3               	goto	L3
  1896  000596                     l5164:
  1897                           
  1898                           ; BSR set to: 1
  1899  000596  055F               	decf	main@flexor_active& (0+255),w,b
  1900  000598  A4D8               	btfss	status,2,c
  1901  00059A  D781               	goto	L5
  1902                           
  1903                           ; BSR set to: 1
  1904                           ;main.c: 279: if (extensor_average < thE_l){
  1905  00059C  0100               	movlb	0	; () banked
  1906  00059E  51E6               	movf	_thE_l& (0+255),w,b
  1907  0005A0  5D96               	subwf	_extensor_average& (0+255),w,b
  1908  0005A2  51E7               	movf	(_thE_l+1)& (0+255),w,b
  1909  0005A4  5997               	subwfb	(_extensor_average+1)& (0+255),w,b
  1910  0005A6  B0D8               	btfsc	status,0,c
  1911  0005A8  D002               	goto	l5170
  1912  0005AA                     u5490:
  1913                           
  1914                           ;main.c: 280: state = 5;
  1915  0005AA  0E05               	movlw	5
  1916  0005AC  D6F4               	goto	L20
  1917  0005AE                     l5170:
  1918                           
  1919                           ; BSR set to: 0
  1920                           ;main.c: 283: else {;main.c: 284: Prealert++;
  1921  0005AE  0101               	movlb	1	; () banked
  1922  0005B0  4B5A               	infsnz	main@Prealert& (0+255),f,b
  1923  0005B2  2B5B               	incf	(main@Prealert+1)& (0+255),f,b
  1924                           
  1925                           ; BSR set to: 1
  1926                           ;main.c: 285: if (Prealert>PrealertLimit) {
  1927  0005B4  515A               	movf	main@Prealert& (0+255),w,b
  1928  0005B6  5D50               	subwf	main@PrealertLimit& (0+255),w,b
  1929  0005B8  515B               	movf	(main@Prealert+1)& (0+255),w,b
  1930  0005BA  5951               	subwfb	(main@PrealertLimit+1)& (0+255),w,b
  1931  0005BC  A0D8               	btfss	status,0,c
  1932  0005BE  D7F5               	goto	u5490
  1933  0005C0  D187               	goto	l5352
  1934  0005C2                     l5178:
  1935                           
  1936                           ; BSR set to: 1
  1937                           ;main.c: 293: disableModeSwitch();
  1938  0005C2  EC6B  F00F         	call	_disableModeSwitch	;wreg free
  1939                           
  1940                           ;main.c: 294: Display_number(state);
  1941  0005C6  C161  F137         	movff	main@state,Display_number@number
  1942  0005CA  0101               	movlb	1	; () banked
  1943  0005CC  6B38               	clrf	(Display_number@number+1)& (0+255),b
  1944  0005CE  ECDE  F005         	call	_Display_number	;wreg free
  1945                           
  1946                           ;main.c: 295: if (flexor_active == 0 && extensor_active == 0){
  1947  0005D2  0101               	movlb	1	; () banked
  1948  0005D4  515F               	movf	main@flexor_active& (0+255),w,b
  1949  0005D6  A4D8               	btfss	status,2,c
  1950  0005D8  D013               	goto	l5192
  1951                           
  1952                           ; BSR set to: 1
  1953  0005DA  515E               	movf	main@extensor_active& (0+255),w,b
  1954  0005DC  A4D8               	btfss	status,2,c
  1955  0005DE  D010               	goto	l5192
  1956                           
  1957                           ; BSR set to: 1
  1958                           ;main.c: 296: if(conditionRelax(state) == 1) state = 4;
  1959  0005E0  C161  F132         	movff	main@state,conditionRelax@closingState
  1960  0005E4  6B33               	clrf	(conditionRelax@closingState+1)& (0+255),b
  1961  0005E6  ECA4  F00A         	call	_conditionRelax	;wreg free
  1962  0005EA  06E8               	decf	wreg,f,c
  1963  0005EC  A4D8               	btfss	status,2,c
  1964  0005EE  D003               	goto	l5190
  1965                           
  1966                           ; BSR set to: 1
  1967  0005F0  0E04               	movlw	4
  1968  0005F2  6F61               	movwf	main@state& (0+255),b
  1969  0005F4  D038               	goto	l5198
  1970  0005F6                     l5190:
  1971                           
  1972                           ; BSR set to: 1
  1973                           ;main.c: 297: else speed = 0;
  1974  0005F6  0E00               	movlw	0
  1975  0005F8  6F53               	movwf	(main@speed+1)& (0+255),b
  1976  0005FA  0E00               	movlw	0
  1977  0005FC  6F52               	movwf	main@speed& (0+255),b
  1978  0005FE  D033               	goto	l5198
  1979  000600                     l5192:
  1980                           
  1981                           ; BSR set to: 1
  1982                           ;main.c: 299: else{;main.c: 300: speedFlex = velMapping(flexor_average,thF_l);
  1983  000600  C098  F13C         	movff	_flexor_average,velMapping@value
  1984  000604  C099  F13D         	movff	_flexor_average+1,velMapping@value+1
  1985  000608  C0E2  F13E         	movff	_thF_l,velMapping@threshold
  1986  00060C  C0E3  F13F         	movff	_thF_l+1,velMapping@threshold+1
  1987  000610  EC95  F009         	call	_velMapping	;wreg free
  1988  000614  C13C  F158         	movff	?_velMapping,main@speedFlex
  1989  000618  C13D  F159         	movff	?_velMapping+1,main@speedFlex+1
  1990                           
  1991                           ;main.c: 301: speedExt = velMapping(extensor_average,thE_l);
  1992  00061C  C096  F13C         	movff	_extensor_average,velMapping@value
  1993  000620  C097  F13D         	movff	_extensor_average+1,velMapping@value+1
  1994  000624  C0E6  F13E         	movff	_thE_l,velMapping@threshold
  1995  000628  C0E7  F13F         	movff	_thE_l+1,velMapping@threshold+1
  1996  00062C  EC95  F009         	call	_velMapping	;wreg free
  1997  000630  C13C  F156         	movff	?_velMapping,main@speedExt
  1998  000634  C13D  F157         	movff	?_velMapping+1,main@speedExt+1
  1999                           
  2000                           ;main.c: 302: S = signFunc(speedFlex,speedExt);
  2001  000638  C158  F132         	movff	main@speedFlex,signFunc@F
  2002  00063C  C159  F133         	movff	main@speedFlex+1,signFunc@F+1
  2003  000640  C156  F134         	movff	main@speedExt,signFunc@E
  2004  000644  C157  F135         	movff	main@speedExt+1,signFunc@E+1
  2005  000648  EC08  F00F         	call	_signFunc	;wreg free
  2006  00064C  6F5C               	movwf	main@S& (0+255),b
  2007                           
  2008                           ; BSR set to: 1
  2009                           ;main.c: 303: if (S==1) speed = speedFlex;
  2010  00064E  055C               	decf	main@S& (0+255),w,b
  2011  000650  A4D8               	btfss	status,2,c
  2012  000652  D005               	goto	l530
  2013                           
  2014                           ; BSR set to: 1
  2015  000654  C158  F152         	movff	main@speedFlex,main@speed
  2016  000658  C159  F153         	movff	main@speedFlex+1,main@speed+1
  2017  00065C  D004               	goto	l5198
  2018  00065E                     l530:
  2019                           
  2020                           ; BSR set to: 1
  2021                           ;main.c: 304: else speed = speedExt;
  2022  00065E  C156  F152         	movff	main@speedExt,main@speed
  2023  000662  C157  F153         	movff	main@speedExt+1,main@speed+1
  2024  000666                     l5198:
  2025                           
  2026                           ; BSR set to: 1
  2027                           ;main.c: 305: };main.c: 306: GraspControl(state, S, speed);
  2028  000666  C15C  F13F         	movff	main@S,GraspControl@S
  2029  00066A  C152  F140         	movff	main@speed,GraspControl@speed
  2030  00066E  C153  F141         	movff	main@speed+1,GraspControl@speed+1
  2031  000672  5161               	movf	main@state& (0+255),w,b
  2032  000674  EC70  F004         	call	_GraspControl
  2033                           
  2034                           ;main.c: 307: break;
  2035  000678  D12B               	goto	l5352
  2036  00067A                     l5202:
  2037                           
  2038                           ; BSR set to: 1
  2039  00067A  5161               	movf	main@state& (0+255),w,b
  2040                           
  2041                           ; Switch size 1, requested type "simple"
  2042                           ; Number of cases is 6, Range of values is 0 to 5
  2043                           ; switch strategies available:
  2044                           ; Name         Instructions Cycles
  2045                           ; simple_byte           19    10 (average)
  2046                           ;	Chosen strategy is simple_byte
  2047  00067C  0A00               	xorlw	0	; case 0
  2048  00067E  B4D8               	btfsc	status,2,c
  2049  000680  D66E               	goto	l486
  2050  000682  0A01               	xorlw	1	; case 1
  2051  000684  B4D8               	btfsc	status,2,c
  2052  000686  D694               	goto	l5090
  2053  000688  0A03               	xorlw	3	; case 2
  2054  00068A  B4D8               	btfsc	status,2,c
  2055  00068C  D6ED               	goto	l502
  2056  00068E  0A01               	xorlw	1	; case 3
  2057  000690  B4D8               	btfsc	status,2,c
  2058  000692  D714               	goto	l5134
  2059  000694  0A07               	xorlw	7	; case 4
  2060  000696  B4D8               	btfsc	status,2,c
  2061  000698  D76D               	goto	l517
  2062  00069A  0A01               	xorlw	1	; case 5
  2063  00069C  B4D8               	btfsc	status,2,c
  2064  00069E  D791               	goto	l5178
  2065  0006A0  D117               	goto	l5352
  2066  0006A2                     l5204:
  2067                           
  2068                           ; BSR set to: 1
  2069                           ;main.c: 315: firstByte = readUSART_withTIMEOUT();
  2070  0006A2  EC8E  F00B         	call	_readUSART_withTIMEOUT	;wreg free
  2071  0006A6  6F54               	movwf	main@firstByte& (0+255),b
  2072                           
  2073                           ; BSR set to: 1
  2074                           ;main.c: 316: if(firstByte == thEbyte) comState = 1;
  2075  0006A8  0EAA               	movlw	170
  2076  0006AA  1954               	xorwf	main@firstByte& (0+255),w,b
  2077  0006AC  A4D8               	btfss	status,2,c
  2078  0006AE  D002               	goto	l5210
  2079                           
  2080                           ; BSR set to: 1
  2081  0006B0  0E01               	movlw	1
  2082  0006B2  D0D4               	goto	L18
  2083  0006B4                     l5210:
  2084                           
  2085                           ; BSR set to: 1
  2086                           ;main.c: 317: else if(firstByte == thFbyte) comState = 3;
  2087  0006B4  0EBB               	movlw	187
  2088  0006B6  1954               	xorwf	main@firstByte& (0+255),w,b
  2089  0006B8  A4D8               	btfss	status,2,c
  2090  0006BA  D002               	goto	l5214
  2091                           
  2092                           ; BSR set to: 1
  2093  0006BC  0E03               	movlw	3
  2094  0006BE  D0CE               	goto	L18
  2095  0006C0                     l5214:
  2096                           
  2097                           ; BSR set to: 1
  2098                           ;main.c: 318: else if(firstByte == Dbyte) comState = 5;
  2099  0006C0  2954               	incf	main@firstByte& (0+255),w,b
  2100  0006C2  A4D8               	btfss	status,2,c
  2101  0006C4  D002               	goto	l5218
  2102                           
  2103                           ; BSR set to: 1
  2104  0006C6  0E05               	movlw	5
  2105  0006C8  D0C9               	goto	L18
  2106  0006CA                     l5218:
  2107                           
  2108                           ; BSR set to: 1
  2109                           ;main.c: 319: else if(firstByte == Sbyte) comState = 7;
  2110  0006CA  0EEE               	movlw	238
  2111  0006CC  1954               	xorwf	main@firstByte& (0+255),w,b
  2112  0006CE  A4D8               	btfss	status,2,c
  2113  0006D0  D002               	goto	l5222
  2114                           
  2115                           ; BSR set to: 1
  2116  0006D2  0E07               	movlw	7
  2117  0006D4  D0C3               	goto	L18
  2118  0006D6                     l5222:
  2119                           
  2120                           ; BSR set to: 1
  2121                           ;main.c: 320: else if(firstByte == mvEbyte) comState = 9;
  2122  0006D6  0ECC               	movlw	204
  2123  0006D8  1954               	xorwf	main@firstByte& (0+255),w,b
  2124  0006DA  A4D8               	btfss	status,2,c
  2125  0006DC  D002               	goto	l5226
  2126                           
  2127                           ; BSR set to: 1
  2128  0006DE  0E09               	movlw	9
  2129  0006E0  D0BD               	goto	L18
  2130  0006E2                     l5226:
  2131                           
  2132                           ; BSR set to: 1
  2133                           ;main.c: 321: else if(firstByte == mvFbyte) comState = 11;
  2134  0006E2  0EDD               	movlw	221
  2135  0006E4  1954               	xorwf	main@firstByte& (0+255),w,b
  2136  0006E6  A4D8               	btfss	status,2,c
  2137  0006E8  D0F3               	goto	l5352
  2138                           
  2139                           ; BSR set to: 1
  2140  0006EA  0E0B               	movlw	11
  2141  0006EC  D0B7               	goto	L18
  2142  0006EE                     l5230:
  2143                           
  2144                           ; BSR set to: 1
  2145                           ;main.c: 324: secondByte = readUSART_withTIMEOUT();
  2146  0006EE  EC8E  F00B         	call	_readUSART_withTIMEOUT	;wreg free
  2147  0006F2  6F60               	movwf	main@secondByte& (0+255),b
  2148                           
  2149                           ; BSR set to: 1
  2150                           ;main.c: 325: comState = 2;
  2151  0006F4  0E02               	movlw	2
  2152  0006F6  D0B2               	goto	L18
  2153  0006F8                     l5234:
  2154                           
  2155                           ; BSR set to: 1
  2156                           ;main.c: 328: thirdByte = readUSART_withTIMEOUT();
  2157  0006F8  EC8E  F00B         	call	_readUSART_withTIMEOUT	;wreg free
  2158  0006FC  6F5D               	movwf	main@thirdByte& (0+255),b
  2159                           
  2160                           ; BSR set to: 1
  2161                           ;main.c: 329: if(thirdByte == thEbyte){
  2162  0006FE  0EAA               	movlw	170
  2163  000700  195D               	xorwf	main@thirdByte& (0+255),w,b
  2164  000702  A4D8               	btfss	status,2,c
  2165  000704  D009               	goto	l5244
  2166                           
  2167                           ; BSR set to: 1
  2168                           ;main.c: 330: THE_DATA = secondByte;
  2169  000706  C160  F03B         	movff	main@secondByte,_THE_DATA
  2170                           
  2171                           ; BSR set to: 1
  2172                           ;main.c: 331: write_EEprom(THE_ADR, THE_DATA);
  2173  00070A  C03B  F132         	movff	_THE_DATA,write_EEprom@data
  2174  00070E  5033               	movf	_THE_ADR^0,w,c
  2175  000710  EC58  F00E         	call	_write_EEprom
  2176                           
  2177                           ;main.c: 332: TCF_E = 1;
  2178  000714  0E01               	movlw	1
  2179  000716  6E32               	movwf	_TCF_E^0,c
  2180  000718                     l5244:
  2181                           
  2182                           ;main.c: 333: };main.c: 334: comState = 0;
  2183  000718  0E00               	movlw	0
  2184  00071A  0101               	movlb	1	; () banked
  2185  00071C  D09F               	goto	L18
  2186  00071E                     l5246:
  2187                           
  2188                           ; BSR set to: 1
  2189                           ;main.c: 337: secondByte = readUSART_withTIMEOUT();
  2190  00071E  EC8E  F00B         	call	_readUSART_withTIMEOUT	;wreg free
  2191  000722  6F60               	movwf	main@secondByte& (0+255),b
  2192                           
  2193                           ; BSR set to: 1
  2194                           ;main.c: 338: comState = 4;
  2195  000724  0E04               	movlw	4
  2196  000726  D09A               	goto	L18
  2197  000728                     l5250:
  2198                           
  2199                           ; BSR set to: 1
  2200                           ;main.c: 341: thirdByte = readUSART_withTIMEOUT();
  2201  000728  EC8E  F00B         	call	_readUSART_withTIMEOUT	;wreg free
  2202  00072C  6F5D               	movwf	main@thirdByte& (0+255),b
  2203                           
  2204                           ; BSR set to: 1
  2205                           ;main.c: 342: if(thirdByte == thFbyte){
  2206  00072E  0EBB               	movlw	187
  2207  000730  195D               	xorwf	main@thirdByte& (0+255),w,b
  2208  000732  A4D8               	btfss	status,2,c
  2209  000734  D7F1               	goto	l5244
  2210                           
  2211                           ; BSR set to: 1
  2212                           ;main.c: 343: THF_DATA = secondByte;
  2213  000736  C160  F03A         	movff	main@secondByte,_THF_DATA
  2214                           
  2215                           ; BSR set to: 1
  2216                           ;main.c: 344: write_EEprom(THF_ADR, THF_DATA);
  2217  00073A  C03A  F132         	movff	_THF_DATA,write_EEprom@data
  2218  00073E  5040               	movf	_THF_ADR^0,w,c
  2219  000740  EC58  F00E         	call	_write_EEprom
  2220                           
  2221                           ;main.c: 345: TCF_F = 1;
  2222  000744  0E01               	movlw	1
  2223  000746  6E31               	movwf	_TCF_F^0,c
  2224  000748  D7E7               	goto	l5244
  2225  00074A                     l5262:
  2226                           
  2227                           ; BSR set to: 1
  2228                           ;main.c: 350: secondByte = readUSART_withTIMEOUT();
  2229  00074A  EC8E  F00B         	call	_readUSART_withTIMEOUT	;wreg free
  2230  00074E  6F60               	movwf	main@secondByte& (0+255),b
  2231                           
  2232                           ; BSR set to: 1
  2233                           ;main.c: 351: comState = 6;
  2234  000750  0E06               	movlw	6
  2235  000752  D084               	goto	L18
  2236  000754                     l5266:
  2237                           
  2238                           ; BSR set to: 1
  2239                           ;main.c: 354: thirdByte = readUSART_withTIMEOUT();
  2240  000754  EC8E  F00B         	call	_readUSART_withTIMEOUT	;wreg free
  2241  000758  6F5D               	movwf	main@thirdByte& (0+255),b
  2242                           
  2243                           ; BSR set to: 1
  2244                           ;main.c: 355: if(thirdByte == Dbyte){
  2245  00075A  295D               	incf	main@thirdByte& (0+255),w,b
  2246  00075C  A4D8               	btfss	status,2,c
  2247  00075E  D7DC               	goto	l5244
  2248                           
  2249                           ; BSR set to: 1
  2250                           ;main.c: 356: if(secondByte == thEbyte) sendUSART(THE_DATA);
  2251  000760  0EAA               	movlw	170
  2252  000762  1960               	xorwf	main@secondByte& (0+255),w,b
  2253  000764  A4D8               	btfss	status,2,c
  2254  000766  D004               	goto	l5274
  2255                           
  2256                           ; BSR set to: 1
  2257  000768  503B               	movf	_THE_DATA^0,w,c
  2258  00076A  EC5B  F00F         	call	_sendUSART
  2259  00076E  D7D4               	goto	l5244
  2260  000770                     l5274:
  2261                           
  2262                           ; BSR set to: 1
  2263                           ;main.c: 357: else if(secondByte == thFbyte) sendUSART(THF_DATA);
  2264  000770  0EBB               	movlw	187
  2265  000772  1960               	xorwf	main@secondByte& (0+255),w,b
  2266  000774  A4D8               	btfss	status,2,c
  2267  000776  D004               	goto	l5278
  2268                           
  2269                           ; BSR set to: 1
  2270  000778  503A               	movf	_THF_DATA^0,w,c
  2271  00077A  EC5B  F00F         	call	_sendUSART
  2272  00077E  D7CC               	goto	l5244
  2273  000780                     l5278:
  2274                           
  2275                           ; BSR set to: 1
  2276                           ;main.c: 358: else if(secondByte == mvEbyte) sendUSART(MVE_DATA);
  2277  000780  0ECC               	movlw	204
  2278  000782  1960               	xorwf	main@secondByte& (0+255),w,b
  2279  000784  A4D8               	btfss	status,2,c
  2280  000786  D004               	goto	l5282
  2281                           
  2282                           ; BSR set to: 1
  2283  000788  503F               	movf	_MVE_DATA^0,w,c
  2284  00078A  EC5B  F00F         	call	_sendUSART
  2285  00078E  D7C4               	goto	l5244
  2286  000790                     l5282:
  2287                           
  2288                           ; BSR set to: 1
  2289                           ;main.c: 359: else if(secondByte == mvFbyte) sendUSART(MVF_DATA);
  2290  000790  0EDD               	movlw	221
  2291  000792  1960               	xorwf	main@secondByte& (0+255),w,b
  2292  000794  A4D8               	btfss	status,2,c
  2293  000796  D7C0               	goto	l5244
  2294                           
  2295                           ; BSR set to: 1
  2296  000798  503E               	movf	_MVF_DATA^0,w,c
  2297  00079A  EC5B  F00F         	call	_sendUSART
  2298                           
  2299                           ; BSR set to: 1
  2300  00079E  D7BC               	goto	l5244
  2301  0007A0                     l5288:
  2302                           
  2303                           ; BSR set to: 1
  2304                           ;main.c: 364: secondByte = readUSART_withTIMEOUT();
  2305  0007A0  EC8E  F00B         	call	_readUSART_withTIMEOUT	;wreg free
  2306  0007A4  6F60               	movwf	main@secondByte& (0+255),b
  2307                           
  2308                           ; BSR set to: 1
  2309                           ;main.c: 365: comState = 8;
  2310  0007A6  0E08               	movlw	8
  2311  0007A8  D059               	goto	L18
  2312  0007AA                     l5292:
  2313                           
  2314                           ; BSR set to: 1
  2315                           ;main.c: 368: thirdByte = readUSART_withTIMEOUT();
  2316  0007AA  EC8E  F00B         	call	_readUSART_withTIMEOUT	;wreg free
  2317  0007AE  6F5D               	movwf	main@thirdByte& (0+255),b
  2318                           
  2319                           ; BSR set to: 1
  2320                           ;main.c: 369: if(thirdByte == Sbyte){
  2321  0007B0  0EEE               	movlw	238
  2322  0007B2  195D               	xorwf	main@thirdByte& (0+255),w,b
  2323  0007B4  A4D8               	btfss	status,2,c
  2324  0007B6  D036               	goto	l5314
  2325                           
  2326                           ; BSR set to: 1
  2327                           ;main.c: 370: disableModeSwitch();
  2328  0007B8  EC6B  F00F         	call	_disableModeSwitch	;wreg free
  2329  0007BC                     l5298:
  2330                           
  2331                           ;main.c: 372: blinkDisplayLetterC();
  2332  0007BC  ECE8  F00C         	call	_blinkDisplayLetterC	;wreg free
  2333                           
  2334                           ;main.c: 373: if(secondByte == thEbyte) sendUSART_int(extensor_average);
  2335  0007C0  0EAA               	movlw	170
  2336  0007C2  1960               	xorwf	main@secondByte& (0+255),w,b
  2337  0007C4  A4D8               	btfss	status,2,c
  2338  0007C6  D007               	goto	l5302
  2339                           
  2340                           ; BSR set to: 1
  2341  0007C8  C096  F138         	movff	_extensor_average,sendUSART_int@A
  2342  0007CC  C097  F139         	movff	_extensor_average+1,sendUSART_int@A+1
  2343  0007D0  EC14  F00F         	call	_sendUSART_int	;wreg free
  2344  0007D4  D01F               	goto	l5310
  2345  0007D6                     l5302:
  2346                           
  2347                           ; BSR set to: 1
  2348                           ;main.c: 374: else if(secondByte == thFbyte) sendUSART_int(flexor_average);
  2349  0007D6  0EBB               	movlw	187
  2350  0007D8  1960               	xorwf	main@secondByte& (0+255),w,b
  2351  0007DA  A4D8               	btfss	status,2,c
  2352  0007DC  D007               	goto	l5306
  2353                           
  2354                           ; BSR set to: 1
  2355  0007DE  C098  F138         	movff	_flexor_average,sendUSART_int@A
  2356  0007E2  C099  F139         	movff	_flexor_average+1,sendUSART_int@A+1
  2357  0007E6  EC14  F00F         	call	_sendUSART_int	;wreg free
  2358  0007EA  D014               	goto	l5310
  2359  0007EC                     l5306:
  2360                           
  2361                           ; BSR set to: 1
  2362                           ;main.c: 375: else if(secondByte == Sbyte) sendUSART_int(absFunc(flexor_average,extensor
      +                          _average));
  2363  0007EC  0EEE               	movlw	238
  2364  0007EE  1960               	xorwf	main@secondByte& (0+255),w,b
  2365  0007F0  A4D8               	btfss	status,2,c
  2366  0007F2  D010               	goto	l5310
  2367                           
  2368                           ; BSR set to: 1
  2369  0007F4  C098  F132         	movff	_flexor_average,absFunc@A
  2370  0007F8  C099  F133         	movff	_flexor_average+1,absFunc@A+1
  2371  0007FC  C096  F134         	movff	_extensor_average,absFunc@B
  2372  000800  C097  F135         	movff	_extensor_average+1,absFunc@B+1
  2373  000804  EC2F  F00D         	call	_absFunc	;wreg free
  2374  000808  C132  F138         	movff	?_absFunc,sendUSART_int@A
  2375  00080C  C133  F139         	movff	?_absFunc+1,sendUSART_int@A+1
  2376  000810  EC14  F00F         	call	_sendUSART_int	;wreg free
  2377  000814                     l5310:
  2378                           
  2379                           ;main.c: 377: forthbyte = readUSART_withTIMEOUT();
  2380  000814  EC8E  F00B         	call	_readUSART_withTIMEOUT	;wreg free
  2381  000818  6F4E               	movwf	main@forthbyte& (0+255),b
  2382                           
  2383                           ; BSR set to: 1
  2384                           ;main.c: 378: }while(forthbyte != STPbyte);
  2385  00081A  0EEF               	movlw	239
  2386  00081C  194E               	xorwf	main@forthbyte& (0+255),w,b
  2387  00081E  A4D8               	btfss	status,2,c
  2388  000820  D7CD               	goto	l5298
  2389                           
  2390                           ; BSR set to: 1
  2391                           ;main.c: 379: INTCONbits.INT0IE = 1;
  2392  000822  88F2               	bsf	242,4,c	;volatile
  2393  000824                     l5314:
  2394                           
  2395                           ; BSR set to: 1
  2396                           ;main.c: 380: };main.c: 381: Display_letter('C');
  2397  000824  0E43               	movlw	67
  2398  000826  EC30  F007         	call	_Display_letter
  2399  00082A  D776               	goto	l5244
  2400  00082C                     l5318:
  2401                           
  2402                           ; BSR set to: 1
  2403                           ;main.c: 385: secondByte = readUSART_withTIMEOUT();
  2404  00082C  EC8E  F00B         	call	_readUSART_withTIMEOUT	;wreg free
  2405  000830  6F60               	movwf	main@secondByte& (0+255),b
  2406                           
  2407                           ; BSR set to: 1
  2408                           ;main.c: 386: comState = 10;
  2409  000832  0E0A               	movlw	10
  2410  000834  D013               	goto	L18
  2411  000836                     l5322:
  2412                           
  2413                           ; BSR set to: 1
  2414                           ;main.c: 389: thirdByte = readUSART_withTIMEOUT();
  2415  000836  EC8E  F00B         	call	_readUSART_withTIMEOUT	;wreg free
  2416  00083A  6F5D               	movwf	main@thirdByte& (0+255),b
  2417                           
  2418                           ; BSR set to: 1
  2419                           ;main.c: 390: if(thirdByte == mvEbyte){
  2420  00083C  0ECC               	movlw	204
  2421  00083E  195D               	xorwf	main@thirdByte& (0+255),w,b
  2422  000840  A4D8               	btfss	status,2,c
  2423  000842  D76A               	goto	l5244
  2424                           
  2425                           ; BSR set to: 1
  2426                           ;main.c: 391: MVE_DATA = secondByte;
  2427  000844  C160  F03F         	movff	main@secondByte,_MVE_DATA
  2428                           
  2429                           ; BSR set to: 1
  2430                           ;main.c: 392: write_EEprom(MVE_ADR, MVE_DATA);
  2431  000848  C03F  F132         	movff	_MVE_DATA,write_EEprom@data
  2432  00084C  0E02               	movlw	2
  2433  00084E  EC58  F00E         	call	_write_EEprom
  2434  000852  D762               	goto	l5244
  2435  000854                     l5332:
  2436                           
  2437                           ; BSR set to: 1
  2438                           ;main.c: 397: secondByte = readUSART_withTIMEOUT();
  2439  000854  EC8E  F00B         	call	_readUSART_withTIMEOUT	;wreg free
  2440  000858  6F60               	movwf	main@secondByte& (0+255),b
  2441                           
  2442                           ; BSR set to: 1
  2443                           ;main.c: 398: comState = 12;
  2444  00085A  0E0C               	movlw	12
  2445  00085C                     L18:
  2446  00085C  6F55               	movwf	main@comState& (0+255),b
  2447                           
  2448                           ;main.c: 399: break;
  2449  00085E  D038               	goto	l5352
  2450  000860                     l5336:
  2451                           
  2452                           ; BSR set to: 1
  2453                           ;main.c: 401: thirdByte = readUSART_withTIMEOUT();
  2454  000860  EC8E  F00B         	call	_readUSART_withTIMEOUT	;wreg free
  2455  000864  6F5D               	movwf	main@thirdByte& (0+255),b
  2456                           
  2457                           ; BSR set to: 1
  2458                           ;main.c: 402: if(thirdByte == mvFbyte){
  2459  000866  0EDD               	movlw	221
  2460  000868  195D               	xorwf	main@thirdByte& (0+255),w,b
  2461  00086A  A4D8               	btfss	status,2,c
  2462  00086C  D755               	goto	l5244
  2463                           
  2464                           ; BSR set to: 1
  2465                           ;main.c: 403: MVF_DATA = secondByte;
  2466  00086E  C160  F03E         	movff	main@secondByte,_MVF_DATA
  2467                           
  2468                           ; BSR set to: 1
  2469                           ;main.c: 404: write_EEprom(MVF_ADR, MVF_DATA);
  2470  000872  C03E  F132         	movff	_MVF_DATA,write_EEprom@data
  2471  000876  0E03               	movlw	3
  2472  000878  EC58  F00E         	call	_write_EEprom
  2473  00087C  D74D               	goto	l5244
  2474  00087E                     l5348:
  2475  00087E  0101               	movlb	1	; () banked
  2476  000880  5155               	movf	main@comState& (0+255),w,b
  2477                           
  2478                           ; Switch size 1, requested type "simple"
  2479                           ; Number of cases is 13, Range of values is 0 to 12
  2480                           ; switch strategies available:
  2481                           ; Name         Instructions Cycles
  2482                           ; simple_byte           40    21 (average)
  2483                           ;	Chosen strategy is simple_byte
  2484  000882  0A00               	xorlw	0	; case 0
  2485  000884  B4D8               	btfsc	status,2,c
  2486  000886  D70D               	goto	l5204
  2487  000888  0A01               	xorlw	1	; case 1
  2488  00088A  B4D8               	btfsc	status,2,c
  2489  00088C  D730               	goto	l5230
  2490  00088E  0A03               	xorlw	3	; case 2
  2491  000890  B4D8               	btfsc	status,2,c
  2492  000892  D732               	goto	l5234
  2493  000894  0A01               	xorlw	1	; case 3
  2494  000896  B4D8               	btfsc	status,2,c
  2495  000898  D742               	goto	l5246
  2496  00089A  0A07               	xorlw	7	; case 4
  2497  00089C  B4D8               	btfsc	status,2,c
  2498  00089E  D744               	goto	l5250
  2499  0008A0  0A01               	xorlw	1	; case 5
  2500  0008A2  B4D8               	btfsc	status,2,c
  2501  0008A4  D752               	goto	l5262
  2502  0008A6  0A03               	xorlw	3	; case 6
  2503  0008A8  B4D8               	btfsc	status,2,c
  2504  0008AA  D754               	goto	l5266
  2505  0008AC  0A01               	xorlw	1	; case 7
  2506  0008AE  B4D8               	btfsc	status,2,c
  2507  0008B0  D777               	goto	l5288
  2508  0008B2  0A0F               	xorlw	15	; case 8
  2509  0008B4  B4D8               	btfsc	status,2,c
  2510  0008B6  D779               	goto	l5292
  2511  0008B8  0A01               	xorlw	1	; case 9
  2512  0008BA  B4D8               	btfsc	status,2,c
  2513  0008BC  D7B7               	goto	l5318
  2514  0008BE  0A03               	xorlw	3	; case 10
  2515  0008C0  B4D8               	btfsc	status,2,c
  2516  0008C2  D7B9               	goto	l5322
  2517  0008C4  0A01               	xorlw	1	; case 11
  2518  0008C6  B4D8               	btfsc	status,2,c
  2519  0008C8  D7C5               	goto	l5332
  2520  0008CA  0A07               	xorlw	7	; case 12
  2521  0008CC  B4D8               	btfsc	status,2,c
  2522  0008CE  D7C8               	goto	l5336
  2523  0008D0                     l5352:
  2524  0008D0  5034               	movf	_deviceMode^0,w,c
  2525                           
  2526                           ; Switch size 1, requested type "simple"
  2527                           ; Number of cases is 2, Range of values is 0 to 1
  2528                           ; switch strategies available:
  2529                           ; Name         Instructions Cycles
  2530                           ; simple_byte            7     4 (average)
  2531                           ;	Chosen strategy is simple_byte
  2532  0008D2  0A00               	xorlw	0	; case 0
  2533  0008D4  B4D8               	btfsc	status,2,c
  2534  0008D6  D4E4               	goto	l5020
  2535  0008D8  0A01               	xorlw	1	; case 1
  2536  0008DA  B4D8               	btfsc	status,2,c
  2537  0008DC  D7D0               	goto	l5348
  2538  0008DE  D7F8               	goto	l5352
  2539  0008E0                     __end_of_main:
  2540                           	opt callstack 0
  2541                           
  2542 ;; *************** function _write_EEprom *****************
  2543 ;; Defined at:
  2544 ;;		line 395 in file "mylib.h"
  2545 ;; Parameters:    Size  Location     Type
  2546 ;;  address         1    wreg     unsigned char 
  2547 ;;  data            1    0[BANK1 ] unsigned char 
  2548 ;; Auto vars:     Size  Location     Type
  2549 ;;  address         1    1[BANK1 ] unsigned char 
  2550 ;; Return value:  Size  Location     Type
  2551 ;;                  1    wreg      void 
  2552 ;; Registers used:
  2553 ;;		wreg, status,2
  2554 ;; Tracked objects:
  2555 ;;		On entry : 3F/1
  2556 ;;		On exit  : 0/0
  2557 ;;		Unchanged: 0/0
  2558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2559 ;;      Params:         0       0       1       0
  2560 ;;      Locals:         0       0       1       0
  2561 ;;      Temps:          0       0       0       0
  2562 ;;      Totals:         0       0       2       0
  2563 ;;Total ram usage:        2 bytes
  2564 ;; Hardware stack levels used:    1
  2565 ;; Hardware stack levels required when called:    6
  2566 ;; This function calls:
  2567 ;;		Nothing
  2568 ;; This function is called by:
  2569 ;;		_main
  2570 ;; This function uses a non-reentrant model
  2571 ;;
  2572                           
  2573                           	psect	text1
  2574  001CB0                     __ptext1:
  2575                           	opt callstack 0
  2576  001CB0                     _write_EEprom:
  2577                           	opt callstack 24
  2578                           
  2579                           ;incstack = 0
  2580                           ;write_EEprom@address stored from wreg
  2581  001CB0  6F33               	movwf	write_EEprom@address& (0+255),b
  2582                           
  2583                           ;mylib.h: 396: EEADR = address;
  2584  001CB2  C133  FFA9         	movff	write_EEprom@address,4009	;volatile
  2585                           
  2586                           ;mylib.h: 397: EEDATA = data;
  2587  001CB6  C132  FFA8         	movff	write_EEprom@data,4008	;volatile
  2588                           
  2589                           ;mylib.h: 399: EECON1bits.EEPGD = 0;
  2590  001CBA  9EA6               	bcf	166,7,c	;volsfr
  2591                           
  2592                           ;mylib.h: 400: EECON1bits.CFGS = 0;
  2593  001CBC  9CA6               	bcf	166,6,c	;volsfr
  2594                           
  2595                           ;mylib.h: 401: EECON1bits.WREN = 1;
  2596  001CBE  84A6               	bsf	166,2,c	;volsfr
  2597                           
  2598                           ;mylib.h: 404: INTCONbits.GIEH = 0;
  2599  001CC0  9EF2               	bcf	242,7,c	;volatile
  2600                           
  2601                           ;mylib.h: 405: INTCONbits.GIEL = 0;
  2602  001CC2  9CF2               	bcf	242,6,c	;volatile
  2603                           
  2604                           ;mylib.h: 407: EECON2 = 0x55;
  2605  001CC4  0E55               	movlw	85
  2606  001CC6  6EA7               	movwf	167,c	;volsfr
  2607                           
  2608                           ;mylib.h: 408: EECON2 = 0xAA;
  2609  001CC8  0EAA               	movlw	170
  2610  001CCA  6EA7               	movwf	167,c	;volsfr
  2611                           
  2612                           ;mylib.h: 409: EECON1bits.WR = 1;
  2613  001CCC  82A6               	bsf	166,1,c	;volsfr
  2614  001CCE                     l225:
  2615  001CCE  B2A6               	btfsc	166,1,c	;volsfr
  2616  001CD0  D7FE               	goto	l225
  2617                           
  2618                           ;mylib.h: 412: INTCONbits.GIEH = 1;
  2619  001CD2  8EF2               	bsf	242,7,c	;volatile
  2620                           
  2621                           ;mylib.h: 413: INTCONbits.GIEL = 1;
  2622  001CD4  8CF2               	bsf	242,6,c	;volatile
  2623                           
  2624                           ;mylib.h: 415: EECON1bits.WREN = 0;
  2625  001CD6  94A6               	bcf	166,2,c	;volsfr
  2626  001CD8  0012               	return		;funcret
  2627  001CDA                     __end_of_write_EEprom:
  2628                           	opt callstack 0
  2629                           
  2630 ;; *************** function _velMapping *****************
  2631 ;; Defined at:
  2632 ;;		line 456 in file "mylib.h"
  2633 ;; Parameters:    Size  Location     Type
  2634 ;;  value           2   10[BANK1 ] unsigned int 
  2635 ;;  threshold       2   12[BANK1 ] unsigned int 
  2636 ;; Auto vars:     Size  Location     Type
  2637 ;;  aux             3   16[BANK1 ] unsigned um
  2638 ;;  resultingVel    2   21[BANK1 ] unsigned int 
  2639 ;;  lowerVelLimi    2    0        unsigned int 
  2640 ;; Return value:  Size  Location     Type
  2641 ;;                  2   10[BANK1 ] unsigned int 
  2642 ;; Registers used:
  2643 ;;		wreg, status,2, status,0, cstack
  2644 ;; Tracked objects:
  2645 ;;		On entry : 3F/1
  2646 ;;		On exit  : 3F/1
  2647 ;;		Unchanged: 0/0
  2648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2649 ;;      Params:         0       0       4       0
  2650 ;;      Locals:         0       0       7       0
  2651 ;;      Temps:          0       0       2       0
  2652 ;;      Totals:         0       0      13       0
  2653 ;;Total ram usage:       13 bytes
  2654 ;; Hardware stack levels used:    1
  2655 ;; Hardware stack levels required when called:    7
  2656 ;; This function calls:
  2657 ;;		___ltdiv
  2658 ;;		___tmul
  2659 ;; This function is called by:
  2660 ;;		_main
  2661 ;; This function uses a non-reentrant model
  2662 ;;
  2663                           
  2664                           	psect	text2
  2665  00132A                     __ptext2:
  2666                           	opt callstack 0
  2667  00132A                     _velMapping:
  2668                           	opt callstack 23
  2669                           
  2670                           ; BSR set to: 1
  2671                           ;mylib.h: 461: if(value > threshold){
  2672                           
  2673                           ; BSR set to: 1
  2674                           
  2675                           ;incstack = 0
  2676  00132A  513C               	movf	velMapping@value& (0+255),w,b
  2677  00132C  5D3E               	subwf	velMapping@threshold& (0+255),w,b
  2678  00132E  513D               	movf	(velMapping@value+1)& (0+255),w,b
  2679  001330  593F               	subwfb	(velMapping@threshold+1)& (0+255),w,b
  2680  001332  B0D8               	btfsc	status,0,c
  2681  001334  D039               	goto	l4716
  2682                           
  2683                           ; BSR set to: 1
  2684                           ;mylib.h: 462: unsigned short long aux =(unsigned short long) (511 - lowerVelLimit) * (u
      +                          nsigned short long) (value - threshold);
  2685  001336  0ED3               	movlw	211
  2686  001338  6F32               	movwf	___tmul@multiplier& (0+255),b
  2687  00133A  0E00               	movlw	0
  2688  00133C  6F33               	movwf	(___tmul@multiplier+1)& (0+255),b
  2689  00133E  0E00               	movlw	0
  2690  001340  6F34               	movwf	(___tmul@multiplier+2)& (0+255),b
  2691  001342  513E               	movf	velMapping@threshold& (0+255),w,b
  2692  001344  5D3C               	subwf	velMapping@value& (0+255),w,b
  2693  001346  6F40               	movwf	??_velMapping& (0+255),b
  2694  001348  513F               	movf	(velMapping@threshold+1)& (0+255),w,b
  2695  00134A  593D               	subwfb	(velMapping@value+1)& (0+255),w,b
  2696  00134C  6F41               	movwf	(??_velMapping+1)& (0+255),b
  2697  00134E  C140  F135         	movff	??_velMapping,___tmul@multiplicand
  2698  001352  C141  F136         	movff	??_velMapping+1,___tmul@multiplicand+1
  2699  001356  6B37               	clrf	(___tmul@multiplicand+2)& (0+255),b
  2700  001358  EC0D  F00D         	call	___tmul	;wreg free
  2701  00135C  C132  F142         	movff	?___tmul,velMapping@aux
  2702  001360  C133  F143         	movff	?___tmul+1,velMapping@aux+1
  2703  001364  C134  F144         	movff	?___tmul+2,velMapping@aux+2
  2704                           
  2705                           ;mylib.h: 463: resultingVel = aux / (unsigned short long) (1023 - threshold);
  2706  001368  C142  F132         	movff	velMapping@aux,___ltdiv@dividend
  2707  00136C  C143  F133         	movff	velMapping@aux+1,___ltdiv@dividend+1
  2708  001370  C144  F134         	movff	velMapping@aux+2,___ltdiv@dividend+2
  2709  001374  0EFF               	movlw	255
  2710  001376  6F40               	movwf	??_velMapping& (0+255),b
  2711  001378  0E03               	movlw	3
  2712  00137A  6F41               	movwf	(??_velMapping+1)& (0+255),b
  2713  00137C  513E               	movf	velMapping@threshold& (0+255),w,b
  2714  00137E  5F40               	subwf	??_velMapping& (0+255),f,b
  2715  001380  513F               	movf	(velMapping@threshold+1)& (0+255),w,b
  2716  001382  5B41               	subwfb	(??_velMapping+1)& (0+255),f,b
  2717  001384  C140  F135         	movff	??_velMapping,___ltdiv@divisor
  2718  001388  C141  F136         	movff	??_velMapping+1,___ltdiv@divisor+1
  2719  00138C  6B37               	clrf	(___ltdiv@divisor+2)& (0+255),b
  2720  00138E  EC36  F00C         	call	___ltdiv	;wreg free
  2721  001392  C132  F147         	movff	?___ltdiv,velMapping@resultingVel
  2722  001396  C133  F148         	movff	?___ltdiv+1,velMapping@resultingVel+1
  2723                           
  2724                           ; BSR set to: 1
  2725                           ;mylib.h: 464: resultingVel = resultingVel + lowerVelLimit;
  2726  00139A  0E2C               	movlw	44
  2727  00139C  2547               	addwf	velMapping@resultingVel& (0+255),w,b
  2728  00139E  6F47               	movwf	velMapping@resultingVel& (0+255),b
  2729  0013A0  0E01               	movlw	1
  2730  0013A2  2148               	addwfc	(velMapping@resultingVel+1)& (0+255),w,b
  2731  0013A4  6F48               	movwf	(velMapping@resultingVel+1)& (0+255),b
  2732                           
  2733                           ;mylib.h: 465: }else resultingVel = 0;
  2734  0013A6  D004               	goto	l4718
  2735  0013A8                     l4716:
  2736                           
  2737                           ; BSR set to: 1
  2738  0013A8  0E00               	movlw	0
  2739  0013AA  6F48               	movwf	(velMapping@resultingVel+1)& (0+255),b
  2740  0013AC  0E00               	movlw	0
  2741  0013AE  6F47               	movwf	velMapping@resultingVel& (0+255),b
  2742  0013B0                     l4718:
  2743                           
  2744                           ; BSR set to: 1
  2745                           ;mylib.h: 467: return resultingVel;
  2746  0013B0  C147  F13C         	movff	velMapping@resultingVel,?_velMapping
  2747  0013B4  C148  F13D         	movff	velMapping@resultingVel+1,?_velMapping+1
  2748                           
  2749                           ; BSR set to: 1
  2750  0013B8  0012               	return		;funcret
  2751  0013BA                     __end_of_velMapping:
  2752                           	opt callstack 0
  2753                           
  2754 ;; *************** function ___ltdiv *****************
  2755 ;; Defined at:
  2756 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\ltdiv.c"
  2757 ;; Parameters:    Size  Location     Type
  2758 ;;  dividend        3    0[BANK1 ] unsigned um
  2759 ;;  divisor         3    3[BANK1 ] unsigned um
  2760 ;; Auto vars:     Size  Location     Type
  2761 ;;  quotient        3    6[BANK1 ] unsigned um
  2762 ;;  counter         1    9[BANK1 ] unsigned char 
  2763 ;; Return value:  Size  Location     Type
  2764 ;;                  3    0[BANK1 ] unsigned um
  2765 ;; Registers used:
  2766 ;;		wreg, status,2, status,0
  2767 ;; Tracked objects:
  2768 ;;		On entry : 3F/1
  2769 ;;		On exit  : 3F/1
  2770 ;;		Unchanged: 0/0
  2771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2772 ;;      Params:         0       0       6       0
  2773 ;;      Locals:         0       0       4       0
  2774 ;;      Temps:          0       0       0       0
  2775 ;;      Totals:         0       0      10       0
  2776 ;;Total ram usage:       10 bytes
  2777 ;; Hardware stack levels used:    1
  2778 ;; Hardware stack levels required when called:    6
  2779 ;; This function calls:
  2780 ;;		Nothing
  2781 ;; This function is called by:
  2782 ;;		_velMapping
  2783 ;; This function uses a non-reentrant model
  2784 ;;
  2785                           
  2786                           	psect	text3
  2787  00186C                     __ptext3:
  2788                           	opt callstack 0
  2789  00186C                     ___ltdiv:
  2790                           	opt callstack 23
  2791                           
  2792                           ; BSR set to: 1
  2793                           
  2794                           ; BSR set to: 1
  2795                           ;incstack = 0
  2796  00186C  0E00               	movlw	0
  2797  00186E  6F38               	movwf	___ltdiv@quotient& (0+255),b
  2798  001870  0E00               	movlw	0
  2799  001872  6F39               	movwf	(___ltdiv@quotient+1)& (0+255),b
  2800  001874  0E00               	movlw	0
  2801  001876  6F3A               	movwf	(___ltdiv@quotient+2)& (0+255),b
  2802                           
  2803                           ; BSR set to: 1
  2804  001878  5135               	movf	___ltdiv@divisor& (0+255),w,b
  2805  00187A  1136               	iorwf	(___ltdiv@divisor+1)& (0+255),w,b
  2806  00187C  1137               	iorwf	(___ltdiv@divisor+2)& (0+255),w,b
  2807  00187E  B4D8               	btfsc	status,2,c
  2808  001880  D023               	goto	l1039
  2809                           
  2810                           ; BSR set to: 1
  2811  001882  0E01               	movlw	1
  2812  001884  6F3B               	movwf	___ltdiv@counter& (0+255),b
  2813  001886  D005               	goto	l4372
  2814  001888                     l4370:
  2815                           
  2816                           ; BSR set to: 1
  2817  001888  90D8               	bcf	status,0,c
  2818  00188A  3735               	rlcf	___ltdiv@divisor& (0+255),f,b
  2819  00188C  3736               	rlcf	(___ltdiv@divisor+1)& (0+255),f,b
  2820  00188E  3737               	rlcf	(___ltdiv@divisor+2)& (0+255),f,b
  2821  001890  2B3B               	incf	___ltdiv@counter& (0+255),f,b
  2822  001892                     l4372:
  2823                           
  2824                           ; BSR set to: 1
  2825  001892  AF37               	btfss	(___ltdiv@divisor+2)& (0+255),7,b
  2826  001894  D7F9               	goto	l4370
  2827  001896                     u4330:
  2828                           
  2829                           ; BSR set to: 1
  2830  001896  90D8               	bcf	status,0,c
  2831  001898  3738               	rlcf	___ltdiv@quotient& (0+255),f,b
  2832  00189A  3739               	rlcf	(___ltdiv@quotient+1)& (0+255),f,b
  2833  00189C  373A               	rlcf	(___ltdiv@quotient+2)& (0+255),f,b
  2834                           
  2835                           ; BSR set to: 1
  2836  00189E  5135               	movf	___ltdiv@divisor& (0+255),w,b
  2837  0018A0  5D32               	subwf	___ltdiv@dividend& (0+255),w,b
  2838  0018A2  5136               	movf	(___ltdiv@divisor+1)& (0+255),w,b
  2839  0018A4  5933               	subwfb	(___ltdiv@dividend+1)& (0+255),w,b
  2840  0018A6  5137               	movf	(___ltdiv@divisor+2)& (0+255),w,b
  2841  0018A8  5934               	subwfb	(___ltdiv@dividend+2)& (0+255),w,b
  2842  0018AA  A0D8               	btfss	status,0,c
  2843  0018AC  D007               	goto	l1044
  2844                           
  2845                           ; BSR set to: 1
  2846  0018AE  5135               	movf	___ltdiv@divisor& (0+255),w,b
  2847  0018B0  5F32               	subwf	___ltdiv@dividend& (0+255),f,b
  2848  0018B2  5136               	movf	(___ltdiv@divisor+1)& (0+255),w,b
  2849  0018B4  5B33               	subwfb	(___ltdiv@dividend+1)& (0+255),f,b
  2850  0018B6  5137               	movf	(___ltdiv@divisor+2)& (0+255),w,b
  2851  0018B8  5B34               	subwfb	(___ltdiv@dividend+2)& (0+255),f,b
  2852                           
  2853                           ; BSR set to: 1
  2854  0018BA  8138               	bsf	___ltdiv@quotient& (0+255),0,b
  2855  0018BC                     l1044:
  2856                           
  2857                           ; BSR set to: 1
  2858  0018BC  90D8               	bcf	status,0,c
  2859  0018BE  3337               	rrcf	(___ltdiv@divisor+2)& (0+255),f,b
  2860  0018C0  3336               	rrcf	(___ltdiv@divisor+1)& (0+255),f,b
  2861  0018C2  3335               	rrcf	___ltdiv@divisor& (0+255),f,b
  2862                           
  2863                           ; BSR set to: 1
  2864  0018C4  2F3B               	decfsz	___ltdiv@counter& (0+255),f,b
  2865  0018C6  D7E7               	goto	u4330
  2866  0018C8                     l1039:
  2867                           
  2868                           ; BSR set to: 1
  2869  0018C8  C138  F132         	movff	___ltdiv@quotient,?___ltdiv
  2870  0018CC  C139  F133         	movff	___ltdiv@quotient+1,?___ltdiv+1
  2871  0018D0  C13A  F134         	movff	___ltdiv@quotient+2,?___ltdiv+2
  2872                           
  2873                           ; BSR set to: 1
  2874  0018D4  0012               	return		;funcret
  2875  0018D6                     __end_of___ltdiv:
  2876                           	opt callstack 0
  2877                           
  2878 ;; *************** function _signFunc *****************
  2879 ;; Defined at:
  2880 ;;		line 448 in file "mylib.h"
  2881 ;; Parameters:    Size  Location     Type
  2882 ;;  F               2    0[BANK1 ] unsigned int 
  2883 ;;  E               2    2[BANK1 ] unsigned int 
  2884 ;; Auto vars:     Size  Location     Type
  2885 ;;  signResult      1    4[BANK1 ] unsigned char 
  2886 ;; Return value:  Size  Location     Type
  2887 ;;                  1    wreg      unsigned char 
  2888 ;; Registers used:
  2889 ;;		wreg, status,2, status,0
  2890 ;; Tracked objects:
  2891 ;;		On entry : 3F/1
  2892 ;;		On exit  : 3F/1
  2893 ;;		Unchanged: 0/0
  2894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2895 ;;      Params:         0       0       4       0
  2896 ;;      Locals:         0       0       1       0
  2897 ;;      Temps:          0       0       0       0
  2898 ;;      Totals:         0       0       5       0
  2899 ;;Total ram usage:        5 bytes
  2900 ;; Hardware stack levels used:    1
  2901 ;; Hardware stack levels required when called:    6
  2902 ;; This function calls:
  2903 ;;		Nothing
  2904 ;; This function is called by:
  2905 ;;		_main
  2906 ;; This function uses a non-reentrant model
  2907 ;;
  2908                           
  2909                           	psect	text4
  2910  001E10                     __ptext4:
  2911                           	opt callstack 0
  2912  001E10                     _signFunc:
  2913                           	opt callstack 24
  2914                           
  2915                           ; BSR set to: 1
  2916                           ;mylib.h: 449: unsigned char signResult;;mylib.h: 450: if(F > E) signResult = 1;
  2917                           
  2918                           ; BSR set to: 1
  2919                           ;incstack = 0
  2920  001E10  5132               	movf	signFunc@F& (0+255),w,b
  2921  001E12  5D34               	subwf	signFunc@E& (0+255),w,b
  2922  001E14  5133               	movf	(signFunc@F+1)& (0+255),w,b
  2923  001E16  5935               	subwfb	(signFunc@E+1)& (0+255),w,b
  2924  001E18  B0D8               	btfsc	status,0,c
  2925  001E1A  D002               	goto	l4704
  2926                           
  2927                           ; BSR set to: 1
  2928  001E1C  0E01               	movlw	1
  2929  001E1E  D001               	goto	L21
  2930  001E20                     l4704:
  2931                           
  2932                           ; BSR set to: 1
  2933                           ;mylib.h: 451: else signResult = 0;
  2934  001E20  0E00               	movlw	0
  2935  001E22                     L21:
  2936  001E22  6F36               	movwf	signFunc@signResult& (0+255),b
  2937                           
  2938                           ; BSR set to: 1
  2939                           ;mylib.h: 452: return signResult;
  2940  001E24  5136               	movf	signFunc@signResult& (0+255),w,b
  2941                           
  2942                           ; BSR set to: 1
  2943  001E26  0012               	return		;funcret
  2944  001E28                     __end_of_signFunc:
  2945                           	opt callstack 0
  2946                           
  2947 ;; *************** function _sendUSART_int *****************
  2948 ;; Defined at:
  2949 ;;		line 269 in file "mylib.h"
  2950 ;; Parameters:    Size  Location     Type
  2951 ;;  A               2    6[BANK1 ] unsigned int 
  2952 ;; Auto vars:     Size  Location     Type
  2953 ;;  highpart        1    9[BANK1 ] unsigned char 
  2954 ;;  lowpart         1    8[BANK1 ] unsigned char 
  2955 ;; Return value:  Size  Location     Type
  2956 ;;                  1    wreg      void 
  2957 ;; Registers used:
  2958 ;;		wreg, status,2, cstack
  2959 ;; Tracked objects:
  2960 ;;		On entry : 3F/1
  2961 ;;		On exit  : 0/0
  2962 ;;		Unchanged: 0/0
  2963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2964 ;;      Params:         0       0       2       0
  2965 ;;      Locals:         0       0       2       0
  2966 ;;      Temps:          0       0       0       0
  2967 ;;      Totals:         0       0       4       0
  2968 ;;Total ram usage:        4 bytes
  2969 ;; Hardware stack levels used:    1
  2970 ;; Hardware stack levels required when called:    7
  2971 ;; This function calls:
  2972 ;;		_sendUSART
  2973 ;; This function is called by:
  2974 ;;		_main
  2975 ;; This function uses a non-reentrant model
  2976 ;;
  2977                           
  2978                           	psect	text5
  2979  001E28                     __ptext5:
  2980                           	opt callstack 0
  2981  001E28                     _sendUSART_int:
  2982                           	opt callstack 23
  2983                           
  2984                           ; BSR set to: 1
  2985                           ;mylib.h: 270: unsigned char lowpart;;mylib.h: 271: unsigned char highpart;;mylib.h: 273
      +                          : lowpart = A;
  2986                           
  2987                           ; BSR set to: 1
  2988                           ;incstack = 0
  2989  001E28  C138  F13A         	movff	sendUSART_int@A,sendUSART_int@lowpart
  2990                           
  2991                           ;mylib.h: 274: highpart = A>>8;
  2992  001E2C  C139  F13B         	movff	sendUSART_int@A+1,sendUSART_int@highpart
  2993                           
  2994                           ; BSR set to: 1
  2995                           ;mylib.h: 275: sendUSART(highpart);
  2996  001E30  513B               	movf	sendUSART_int@highpart& (0+255),w,b
  2997  001E32  EC5B  F00F         	call	_sendUSART
  2998                           
  2999                           ;mylib.h: 276: sendUSART(lowpart);
  3000  001E36  0101               	movlb	1	; () banked
  3001  001E38  513A               	movf	sendUSART_int@lowpart& (0+255),w,b
  3002  001E3A  EC5B  F00F         	call	_sendUSART
  3003  001E3E  0012               	return		;funcret
  3004  001E40                     __end_of_sendUSART_int:
  3005                           	opt callstack 0
  3006                           
  3007 ;; *************** function _read_EEprom *****************
  3008 ;; Defined at:
  3009 ;;		line 419 in file "mylib.h"
  3010 ;; Parameters:    Size  Location     Type
  3011 ;;  address         1    wreg     unsigned char 
  3012 ;; Auto vars:     Size  Location     Type
  3013 ;;  address         1    0[BANK1 ] unsigned char 
  3014 ;; Return value:  Size  Location     Type
  3015 ;;                  1    wreg      unsigned char 
  3016 ;; Registers used:
  3017 ;;		wreg, status,2
  3018 ;; Tracked objects:
  3019 ;;		On entry : 0/0
  3020 ;;		On exit  : 0/0
  3021 ;;		Unchanged: 0/0
  3022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3023 ;;      Params:         0       0       0       0
  3024 ;;      Locals:         0       0       1       0
  3025 ;;      Temps:          0       0       0       0
  3026 ;;      Totals:         0       0       1       0
  3027 ;;Total ram usage:        1 bytes
  3028 ;; Hardware stack levels used:    1
  3029 ;; Hardware stack levels required when called:    6
  3030 ;; This function calls:
  3031 ;;		Nothing
  3032 ;; This function is called by:
  3033 ;;		_main
  3034 ;; This function uses a non-reentrant model
  3035 ;;
  3036                           
  3037                           	psect	text6
  3038  001E56                     __ptext6:
  3039                           	opt callstack 0
  3040  001E56                     _read_EEprom:
  3041                           	opt callstack 24
  3042                           
  3043                           ;incstack = 0
  3044                           ;read_EEprom@address stored from wreg
  3045  001E56  0101               	movlb	1	; () banked
  3046  001E58  6F32               	movwf	read_EEprom@address& (0+255),b
  3047                           
  3048                           ;mylib.h: 420: EEADR = address;
  3049  001E5A  C132  FFA9         	movff	read_EEprom@address,4009	;volatile
  3050                           
  3051                           ;mylib.h: 421: EECON1bits.EEPGD = 0;
  3052  001E5E  9EA6               	bcf	166,7,c	;volsfr
  3053                           
  3054                           ;mylib.h: 422: EECON1bits.CFGS = 0;
  3055  001E60  9CA6               	bcf	166,6,c	;volsfr
  3056                           
  3057                           ;mylib.h: 424: EECON1bits.RD = 1;
  3058  001E62  80A6               	bsf	166,0,c	;volsfr
  3059                           
  3060                           ;mylib.h: 426: return EEDATA;
  3061  001E64  50A8               	movf	168,w,c	;volatile
  3062  001E66  0012               	return		;funcret
  3063  001E68                     __end_of_read_EEprom:
  3064                           	opt callstack 0
  3065                           
  3066 ;; *************** function _readUSART_withTIMEOUT *****************
  3067 ;; Defined at:
  3068 ;;		line 290 in file "mylib.h"
  3069 ;; Parameters:    Size  Location     Type
  3070 ;;		None
  3071 ;; Auto vars:     Size  Location     Type
  3072 ;;  time            1    8[BANK1 ] unsigned char 
  3073 ;;  value           1    7[BANK1 ] unsigned char 
  3074 ;; Return value:  Size  Location     Type
  3075 ;;                  1    wreg      unsigned char 
  3076 ;; Registers used:
  3077 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3078 ;; Tracked objects:
  3079 ;;		On entry : 0/1
  3080 ;;		On exit  : 3F/1
  3081 ;;		Unchanged: 0/0
  3082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3083 ;;      Params:         0       0       0       0
  3084 ;;      Locals:         0       0       2       0
  3085 ;;      Temps:          0       0       1       0
  3086 ;;      Totals:         0       0       3       0
  3087 ;;Total ram usage:        3 bytes
  3088 ;; Hardware stack levels used:    1
  3089 ;; Hardware stack levels required when called:    7
  3090 ;; This function calls:
  3091 ;;		___awmod
  3092 ;; This function is called by:
  3093 ;;		_main
  3094 ;; This function uses a non-reentrant model
  3095 ;;
  3096                           
  3097                           	psect	text7
  3098  00171C                     __ptext7:
  3099                           	opt callstack 0
  3100  00171C                     _readUSART_withTIMEOUT:
  3101                           	opt callstack 23
  3102                           
  3103                           ;mylib.h: 293: TMR0L = 0;
  3104                           
  3105                           ;incstack = 0
  3106  00171C  0E00               	movlw	0
  3107  00171E  6ED6               	movwf	214,c	;volatile
  3108                           
  3109                           ;mylib.h: 294: T0CONbits.TMR0ON = 1;
  3110  001720  8ED5               	bsf	213,7,c	;volatile
  3111  001722                     l4584:
  3112                           
  3113                           ;mylib.h: 296: time = TMR0L;
  3114  001722  CFD6 F13A          	movff	4054,readUSART_withTIMEOUT@time	;volatile
  3115                           
  3116                           ;mylib.h: 297: if(USARTinput_val[ir] == 1){
  3117  001726  0100               	movlb	0	; () banked
  3118  001728  519D               	movf	_ir& (0+255),w,b
  3119  00172A  0F60               	addlw	low _USARTinput_val
  3120  00172C  6ED9               	movwf	fsr2l,c
  3121  00172E  6ADA               	clrf	fsr2h,c
  3122  001730  04DE               	decf	postinc2,w,c
  3123  001732  A4D8               	btfss	status,2,c
  3124  001734  D022               	goto	l4594
  3125                           
  3126                           ; BSR set to: 0
  3127                           ;mylib.h: 298: value = USARTinput_data[ir];
  3128  001736  0E00               	movlw	low _USARTinput_data
  3129  001738  259D               	addwf	_ir& (0+255),w,b
  3130  00173A  6ED9               	movwf	fsr2l,c
  3131  00173C  6ADA               	clrf	fsr2h,c
  3132  00173E  0E01               	movlw	high _USARTinput_data
  3133  001740  22DA               	addwfc	fsr2h,f,c
  3134  001742  50DF               	movf	indf2,w,c
  3135  001744  0101               	movlb	1	; () banked
  3136  001746  6F39               	movwf	readUSART_withTIMEOUT@value& (0+255),b
  3137                           
  3138                           ;mylib.h: 299: USARTinput_val[ir] = 0;
  3139  001748  0100               	movlb	0	; () banked
  3140  00174A  519D               	movf	_ir& (0+255),w,b
  3141  00174C  0F60               	addlw	low _USARTinput_val
  3142  00174E  6ED9               	movwf	fsr2l,c
  3143  001750  6ADA               	clrf	fsr2h,c
  3144  001752  0E00               	movlw	0
  3145  001754  6EDF               	movwf	indf2,c
  3146                           
  3147                           ; BSR set to: 0
  3148                           ;mylib.h: 300: ir = (ir+1) % USARTinput_length;
  3149  001756  0E01               	movlw	1
  3150  001758  259D               	addwf	_ir& (0+255),w,b
  3151  00175A  0101               	movlb	1	; () banked
  3152  00175C  6F32               	movwf	___awmod@dividend& (0+255),b
  3153  00175E  6B33               	clrf	(___awmod@dividend+1)& (0+255),b
  3154  001760  0E00               	movlw	0
  3155  001762  2333               	addwfc	(___awmod@dividend+1)& (0+255),f,b
  3156  001764  C0C5  F134         	movff	_USARTinput_length,___awmod@divisor
  3157  001768  6B35               	clrf	(___awmod@divisor+1)& (0+255),b
  3158  00176A  ECC6  F00B         	call	___awmod	;wreg free
  3159  00176E  5132               	movf	?___awmod& (0+255),w,b
  3160  001770  0100               	movlb	0	; () banked
  3161  001772  6F9D               	movwf	_ir& (0+255),b
  3162                           
  3163                           ; BSR set to: 0
  3164                           ;mylib.h: 301: time = 255;
  3165  001774  0101               	movlb	1	; () banked
  3166  001776  693A               	setf	readUSART_withTIMEOUT@time& (0+255),b
  3167                           
  3168                           ;mylib.h: 302: }else value = 0;
  3169  001778  D003               	goto	l4596
  3170  00177A                     l4594:
  3171                           
  3172                           ; BSR set to: 0
  3173  00177A  0E00               	movlw	0
  3174  00177C  0101               	movlb	1	; () banked
  3175  00177E  6F39               	movwf	readUSART_withTIMEOUT@value& (0+255),b
  3176  001780                     l4596:
  3177                           
  3178                           ; BSR set to: 1
  3179                           ;mylib.h: 303: }while(time < 156);
  3180  001780  0E9B               	movlw	155
  3181  001782  653A               	cpfsgt	readUSART_withTIMEOUT@time& (0+255),b
  3182  001784  D7CE               	goto	l4584
  3183                           
  3184                           ; BSR set to: 1
  3185                           ;mylib.h: 304: T0CONbits.TMR0ON = 0;
  3186  001786  9ED5               	bcf	213,7,c	;volatile
  3187                           
  3188                           ; BSR set to: 1
  3189                           ;mylib.h: 305: return value;
  3190  001788  5139               	movf	readUSART_withTIMEOUT@value& (0+255),w,b
  3191                           
  3192                           ; BSR set to: 1
  3193  00178A  0012               	return		;funcret
  3194  00178C                     __end_of_readUSART_withTIMEOUT:
  3195                           	opt callstack 0
  3196                           
  3197 ;; *************** function _percentage2threshold *****************
  3198 ;; Defined at:
  3199 ;;		line 325 in file "mylib.h"
  3200 ;; Parameters:    Size  Location     Type
  3201 ;;  percentage      1    wreg     unsigned char 
  3202 ;; Auto vars:     Size  Location     Type
  3203 ;;  percentage      1   27[BANK1 ] unsigned char 
  3204 ;;  threshold_sh    3   22[BANK1 ] m
  3205 ;;  threshold_in    2   25[BANK1 ] unsigned int 
  3206 ;; Return value:  Size  Location     Type
  3207 ;;                  2   20[BANK1 ] unsigned int 
  3208 ;; Registers used:
  3209 ;;		wreg, status,2, status,0, cstack
  3210 ;; Tracked objects:
  3211 ;;		On entry : 3F/1
  3212 ;;		On exit  : 3F/1
  3213 ;;		Unchanged: 0/0
  3214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3215 ;;      Params:         0       0       2       0
  3216 ;;      Locals:         0       0       6       0
  3217 ;;      Temps:          0       0       0       0
  3218 ;;      Totals:         0       0       8       0
  3219 ;;Total ram usage:        8 bytes
  3220 ;; Hardware stack levels used:    1
  3221 ;; Hardware stack levels required when called:    7
  3222 ;; This function calls:
  3223 ;;		___atdiv
  3224 ;;		___tmul
  3225 ;; This function is called by:
  3226 ;;		_main
  3227 ;; This function uses a non-reentrant model
  3228 ;;
  3229                           
  3230                           	psect	text8
  3231  0015C4                     __ptext8:
  3232                           	opt callstack 0
  3233  0015C4                     _percentage2threshold:
  3234                           	opt callstack 23
  3235                           
  3236                           ; BSR set to: 1
  3237                           ;incstack = 0
  3238                           ;percentage2threshold@percentage stored from wreg
  3239  0015C4  6F4D               	movwf	percentage2threshold@percentage& (0+255),b
  3240                           
  3241                           ;mylib.h: 326: unsigned int threshold_int;;mylib.h: 327: if(percentage > 100) threshold_
      +                          int = 1023;
  3242  0015C6  0E64               	movlw	100
  3243  0015C8  0101               	movlb	1	; () banked
  3244  0015CA  654D               	cpfsgt	percentage2threshold@percentage& (0+255),b
  3245  0015CC  D004               	goto	l4606
  3246                           
  3247                           ; BSR set to: 1
  3248  0015CE  0E03               	movlw	3
  3249  0015D0  6F4C               	movwf	(percentage2threshold@threshold_int+1)& (0+255),b
  3250  0015D2  694B               	setf	percentage2threshold@threshold_int& (0+255),b
  3251  0015D4  D02C               	goto	l4614
  3252  0015D6                     l4606:
  3253                           
  3254                           ; BSR set to: 1
  3255                           ;mylib.h: 328: else if(percentage <= 6) threshold_int = 10;
  3256  0015D6  0E07               	movlw	7
  3257  0015D8  614D               	cpfslt	percentage2threshold@percentage& (0+255),b
  3258  0015DA  D005               	goto	l4610
  3259                           
  3260                           ; BSR set to: 1
  3261  0015DC  0E00               	movlw	0
  3262  0015DE  6F4C               	movwf	(percentage2threshold@threshold_int+1)& (0+255),b
  3263  0015E0  0E0A               	movlw	10
  3264  0015E2  6F4B               	movwf	percentage2threshold@threshold_int& (0+255),b
  3265  0015E4  D024               	goto	l4614
  3266  0015E6                     l4610:
  3267                           
  3268                           ; BSR set to: 1
  3269                           ;mylib.h: 329: else{;mylib.h: 330: short long threshold_shortlong = (short long)percenta
      +                          ge * (short long)1023 / (short long)100;
  3270  0015E6  0EFF               	movlw	255
  3271  0015E8  6F35               	movwf	___tmul@multiplicand& (0+255),b
  3272  0015EA  0E03               	movlw	3
  3273  0015EC  6F36               	movwf	(___tmul@multiplicand+1)& (0+255),b
  3274  0015EE  0E00               	movlw	0
  3275  0015F0  6F37               	movwf	(___tmul@multiplicand+2)& (0+255),b
  3276  0015F2  514D               	movf	percentage2threshold@percentage& (0+255),w,b
  3277  0015F4  6F32               	movwf	___tmul@multiplier& (0+255),b
  3278  0015F6  6B33               	clrf	(___tmul@multiplier+1)& (0+255),b
  3279  0015F8  6B34               	clrf	(___tmul@multiplier+2)& (0+255),b
  3280  0015FA  EC0D  F00D         	call	___tmul	;wreg free
  3281  0015FE  C132  F13B         	movff	?___tmul,___atdiv@dividend
  3282  001602  C133  F13C         	movff	?___tmul+1,___atdiv@dividend+1
  3283  001606  C134  F13D         	movff	?___tmul+2,___atdiv@dividend+2
  3284  00160A  0E64               	movlw	100
  3285  00160C  6F3E               	movwf	___atdiv@divisor& (0+255),b
  3286  00160E  0E00               	movlw	0
  3287  001610  6F3F               	movwf	(___atdiv@divisor+1)& (0+255),b
  3288  001612  0E00               	movlw	0
  3289  001614  6F40               	movwf	(___atdiv@divisor+2)& (0+255),b
  3290  001616  EC99  F008         	call	___atdiv	;wreg free
  3291  00161A  C13B  F148         	movff	?___atdiv,percentage2threshold@threshold_shortlong
  3292  00161E  C13C  F149         	movff	?___atdiv+1,percentage2threshold@threshold_shortlong+1
  3293  001622  C13D  F14A         	movff	?___atdiv+2,percentage2threshold@threshold_shortlong+2
  3294                           
  3295                           ; BSR set to: 1
  3296                           ;mylib.h: 331: threshold_int = threshold_shortlong;
  3297  001626  C148  F14B         	movff	percentage2threshold@threshold_shortlong,percentage2threshold@threshold_int
  3298  00162A  C149  F14C         	movff	percentage2threshold@threshold_shortlong+1,percentage2threshold@threshold_int+1
  3299  00162E                     l4614:
  3300                           
  3301                           ; BSR set to: 1
  3302                           ;mylib.h: 332: };mylib.h: 333: return threshold_int;
  3303  00162E  C14B  F146         	movff	percentage2threshold@threshold_int,?_percentage2threshold
  3304  001632  C14C  F147         	movff	percentage2threshold@threshold_int+1,?_percentage2threshold+1
  3305                           
  3306                           ; BSR set to: 1
  3307  001636  0012               	return		;funcret
  3308  001638                     __end_of_percentage2threshold:
  3309                           	opt callstack 0
  3310                           
  3311 ;; *************** function ___tmul *****************
  3312 ;; Defined at:
  3313 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul24.c"
  3314 ;; Parameters:    Size  Location     Type
  3315 ;;  multiplier      3    0[BANK1 ] unsigned um
  3316 ;;  multiplicand    3    3[BANK1 ] unsigned um
  3317 ;; Auto vars:     Size  Location     Type
  3318 ;;  product         3    6[BANK1 ] unsigned um
  3319 ;; Return value:  Size  Location     Type
  3320 ;;                  3    0[BANK1 ] unsigned um
  3321 ;; Registers used:
  3322 ;;		wreg, status,2, status,0
  3323 ;; Tracked objects:
  3324 ;;		On entry : 3F/1
  3325 ;;		On exit  : 3F/1
  3326 ;;		Unchanged: 0/0
  3327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3328 ;;      Params:         0       0       6       0
  3329 ;;      Locals:         0       0       3       0
  3330 ;;      Temps:          0       0       0       0
  3331 ;;      Totals:         0       0       9       0
  3332 ;;Total ram usage:        9 bytes
  3333 ;; Hardware stack levels used:    1
  3334 ;; Hardware stack levels required when called:    6
  3335 ;; This function calls:
  3336 ;;		Nothing
  3337 ;; This function is called by:
  3338 ;;		_percentage2threshold
  3339 ;;		_velMapping
  3340 ;; This function uses a non-reentrant model
  3341 ;;
  3342                           
  3343                           	psect	text9
  3344  001A1A                     __ptext9:
  3345                           	opt callstack 0
  3346  001A1A                     ___tmul:
  3347                           	opt callstack 23
  3348                           
  3349                           ; BSR set to: 1
  3350                           
  3351                           ; BSR set to: 1
  3352                           ;incstack = 0
  3353  001A1A  0E00               	movlw	0
  3354  001A1C  6F38               	movwf	___tmul@product& (0+255),b
  3355  001A1E  0E00               	movlw	0
  3356  001A20  6F39               	movwf	(___tmul@product+1)& (0+255),b
  3357  001A22  0E00               	movlw	0
  3358  001A24  6F3A               	movwf	(___tmul@product+2)& (0+255),b
  3359  001A26                     l4314:
  3360                           
  3361                           ; BSR set to: 1
  3362  001A26  A132               	btfss	___tmul@multiplier& (0+255),0,b
  3363  001A28  D006               	goto	l4318
  3364                           
  3365                           ; BSR set to: 1
  3366  001A2A  5135               	movf	___tmul@multiplicand& (0+255),w,b
  3367  001A2C  2738               	addwf	___tmul@product& (0+255),f,b
  3368  001A2E  5136               	movf	(___tmul@multiplicand+1)& (0+255),w,b
  3369  001A30  2339               	addwfc	(___tmul@product+1)& (0+255),f,b
  3370  001A32  5137               	movf	(___tmul@multiplicand+2)& (0+255),w,b
  3371  001A34  233A               	addwfc	(___tmul@product+2)& (0+255),f,b
  3372  001A36                     l4318:
  3373                           
  3374                           ; BSR set to: 1
  3375  001A36  90D8               	bcf	status,0,c
  3376  001A38  3735               	rlcf	___tmul@multiplicand& (0+255),f,b
  3377  001A3A  3736               	rlcf	(___tmul@multiplicand+1)& (0+255),f,b
  3378  001A3C  3737               	rlcf	(___tmul@multiplicand+2)& (0+255),f,b
  3379  001A3E  90D8               	bcf	status,0,c
  3380  001A40  3334               	rrcf	(___tmul@multiplier+2)& (0+255),f,b
  3381  001A42  3333               	rrcf	(___tmul@multiplier+1)& (0+255),f,b
  3382  001A44  3332               	rrcf	___tmul@multiplier& (0+255),f,b
  3383                           
  3384                           ; BSR set to: 1
  3385  001A46  5132               	movf	___tmul@multiplier& (0+255),w,b
  3386  001A48  1133               	iorwf	(___tmul@multiplier+1)& (0+255),w,b
  3387  001A4A  1134               	iorwf	(___tmul@multiplier+2)& (0+255),w,b
  3388  001A4C  A4D8               	btfss	status,2,c
  3389  001A4E  D7EB               	goto	l4314
  3390                           
  3391                           ; BSR set to: 1
  3392  001A50  C138  F132         	movff	___tmul@product,?___tmul
  3393  001A54  C139  F133         	movff	___tmul@product+1,?___tmul+1
  3394  001A58  C13A  F134         	movff	___tmul@product+2,?___tmul+2
  3395                           
  3396                           ; BSR set to: 1
  3397  001A5C  0012               	return		;funcret
  3398  001A5E                     __end_of___tmul:
  3399                           	opt callstack 0
  3400                           
  3401 ;; *************** function ___atdiv *****************
  3402 ;; Defined at:
  3403 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\atdiv.c"
  3404 ;; Parameters:    Size  Location     Type
  3405 ;;  dividend        3    9[BANK1 ] m
  3406 ;;  divisor         3   12[BANK1 ] m
  3407 ;; Auto vars:     Size  Location     Type
  3408 ;;  quotient        3   17[BANK1 ] m
  3409 ;;  sign            1   16[BANK1 ] unsigned char 
  3410 ;;  counter         1   15[BANK1 ] unsigned char 
  3411 ;; Return value:  Size  Location     Type
  3412 ;;                  3    9[BANK1 ] m
  3413 ;; Registers used:
  3414 ;;		wreg, status,2, status,0
  3415 ;; Tracked objects:
  3416 ;;		On entry : 3F/1
  3417 ;;		On exit  : 3F/1
  3418 ;;		Unchanged: 0/0
  3419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3420 ;;      Params:         0       0       6       0
  3421 ;;      Locals:         0       0       5       0
  3422 ;;      Temps:          0       0       0       0
  3423 ;;      Totals:         0       0      11       0
  3424 ;;Total ram usage:       11 bytes
  3425 ;; Hardware stack levels used:    1
  3426 ;; Hardware stack levels required when called:    6
  3427 ;; This function calls:
  3428 ;;		Nothing
  3429 ;; This function is called by:
  3430 ;;		_percentage2threshold
  3431 ;; This function uses a non-reentrant model
  3432 ;;
  3433                           
  3434                           	psect	text10
  3435  001132                     __ptext10:
  3436                           	opt callstack 0
  3437  001132                     ___atdiv:
  3438                           	opt callstack 23
  3439                           
  3440                           ; BSR set to: 1
  3441                           
  3442                           ; BSR set to: 1
  3443                           ;incstack = 0
  3444  001132  0E00               	movlw	0
  3445  001134  6F42               	movwf	___atdiv@sign& (0+255),b
  3446                           
  3447                           ; BSR set to: 1
  3448  001136  AF40               	btfss	(___atdiv@divisor+2)& (0+255),7,b
  3449  001138  D008               	goto	l4330
  3450                           
  3451                           ; BSR set to: 1
  3452  00113A  1F40               	comf	(___atdiv@divisor+2)& (0+255),f,b
  3453  00113C  1F3F               	comf	(___atdiv@divisor+1)& (0+255),f,b
  3454  00113E  6D3E               	negf	___atdiv@divisor& (0+255),b
  3455  001140  0E00               	movlw	0
  3456  001142  233F               	addwfc	(___atdiv@divisor+1)& (0+255),f,b
  3457  001144  2340               	addwfc	(___atdiv@divisor+2)& (0+255),f,b
  3458                           
  3459                           ; BSR set to: 1
  3460  001146  0E01               	movlw	1
  3461  001148  6F42               	movwf	___atdiv@sign& (0+255),b
  3462  00114A                     l4330:
  3463                           
  3464                           ; BSR set to: 1
  3465  00114A  AF3D               	btfss	(___atdiv@dividend+2)& (0+255),7,b
  3466  00114C  D008               	goto	l4336
  3467                           
  3468                           ; BSR set to: 1
  3469  00114E  1F3D               	comf	(___atdiv@dividend+2)& (0+255),f,b
  3470  001150  1F3C               	comf	(___atdiv@dividend+1)& (0+255),f,b
  3471  001152  6D3B               	negf	___atdiv@dividend& (0+255),b
  3472  001154  0E00               	movlw	0
  3473  001156  233C               	addwfc	(___atdiv@dividend+1)& (0+255),f,b
  3474  001158  233D               	addwfc	(___atdiv@dividend+2)& (0+255),f,b
  3475                           
  3476                           ; BSR set to: 1
  3477  00115A  0E01               	movlw	1
  3478  00115C  1B42               	xorwf	___atdiv@sign& (0+255),f,b
  3479  00115E                     l4336:
  3480                           
  3481                           ; BSR set to: 1
  3482  00115E  0E00               	movlw	0
  3483  001160  6F43               	movwf	___atdiv@quotient& (0+255),b
  3484  001162  0E00               	movlw	0
  3485  001164  6F44               	movwf	(___atdiv@quotient+1)& (0+255),b
  3486  001166  0E00               	movlw	0
  3487  001168  6F45               	movwf	(___atdiv@quotient+2)& (0+255),b
  3488                           
  3489                           ; BSR set to: 1
  3490  00116A  513E               	movf	___atdiv@divisor& (0+255),w,b
  3491  00116C  113F               	iorwf	(___atdiv@divisor+1)& (0+255),w,b
  3492  00116E  1140               	iorwf	(___atdiv@divisor+2)& (0+255),w,b
  3493  001170  B4D8               	btfsc	status,2,c
  3494  001172  D023               	goto	l4356
  3495                           
  3496                           ; BSR set to: 1
  3497  001174  0E01               	movlw	1
  3498  001176  6F41               	movwf	___atdiv@counter& (0+255),b
  3499  001178  D005               	goto	l4344
  3500  00117A                     l4342:
  3501                           
  3502                           ; BSR set to: 1
  3503  00117A  90D8               	bcf	status,0,c
  3504  00117C  373E               	rlcf	___atdiv@divisor& (0+255),f,b
  3505  00117E  373F               	rlcf	(___atdiv@divisor+1)& (0+255),f,b
  3506  001180  3740               	rlcf	(___atdiv@divisor+2)& (0+255),f,b
  3507  001182  2B41               	incf	___atdiv@counter& (0+255),f,b
  3508  001184                     l4344:
  3509                           
  3510                           ; BSR set to: 1
  3511  001184  AF40               	btfss	(___atdiv@divisor+2)& (0+255),7,b
  3512  001186  D7F9               	goto	l4342
  3513  001188                     u4290:
  3514                           
  3515                           ; BSR set to: 1
  3516  001188  90D8               	bcf	status,0,c
  3517  00118A  3743               	rlcf	___atdiv@quotient& (0+255),f,b
  3518  00118C  3744               	rlcf	(___atdiv@quotient+1)& (0+255),f,b
  3519  00118E  3745               	rlcf	(___atdiv@quotient+2)& (0+255),f,b
  3520                           
  3521                           ; BSR set to: 1
  3522  001190  513E               	movf	___atdiv@divisor& (0+255),w,b
  3523  001192  5D3B               	subwf	___atdiv@dividend& (0+255),w,b
  3524  001194  513F               	movf	(___atdiv@divisor+1)& (0+255),w,b
  3525  001196  593C               	subwfb	(___atdiv@dividend+1)& (0+255),w,b
  3526  001198  5140               	movf	(___atdiv@divisor+2)& (0+255),w,b
  3527  00119A  593D               	subwfb	(___atdiv@dividend+2)& (0+255),w,b
  3528  00119C  A0D8               	btfss	status,0,c
  3529  00119E  D007               	goto	l781
  3530                           
  3531                           ; BSR set to: 1
  3532  0011A0  513E               	movf	___atdiv@divisor& (0+255),w,b
  3533  0011A2  5F3B               	subwf	___atdiv@dividend& (0+255),f,b
  3534  0011A4  513F               	movf	(___atdiv@divisor+1)& (0+255),w,b
  3535  0011A6  5B3C               	subwfb	(___atdiv@dividend+1)& (0+255),f,b
  3536  0011A8  5140               	movf	(___atdiv@divisor+2)& (0+255),w,b
  3537  0011AA  5B3D               	subwfb	(___atdiv@dividend+2)& (0+255),f,b
  3538                           
  3539                           ; BSR set to: 1
  3540  0011AC  8143               	bsf	___atdiv@quotient& (0+255),0,b
  3541  0011AE                     l781:
  3542                           
  3543                           ; BSR set to: 1
  3544  0011AE  90D8               	bcf	status,0,c
  3545  0011B0  3340               	rrcf	(___atdiv@divisor+2)& (0+255),f,b
  3546  0011B2  333F               	rrcf	(___atdiv@divisor+1)& (0+255),f,b
  3547  0011B4  333E               	rrcf	___atdiv@divisor& (0+255),f,b
  3548                           
  3549                           ; BSR set to: 1
  3550  0011B6  2F41               	decfsz	___atdiv@counter& (0+255),f,b
  3551  0011B8  D7E7               	goto	u4290
  3552  0011BA                     l4356:
  3553                           
  3554                           ; BSR set to: 1
  3555  0011BA  5142               	movf	___atdiv@sign& (0+255),w,b
  3556  0011BC  B4D8               	btfsc	status,2,c
  3557  0011BE  D006               	goto	l4360
  3558                           
  3559                           ; BSR set to: 1
  3560  0011C0  1F45               	comf	(___atdiv@quotient+2)& (0+255),f,b
  3561  0011C2  1F44               	comf	(___atdiv@quotient+1)& (0+255),f,b
  3562  0011C4  6D43               	negf	___atdiv@quotient& (0+255),b
  3563  0011C6  0E00               	movlw	0
  3564  0011C8  2344               	addwfc	(___atdiv@quotient+1)& (0+255),f,b
  3565  0011CA  2345               	addwfc	(___atdiv@quotient+2)& (0+255),f,b
  3566  0011CC                     l4360:
  3567                           
  3568                           ; BSR set to: 1
  3569  0011CC  C143  F13B         	movff	___atdiv@quotient,?___atdiv
  3570  0011D0  C144  F13C         	movff	___atdiv@quotient+1,?___atdiv+1
  3571  0011D4  C145  F13D         	movff	___atdiv@quotient+2,?___atdiv+2
  3572                           
  3573                           ; BSR set to: 1
  3574  0011D8  0012               	return		;funcret
  3575  0011DA                     __end_of___atdiv:
  3576                           	opt callstack 0
  3577                           
  3578 ;; *************** function _disableModeSwitch *****************
  3579 ;; Defined at:
  3580 ;;		line 430 in file "mylib.h"
  3581 ;; Parameters:    Size  Location     Type
  3582 ;;		None
  3583 ;; Auto vars:     Size  Location     Type
  3584 ;;		None
  3585 ;; Return value:  Size  Location     Type
  3586 ;;                  1    wreg      void 
  3587 ;; Registers used:
  3588 ;;		None
  3589 ;; Tracked objects:
  3590 ;;		On entry : 0/1
  3591 ;;		On exit  : 0/0
  3592 ;;		Unchanged: 0/0
  3593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3594 ;;      Params:         0       0       0       0
  3595 ;;      Locals:         0       0       0       0
  3596 ;;      Temps:          0       0       0       0
  3597 ;;      Totals:         0       0       0       0
  3598 ;;Total ram usage:        0 bytes
  3599 ;; Hardware stack levels used:    1
  3600 ;; Hardware stack levels required when called:    6
  3601 ;; This function calls:
  3602 ;;		Nothing
  3603 ;; This function is called by:
  3604 ;;		_main
  3605 ;; This function uses a non-reentrant model
  3606 ;;
  3607                           
  3608                           	psect	text11
  3609  001ED6                     __ptext11:
  3610                           	opt callstack 0
  3611  001ED6                     _disableModeSwitch:
  3612                           	opt callstack 24
  3613                           
  3614                           ;mylib.h: 431: INTCONbits.INT0IE = 0;
  3615                           
  3616                           ; BSR set to: 1
  3617                           ;incstack = 0
  3618  001ED6  98F2               	bcf	242,4,c	;volatile
  3619                           
  3620                           ;mylib.h: 432: INTCONbits.INT0IF = 0;
  3621  001ED8  92F2               	bcf	242,1,c	;volatile
  3622  001EDA  0012               	return		;funcret
  3623  001EDC                     __end_of_disableModeSwitch:
  3624                           	opt callstack 0
  3625                           
  3626 ;; *************** function _config_timer1 *****************
  3627 ;; Defined at:
  3628 ;;		line 193 in file "config.h"
  3629 ;; Parameters:    Size  Location     Type
  3630 ;;		None
  3631 ;; Auto vars:     Size  Location     Type
  3632 ;;		None
  3633 ;; Return value:  Size  Location     Type
  3634 ;;                  1    wreg      void 
  3635 ;; Registers used:
  3636 ;;		wreg, status,2
  3637 ;; Tracked objects:
  3638 ;;		On entry : 0/0
  3639 ;;		On exit  : 0/0
  3640 ;;		Unchanged: 0/0
  3641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3642 ;;      Params:         0       0       0       0
  3643 ;;      Locals:         0       0       0       0
  3644 ;;      Temps:          0       0       0       0
  3645 ;;      Totals:         0       0       0       0
  3646 ;;Total ram usage:        0 bytes
  3647 ;; Hardware stack levels used:    1
  3648 ;; Hardware stack levels required when called:    6
  3649 ;; This function calls:
  3650 ;;		Nothing
  3651 ;; This function is called by:
  3652 ;;		_main
  3653 ;; This function uses a non-reentrant model
  3654 ;;
  3655                           
  3656                           	psect	text12
  3657  001DA8                     __ptext12:
  3658                           	opt callstack 0
  3659  001DA8                     _config_timer1:
  3660                           	opt callstack 24
  3661                           
  3662                           ;config.h: 194: T1CONbits.RD16 = 1;
  3663                           
  3664                           ;incstack = 0
  3665  001DA8  8ECD               	bsf	205,7,c	;volatile
  3666                           
  3667                           ;config.h: 199: TMR1H = 0b11011000;
  3668  001DAA  0ED8               	movlw	216
  3669  001DAC  6ECF               	movwf	207,c	;volatile
  3670                           
  3671                           ;config.h: 200: TMR1L = 0b11101111;
  3672  001DAE  0EEF               	movlw	239
  3673  001DB0  6ECE               	movwf	206,c	;volatile
  3674                           
  3675                           ;config.h: 203: T1CONbits.T1CKPS1 = 0;
  3676  001DB2  9ACD               	bcf	205,5,c	;volatile
  3677                           
  3678                           ;config.h: 204: T1CONbits.T1CKPS0 = 0;
  3679  001DB4  98CD               	bcf	205,4,c	;volatile
  3680                           
  3681                           ;config.h: 205: T1CONbits.T1OSCEN = 0;
  3682  001DB6  96CD               	bcf	205,3,c	;volatile
  3683                           
  3684                           ;config.h: 206: T1CONbits.TMR1CS = 0;
  3685  001DB8  92CD               	bcf	205,1,c	;volatile
  3686                           
  3687                           ;config.h: 208: PIE1bits.TMR1IE = 1;
  3688  001DBA  809D               	bsf	157,0,c	;volatile
  3689                           
  3690                           ;config.h: 209: IPR1bits.TMR1IP = 0;
  3691  001DBC  909F               	bcf	159,0,c	;volatile
  3692                           
  3693                           ;config.h: 210: T1CONbits.TMR1ON = 1;
  3694  001DBE  80CD               	bsf	205,0,c	;volatile
  3695  001DC0  0012               	return		;funcret
  3696  001DC2                     __end_of_config_timer1:
  3697                           	opt callstack 0
  3698                           
  3699 ;; *************** function _config_timer0 *****************
  3700 ;; Defined at:
  3701 ;;		line 179 in file "config.h"
  3702 ;; Parameters:    Size  Location     Type
  3703 ;;		None
  3704 ;; Auto vars:     Size  Location     Type
  3705 ;;		None
  3706 ;; Return value:  Size  Location     Type
  3707 ;;                  1    wreg      void 
  3708 ;; Registers used:
  3709 ;;		None
  3710 ;; Tracked objects:
  3711 ;;		On entry : 0/0
  3712 ;;		On exit  : 0/0
  3713 ;;		Unchanged: 0/0
  3714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3715 ;;      Params:         0       0       0       0
  3716 ;;      Locals:         0       0       0       0
  3717 ;;      Temps:          0       0       0       0
  3718 ;;      Totals:         0       0       0       0
  3719 ;;Total ram usage:        0 bytes
  3720 ;; Hardware stack levels used:    1
  3721 ;; Hardware stack levels required when called:    6
  3722 ;; This function calls:
  3723 ;;		Nothing
  3724 ;; This function is called by:
  3725 ;;		_main
  3726 ;; This function uses a non-reentrant model
  3727 ;;
  3728                           
  3729                           	psect	text13
  3730  001EA8                     __ptext13:
  3731                           	opt callstack 0
  3732  001EA8                     _config_timer0:
  3733                           	opt callstack 24
  3734                           
  3735                           ;config.h: 180: T0CONbits.T016BIT = 1;
  3736                           
  3737                           ;incstack = 0
  3738  001EA8  8CD5               	bsf	213,6,c	;volatile
  3739                           
  3740                           ;config.h: 181: T0CONbits.T0CS = 0;
  3741  001EAA  9AD5               	bcf	213,5,c	;volatile
  3742                           
  3743                           ;config.h: 182: T0CONbits.PSA = 0;
  3744  001EAC  96D5               	bcf	213,3,c	;volatile
  3745                           
  3746                           ;config.h: 184: T0CONbits.T0PS2 = 1;
  3747  001EAE  84D5               	bsf	213,2,c	;volatile
  3748                           
  3749                           ;config.h: 185: T0CONbits.T0PS1 = 1;
  3750  001EB0  82D5               	bsf	213,1,c	;volatile
  3751                           
  3752                           ;config.h: 186: T0CONbits.T0PS0 = 0;
  3753  001EB2  90D5               	bcf	213,0,c	;volatile
  3754  001EB4  0012               	return		;funcret
  3755  001EB6                     __end_of_config_timer0:
  3756                           	opt callstack 0
  3757                           
  3758 ;; *************** function _config_interrupt *****************
  3759 ;; Defined at:
  3760 ;;		line 171 in file "config.h"
  3761 ;; Parameters:    Size  Location     Type
  3762 ;;		None
  3763 ;; Auto vars:     Size  Location     Type
  3764 ;;		None
  3765 ;; Return value:  Size  Location     Type
  3766 ;;                  1    wreg      void 
  3767 ;; Registers used:
  3768 ;;		None
  3769 ;; Tracked objects:
  3770 ;;		On entry : 0/0
  3771 ;;		On exit  : 0/0
  3772 ;;		Unchanged: 0/0
  3773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3774 ;;      Params:         0       0       0       0
  3775 ;;      Locals:         0       0       0       0
  3776 ;;      Temps:          0       0       0       0
  3777 ;;      Totals:         0       0       0       0
  3778 ;;Total ram usage:        0 bytes
  3779 ;; Hardware stack levels used:    1
  3780 ;; Hardware stack levels required when called:    6
  3781 ;; This function calls:
  3782 ;;		Nothing
  3783 ;; This function is called by:
  3784 ;;		_main
  3785 ;; This function uses a non-reentrant model
  3786 ;;
  3787                           
  3788                           	psect	text14
  3789  001EC4                     __ptext14:
  3790                           	opt callstack 0
  3791  001EC4                     _config_interrupt:
  3792                           	opt callstack 24
  3793                           
  3794                           ;config.h: 172: RCONbits.IPEN = 1;
  3795                           
  3796                           ;incstack = 0
  3797  001EC4  8ED0               	bsf	208,7,c	;volatile
  3798                           
  3799                           ;config.h: 173: INTCONbits.GIE_GIEH = 1;
  3800  001EC6  8EF2               	bsf	242,7,c	;volatile
  3801                           
  3802                           ;config.h: 174: INTCONbits.PEIE_GIEL = 1;
  3803  001EC8  8CF2               	bsf	242,6,c	;volatile
  3804                           
  3805                           ;config.h: 175: INTCONbits.INT0IE = 1;
  3806  001ECA  88F2               	bsf	242,4,c	;volatile
  3807                           
  3808                           ;config.h: 176: INTCON2bits.INTEDG0 = 1;
  3809  001ECC  8CF1               	bsf	241,6,c	;volatile
  3810  001ECE  0012               	return		;funcret
  3811  001ED0                     __end_of_config_interrupt:
  3812                           	opt callstack 0
  3813                           
  3814 ;; *************** function _config_DIO *****************
  3815 ;; Defined at:
  3816 ;;		line 155 in file "config.h"
  3817 ;; Parameters:    Size  Location     Type
  3818 ;;		None
  3819 ;; Auto vars:     Size  Location     Type
  3820 ;;		None
  3821 ;; Return value:  Size  Location     Type
  3822 ;;                  1    wreg      void 
  3823 ;; Registers used:
  3824 ;;		None
  3825 ;; Tracked objects:
  3826 ;;		On entry : 0/0
  3827 ;;		On exit  : 0/0
  3828 ;;		Unchanged: 0/0
  3829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3830 ;;      Params:         0       0       0       0
  3831 ;;      Locals:         0       0       0       0
  3832 ;;      Temps:          0       0       0       0
  3833 ;;      Totals:         0       0       0       0
  3834 ;;Total ram usage:        0 bytes
  3835 ;; Hardware stack levels used:    1
  3836 ;; Hardware stack levels required when called:    6
  3837 ;; This function calls:
  3838 ;;		Nothing
  3839 ;; This function is called by:
  3840 ;;		_main
  3841 ;; This function uses a non-reentrant model
  3842 ;;
  3843                           
  3844                           	psect	text15
  3845  001E40                     __ptext15:
  3846                           	opt callstack 0
  3847  001E40                     _config_DIO:
  3848                           	opt callstack 24
  3849                           
  3850                           ;config.h: 157: ANSEL0bits.ANS0=0;
  3851                           
  3852                           ;incstack = 0
  3853  001E40  90B8               	bcf	184,0,c	;volatile
  3854                           
  3855                           ;config.h: 158: TRISAbits.RA0=0;
  3856  001E42  9092               	bcf	146,0,c	;volatile
  3857                           
  3858                           ;config.h: 160: TRISDbits.RD4=0;
  3859  001E44  9895               	bcf	149,4,c	;volatile
  3860                           
  3861                           ;config.h: 161: TRISDbits.RD5=0;
  3862  001E46  9A95               	bcf	149,5,c	;volatile
  3863                           
  3864                           ;config.h: 162: TRISDbits.RD6=0;
  3865  001E48  9C95               	bcf	149,6,c	;volatile
  3866                           
  3867                           ;config.h: 163: TRISDbits.RD7=0;
  3868  001E4A  9E95               	bcf	149,7,c	;volatile
  3869                           
  3870                           ;config.h: 164: TRISBbits.RB0=0;
  3871  001E4C  9093               	bcf	147,0,c	;volatile
  3872                           
  3873                           ;config.h: 165: TRISBbits.RB1=0;
  3874  001E4E  9293               	bcf	147,1,c	;volatile
  3875                           
  3876                           ;config.h: 166: TRISBbits.RB2=0;
  3877  001E50  9493               	bcf	147,2,c	;volatile
  3878                           
  3879                           ;config.h: 168: TRISBbits.RB3=1;
  3880  001E52  8693               	bsf	147,3,c	;volatile
  3881  001E54  0012               	return		;funcret
  3882  001E56                     __end_of_config_DIO:
  3883                           	opt callstack 0
  3884                           
  3885 ;; *************** function _configUSART *****************
  3886 ;; Defined at:
  3887 ;;		line 214 in file "config.h"
  3888 ;; Parameters:    Size  Location     Type
  3889 ;;		None
  3890 ;; Auto vars:     Size  Location     Type
  3891 ;;		None
  3892 ;; Return value:  Size  Location     Type
  3893 ;;                  1    wreg      void 
  3894 ;; Registers used:
  3895 ;;		wreg, status,2
  3896 ;; Tracked objects:
  3897 ;;		On entry : 0/0
  3898 ;;		On exit  : 0/0
  3899 ;;		Unchanged: 0/0
  3900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3901 ;;      Params:         0       0       0       0
  3902 ;;      Locals:         0       0       0       0
  3903 ;;      Temps:          0       0       0       0
  3904 ;;      Totals:         0       0       0       0
  3905 ;;Total ram usage:        0 bytes
  3906 ;; Hardware stack levels used:    1
  3907 ;; Hardware stack levels required when called:    6
  3908 ;; This function calls:
  3909 ;;		Nothing
  3910 ;; This function is called by:
  3911 ;;		_main
  3912 ;; This function uses a non-reentrant model
  3913 ;;
  3914                           
  3915                           	psect	text16
  3916  001DC2                     __ptext16:
  3917                           	opt callstack 0
  3918  001DC2                     _configUSART:
  3919                           	opt callstack 24
  3920                           
  3921                           ;config.h: 216: SPBRG=21;
  3922                           
  3923                           ;incstack = 0
  3924  001DC2  0E15               	movlw	21
  3925  001DC4  6EAF               	movwf	175,c	;volatile
  3926                           
  3927                           ;config.h: 217: BAUDCONbits.BRG16 = 0;
  3928  001DC6  96AA               	bcf	170,3,c	;volatile
  3929                           
  3930                           ;config.h: 218: TXSTAbits.BRGH = 1;
  3931  001DC8  84AC               	bsf	172,2,c	;volatile
  3932                           
  3933                           ;config.h: 219: TXSTAbits.SYNC = 0;
  3934  001DCA  98AC               	bcf	172,4,c	;volatile
  3935                           
  3936                           ;config.h: 220: RCSTAbits.SPEN = 1;
  3937  001DCC  8EAB               	bsf	171,7,c	;volatile
  3938                           
  3939                           ;config.h: 221: TXSTAbits.TXEN = 1;
  3940  001DCE  8AAC               	bsf	172,5,c	;volatile
  3941                           
  3942                           ;config.h: 223: TRISCbits.RC6 = 1;
  3943  001DD0  8C94               	bsf	148,6,c	;volatile
  3944                           
  3945                           ;config.h: 224: TRISCbits.RC7 = 1;
  3946  001DD2  8E94               	bsf	148,7,c	;volatile
  3947                           
  3948                           ;config.h: 226: RCSTAbits.CREN = 1;
  3949  001DD4  88AB               	bsf	171,4,c	;volatile
  3950                           
  3951                           ;config.h: 227: PIE1bits.RCIE = 1;
  3952  001DD6  8A9D               	bsf	157,5,c	;volatile
  3953                           
  3954                           ;config.h: 228: IPR1bits.RCIP = 0;
  3955  001DD8  9A9F               	bcf	159,5,c	;volatile
  3956  001DDA  0012               	return		;funcret
  3957  001DDC                     __end_of_configUSART:
  3958                           	opt callstack 0
  3959                           
  3960 ;; *************** function _configADC *****************
  3961 ;; Defined at:
  3962 ;;		line 231 in file "config.h"
  3963 ;; Parameters:    Size  Location     Type
  3964 ;;		None
  3965 ;; Auto vars:     Size  Location     Type
  3966 ;;		None
  3967 ;; Return value:  Size  Location     Type
  3968 ;;                  1    wreg      void 
  3969 ;; Registers used:
  3970 ;;		None
  3971 ;; Tracked objects:
  3972 ;;		On entry : 0/0
  3973 ;;		On exit  : 0/0
  3974 ;;		Unchanged: 0/0
  3975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3976 ;;      Params:         0       0       0       0
  3977 ;;      Locals:         0       0       0       0
  3978 ;;      Temps:          0       0       0       0
  3979 ;;      Totals:         0       0       0       0
  3980 ;;Total ram usage:        0 bytes
  3981 ;; Hardware stack levels used:    1
  3982 ;; Hardware stack levels required when called:    6
  3983 ;; This function calls:
  3984 ;;		Nothing
  3985 ;; This function is called by:
  3986 ;;		_main
  3987 ;; This function uses a non-reentrant model
  3988 ;;
  3989                           
  3990                           	psect	text17
  3991  001C4C                     __ptext17:
  3992                           	opt callstack 0
  3993  001C4C                     _configADC:
  3994                           	opt callstack 24
  3995                           
  3996                           ;config.h: 232: TRISEbits.RE2 = 1;
  3997                           
  3998                           ;incstack = 0
  3999  001C4C  8496               	bsf	150,2,c	;volatile
  4000                           
  4001                           ;config.h: 233: TRISAbits.RA1 = 1;
  4002  001C4E  8292               	bsf	146,1,c	;volatile
  4003                           
  4004                           ;config.h: 235: ANSEL0bits.ANS1 = 1;
  4005  001C50  82B8               	bsf	184,1,c	;volatile
  4006                           
  4007                           ;config.h: 236: ANSEL1bits.ANS8 = 1;
  4008  001C52  80B9               	bsf	185,0,c	;volatile
  4009                           
  4010                           ;config.h: 239: ADCHSbits.GASEL1 = 1;
  4011  001C54  8299               	bsf	153,1,c	;volatile
  4012                           
  4013                           ;config.h: 240: ADCHSbits.GASEL0 = 0;
  4014  001C56  9099               	bcf	153,0,c	;volatile
  4015                           
  4016                           ;config.h: 242: ADCHSbits.GBSEL1 = 0;
  4017  001C58  9A99               	bcf	153,5,c	;volatile
  4018                           
  4019                           ;config.h: 243: ADCHSbits.GBSEL0 = 0;
  4020  001C5A  9899               	bcf	153,4,c	;volatile
  4021                           
  4022                           ;config.h: 246: ADCON0bits.ACONV = 0;
  4023  001C5C  9AC2               	bcf	194,5,c	;volatile
  4024                           
  4025                           ;config.h: 247: ADCON0bits.ACSCH = 1;
  4026  001C5E  88C2               	bsf	194,4,c	;volatile
  4027                           
  4028                           ;config.h: 248: ADCON0bits.ACMOD1 = 1;
  4029  001C60  86C2               	bsf	194,3,c	;volatile
  4030                           
  4031                           ;config.h: 249: ADCON0bits.ACMOD0 = 0;
  4032  001C62  94C2               	bcf	194,2,c	;volatile
  4033                           
  4034                           ;config.h: 252: ADCON1bits.VCFG1 = 0;
  4035  001C64  9EC1               	bcf	193,7,c	;volatile
  4036                           
  4037                           ;config.h: 253: ADCON1bits.VCFG0 = 0;
  4038  001C66  9CC1               	bcf	193,6,c	;volatile
  4039                           
  4040                           ;config.h: 254: ADCON1bits.FIFOEN = 1;
  4041  001C68  88C1               	bsf	193,4,c	;volatile
  4042                           
  4043                           ;config.h: 257: ADCON2bits.ADFM = 1;
  4044  001C6A  8EC0               	bsf	192,7,c	;volatile
  4045                           
  4046                           ;config.h: 258: ADCON2bits.ACQT3 = 0;
  4047  001C6C  9CC0               	bcf	192,6,c	;volatile
  4048                           
  4049                           ;config.h: 259: ADCON2bits.ACQT2 = 0;
  4050  001C6E  9AC0               	bcf	192,5,c	;volatile
  4051                           
  4052                           ;config.h: 260: ADCON2bits.ACQT1 = 0;
  4053  001C70  98C0               	bcf	192,4,c	;volatile
  4054                           
  4055                           ;config.h: 261: ADCON2bits.ACQT0 = 0;
  4056  001C72  96C0               	bcf	192,3,c	;volatile
  4057                           
  4058                           ;config.h: 262: ADCON2bits.ADCS2 = 0;
  4059  001C74  94C0               	bcf	192,2,c	;volatile
  4060                           
  4061                           ;config.h: 263: ADCON2bits.ADCS1 = 1;
  4062  001C76  82C0               	bsf	192,1,c	;volatile
  4063                           
  4064                           ;config.h: 264: ADCON2bits.ADCS0 = 0;
  4065  001C78  90C0               	bcf	192,0,c	;volatile
  4066                           
  4067                           ;config.h: 265: ADCON0bits.ADON = 1;
  4068  001C7A  80C2               	bsf	194,0,c	;volatile
  4069  001C7C  0012               	return		;funcret
  4070  001C7E                     __end_of_configADC:
  4071                           	opt callstack 0
  4072                           
  4073 ;; *************** function _conditionRelax *****************
  4074 ;; Defined at:
  4075 ;;		line 588 in file "mylib.h"
  4076 ;; Parameters:    Size  Location     Type
  4077 ;;  closingState    2    0[BANK1 ] unsigned int 
  4078 ;; Auto vars:     Size  Location     Type
  4079 ;;  conditionMet    1    4[BANK1 ] unsigned char 
  4080 ;;  motorID         1    0        unsigned char 
  4081 ;; Return value:  Size  Location     Type
  4082 ;;                  1    wreg      unsigned char 
  4083 ;; Registers used:
  4084 ;;		wreg, status,2, status,0
  4085 ;; Tracked objects:
  4086 ;;		On entry : 3F/1
  4087 ;;		On exit  : 3F/1
  4088 ;;		Unchanged: 0/0
  4089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4090 ;;      Params:         0       0       2       0
  4091 ;;      Locals:         0       0       1       0
  4092 ;;      Temps:          0       0       2       0
  4093 ;;      Totals:         0       0       5       0
  4094 ;;Total ram usage:        5 bytes
  4095 ;; Hardware stack levels used:    1
  4096 ;; Hardware stack levels required when called:    6
  4097 ;; This function calls:
  4098 ;;		Nothing
  4099 ;; This function is called by:
  4100 ;;		_main
  4101 ;; This function uses a non-reentrant model
  4102 ;;
  4103                           
  4104                           	psect	text18
  4105  001548                     __ptext18:
  4106                           	opt callstack 0
  4107  001548                     _conditionRelax:
  4108                           	opt callstack 24
  4109                           
  4110                           ; BSR set to: 1
  4111                           ;mylib.h: 589: unsigned char conditionMet;;mylib.h: 590: unsigned char motorID;;mylib.h:
      +                           591: switch(closingState){
  4112                           
  4113                           ;incstack = 0
  4114  001548  D029               	goto	l4880
  4115  00154A                     l4850:
  4116                           
  4117                           ; BSR set to: 1
  4118                           ;mylib.h: 593: if (Pos[0] <= PrePos0[0] && Pos[1] <= PrePos0[1] && Pos[2] <= PrePos0[2] 
      +                          && Pos[3] <= PrePos0[3] && Pos[4] <= PrePos0[4]) conditionMet=1;
  4119  00154A  0100               	movlb	0	; () banked
  4120  00154C  5192               	movf	_Pos& (0+255),w,b
  4121  00154E  5DB7               	subwf	_PrePos0& (0+255),w,b
  4122  001550  A0D8               	btfss	status,0,c
  4123  001552  D012               	goto	l4862
  4124                           
  4125                           ; BSR set to: 0
  4126  001554  5193               	movf	(_Pos+1)& (0+255),w,b
  4127  001556  5DB8               	subwf	(_PrePos0+1)& (0+255),w,b
  4128  001558  A0D8               	btfss	status,0,c
  4129  00155A  D00E               	goto	l4862
  4130                           
  4131                           ; BSR set to: 0
  4132  00155C  5194               	movf	(_Pos+2)& (0+255),w,b
  4133  00155E  5DB9               	subwf	(_PrePos0+2)& (0+255),w,b
  4134  001560  A0D8               	btfss	status,0,c
  4135  001562  D00A               	goto	l4862
  4136                           
  4137                           ; BSR set to: 0
  4138  001564  5195               	movf	(_Pos+3)& (0+255),w,b
  4139  001566  5DBA               	subwf	(_PrePos0+3)& (0+255),w,b
  4140  001568  A0D8               	btfss	status,0,c
  4141  00156A  D006               	goto	l4862
  4142                           
  4143                           ; BSR set to: 0
  4144  00156C  5196               	movf	(_Pos+4)& (0+255),w,b
  4145  00156E  5DBB               	subwf	(_PrePos0+4)& (0+255),w,b
  4146  001570  A0D8               	btfss	status,0,c
  4147  001572  D002               	goto	l4862
  4148  001574                     u5020:
  4149                           
  4150                           ; BSR set to: 0
  4151  001574  0E01               	movlw	1
  4152  001576  D001               	goto	L22
  4153  001578                     l4862:
  4154                           
  4155                           ; BSR set to: 0
  4156                           ;mylib.h: 594: else conditionMet = 0;
  4157  001578  0E00               	movlw	0
  4158  00157A                     L22:
  4159  00157A  0101               	movlb	1	; () banked
  4160  00157C  6F36               	movwf	conditionRelax@conditionMet& (0+255),b
  4161  00157E  D020               	goto	l4882
  4162  001580                     l4864:
  4163                           
  4164                           ; BSR set to: 1
  4165                           ;mylib.h: 597: if (Pos[1] <= PrePos2[1]) conditionMet=1;
  4166  001580  0100               	movlb	0	; () banked
  4167  001582  5193               	movf	(_Pos+1)& (0+255),w,b
  4168  001584  5DB3               	subwf	(_PrePos2+1)& (0+255),w,b
  4169  001586  B0D8               	btfsc	status,0,c
  4170  001588  D7F5               	goto	u5020
  4171  00158A  D7F6               	goto	l4862
  4172  00158C                     l4870:
  4173                           
  4174                           ; BSR set to: 1
  4175                           ;mylib.h: 601: if (Pos[1] <= PrePos4[1] && Pos[2] <= PrePos4[2]) conditionMet=1;
  4176  00158C  0100               	movlb	0	; () banked
  4177  00158E  5193               	movf	(_Pos+1)& (0+255),w,b
  4178  001590  5DAE               	subwf	(_PrePos4+1)& (0+255),w,b
  4179  001592  A0D8               	btfss	status,0,c
  4180  001594  D7F1               	goto	l4862
  4181                           
  4182                           ; BSR set to: 0
  4183  001596  5194               	movf	(_Pos+2)& (0+255),w,b
  4184  001598  5DAF               	subwf	(_PrePos4+2)& (0+255),w,b
  4185  00159A  D7F5               	goto	L23
  4186  00159C                     l4880:
  4187                           
  4188                           ; BSR set to: 1
  4189  00159C  C132  F134         	movff	conditionRelax@closingState,??_conditionRelax
  4190  0015A0  C133  F135         	movff	conditionRelax@closingState+1,??_conditionRelax+1
  4191                           
  4192                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4193                           ; Switch size 1, requested type "simple"
  4194                           ; Number of cases is 1, Range of values is 0 to 0
  4195                           ; switch strategies available:
  4196                           ; Name         Instructions Cycles
  4197                           ; simple_byte            4     3 (average)
  4198                           ;	Chosen strategy is simple_byte
  4199  0015A4  5135               	movf	(??_conditionRelax+1)& (0+255),w,b
  4200  0015A6  0A00               	xorlw	0	; case 0
  4201  0015A8  A4D8               	btfss	status,2,c
  4202  0015AA  D00A               	goto	l4882
  4203                           
  4204                           ; BSR set to: 1
  4205                           ; Switch size 1, requested type "simple"
  4206                           ; Number of cases is 3, Range of values is 1 to 5
  4207                           ; switch strategies available:
  4208                           ; Name         Instructions Cycles
  4209                           ; simple_byte           10     6 (average)
  4210                           ;	Chosen strategy is simple_byte
  4211  0015AC  5134               	movf	??_conditionRelax& (0+255),w,b
  4212  0015AE  0A01               	xorlw	1	; case 1
  4213  0015B0  B4D8               	btfsc	status,2,c
  4214  0015B2  D7CB               	goto	l4850
  4215  0015B4  0A02               	xorlw	2	; case 3
  4216  0015B6  B4D8               	btfsc	status,2,c
  4217  0015B8  D7E3               	goto	l4864
  4218  0015BA  0A06               	xorlw	6	; case 5
  4219  0015BC  B4D8               	btfsc	status,2,c
  4220  0015BE  D7E6               	goto	l4870
  4221  0015C0                     l4882:
  4222                           
  4223                           ; BSR set to: 1
  4224                           ;mylib.h: 605: return conditionMet;
  4225  0015C0  5136               	movf	conditionRelax@conditionMet& (0+255),w,b
  4226                           
  4227                           ; BSR set to: 1
  4228  0015C2  0012               	return		;funcret
  4229  0015C4                     __end_of_conditionRelax:
  4230                           	opt callstack 0
  4231                           
  4232 ;; *************** function _blinkDisplayLetterC *****************
  4233 ;; Defined at:
  4234 ;;		line 180 in file "mylib.h"
  4235 ;; Parameters:    Size  Location     Type
  4236 ;;		None
  4237 ;; Auto vars:     Size  Location     Type
  4238 ;;  blinkLimit      2    0        unsigned int 
  4239 ;; Return value:  Size  Location     Type
  4240 ;;                  1    wreg      void 
  4241 ;; Registers used:
  4242 ;;		wreg, status,2, status,0, cstack
  4243 ;; Tracked objects:
  4244 ;;		On entry : 0/1
  4245 ;;		On exit  : 3F/1
  4246 ;;		Unchanged: 0/0
  4247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4248 ;;      Params:         0       0       0       0
  4249 ;;      Locals:         0       0       2       0
  4250 ;;      Temps:          0       0       0       0
  4251 ;;      Totals:         0       0       2       0
  4252 ;;Total ram usage:        2 bytes
  4253 ;; Hardware stack levels used:    1
  4254 ;; Hardware stack levels required when called:    8
  4255 ;; This function calls:
  4256 ;;		_Display_letter
  4257 ;;		_Reset_segments
  4258 ;;		___lwmod
  4259 ;; This function is called by:
  4260 ;;		_main
  4261 ;; This function uses a non-reentrant model
  4262 ;;
  4263                           
  4264                           	psect	text19
  4265  0019D0                     __ptext19:
  4266                           	opt callstack 0
  4267  0019D0                     _blinkDisplayLetterC:
  4268                           	opt callstack 22
  4269                           
  4270                           ;mylib.h: 182: if(blinkCount < blinkLimit) Reset_segments();
  4271                           
  4272                           ; BSR set to: 1
  4273                           ;incstack = 0
  4274  0019D0  0100               	movlb	0	; () banked
  4275  0019D2  519B               	movf	(_blinkCount+1)& (0+255),w,b
  4276  0019D4  E106               	bnz	l4536
  4277  0019D6  299A               	incf	_blinkCount& (0+255),w,b
  4278  0019D8  B0D8               	btfsc	status,0,c
  4279  0019DA  D003               	goto	l4536
  4280                           
  4281                           ; BSR set to: 0
  4282  0019DC  EC34  F00F         	call	_Reset_segments	;wreg free
  4283  0019E0  D009               	goto	l4540
  4284  0019E2                     l4536:
  4285                           
  4286                           ; BSR set to: 0
  4287                           ;mylib.h: 183: else if(blinkCount < 2*blinkLimit) Display_letter('C');
  4288  0019E2  0EFE               	movlw	254
  4289  0019E4  5D9A               	subwf	_blinkCount& (0+255),w,b
  4290  0019E6  0E01               	movlw	1
  4291  0019E8  599B               	subwfb	(_blinkCount+1)& (0+255),w,b
  4292  0019EA  B0D8               	btfsc	status,0,c
  4293  0019EC  D003               	goto	l4540
  4294                           
  4295                           ; BSR set to: 0
  4296  0019EE  0E43               	movlw	67
  4297  0019F0  EC30  F007         	call	_Display_letter
  4298  0019F4                     l4540:
  4299                           
  4300                           ;mylib.h: 184: blinkCount++;
  4301  0019F4  0100               	movlb	0	; () banked
  4302  0019F6  4B9A               	infsnz	_blinkCount& (0+255),f,b
  4303  0019F8  2B9B               	incf	(_blinkCount+1)& (0+255),f,b
  4304                           
  4305                           ; BSR set to: 0
  4306                           ;mylib.h: 185: blinkCount = blinkCount % (2*blinkLimit);
  4307  0019FA  C09A  F132         	movff	_blinkCount,___lwmod@dividend
  4308  0019FE  C09B  F133         	movff	_blinkCount+1,___lwmod@dividend+1
  4309  001A02  0E01               	movlw	1
  4310  001A04  0101               	movlb	1	; () banked
  4311  001A06  6F35               	movwf	(___lwmod@divisor+1)& (0+255),b
  4312  001A08  0EFE               	movlw	254
  4313  001A0A  6F34               	movwf	___lwmod@divisor& (0+255),b
  4314  001A0C  EC95  F00D         	call	___lwmod	;wreg free
  4315  001A10  C132  F09A         	movff	?___lwmod,_blinkCount
  4316  001A14  C133  F09B         	movff	?___lwmod+1,_blinkCount+1
  4317                           
  4318                           ; BSR set to: 1
  4319  001A18  0012               	return		;funcret
  4320  001A1A                     __end_of_blinkDisplayLetterC:
  4321                           	opt callstack 0
  4322                           
  4323 ;; *************** function _Display_letter *****************
  4324 ;; Defined at:
  4325 ;;		line 153 in file "mylib.h"
  4326 ;; Parameters:    Size  Location     Type
  4327 ;;  letter          1    wreg     unsigned char 
  4328 ;; Auto vars:     Size  Location     Type
  4329 ;;  letter          1    2[BANK1 ] unsigned char 
  4330 ;; Return value:  Size  Location     Type
  4331 ;;                  1    wreg      void 
  4332 ;; Registers used:
  4333 ;;		wreg, status,2, status,0, cstack
  4334 ;; Tracked objects:
  4335 ;;		On entry : 3E/1
  4336 ;;		On exit  : 0/0
  4337 ;;		Unchanged: 0/0
  4338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4339 ;;      Params:         0       0       0       0
  4340 ;;      Locals:         0       0       1       0
  4341 ;;      Temps:          0       0       0       0
  4342 ;;      Totals:         0       0       1       0
  4343 ;;Total ram usage:        1 bytes
  4344 ;; Hardware stack levels used:    1
  4345 ;; Hardware stack levels required when called:    7
  4346 ;; This function calls:
  4347 ;;		_Display_segment
  4348 ;;		_Reset_segments
  4349 ;; This function is called by:
  4350 ;;		_blinkDisplayLetterC
  4351 ;;		_main
  4352 ;; This function uses a non-reentrant model
  4353 ;;
  4354                           
  4355                           	psect	text20
  4356  000E60                     __ptext20:
  4357                           	opt callstack 0
  4358  000E60                     _Display_letter:
  4359                           	opt callstack 22
  4360                           
  4361                           ; BSR set to: 1
  4362                           ;incstack = 0
  4363                           ;Display_letter@letter stored from wreg
  4364  000E60  0101               	movlb	1	; () banked
  4365  000E62  6F34               	movwf	Display_letter@letter& (0+255),b
  4366                           
  4367                           ;mylib.h: 154: Reset_segments();
  4368  000E64  EC34  F00F         	call	_Reset_segments	;wreg free
  4369                           
  4370                           ;mylib.h: 155: switch(letter){
  4371  000E68  D054               	goto	l4270
  4372  000E6A                     l4262:
  4373                           
  4374                           ; BSR set to: 1
  4375                           ;mylib.h: 157: Display_segment(1,1);
  4376  000E6A  0E01               	movlw	1
  4377  000E6C  6F32               	movwf	Display_segment@on_off& (0+255),b
  4378  000E6E  0E01               	movlw	1
  4379  000E70  ECDD  F009         	call	_Display_segment
  4380                           
  4381                           ;mylib.h: 158: Display_segment(3,1);
  4382  000E74  0E01               	movlw	1
  4383  000E76  0101               	movlb	1	; () banked
  4384  000E78  6F32               	movwf	Display_segment@on_off& (0+255),b
  4385  000E7A  0E03               	movlw	3
  4386  000E7C  ECDD  F009         	call	_Display_segment
  4387                           
  4388                           ;mylib.h: 159: Display_segment(4,1);
  4389  000E80  0E01               	movlw	1
  4390  000E82  0101               	movlb	1	; () banked
  4391  000E84  6F32               	movwf	Display_segment@on_off& (0+255),b
  4392  000E86  0E04               	movlw	4
  4393  000E88  ECDD  F009         	call	_Display_segment
  4394                           
  4395                           ;mylib.h: 160: Display_segment(6,1);
  4396  000E8C  0E01               	movlw	1
  4397  000E8E  0101               	movlb	1	; () banked
  4398  000E90  6F32               	movwf	Display_segment@on_off& (0+255),b
  4399  000E92  0E06               	movlw	6
  4400  000E94  ECDD  F009         	call	_Display_segment
  4401                           
  4402                           ;mylib.h: 161: Display_segment(7,1);
  4403  000E98  0E01               	movlw	1
  4404  000E9A  0101               	movlb	1	; () banked
  4405  000E9C  6F32               	movwf	Display_segment@on_off& (0+255),b
  4406  000E9E  0E07               	movlw	7
  4407  000EA0  ECDD  F009         	call	_Display_segment
  4408                           
  4409                           ;mylib.h: 162: break;
  4410  000EA4  0012               	return	
  4411  000EA6                     l4264:
  4412                           
  4413                           ; BSR set to: 1
  4414                           ;mylib.h: 164: Display_segment(1,1);
  4415  000EA6  0E01               	movlw	1
  4416  000EA8  6F32               	movwf	Display_segment@on_off& (0+255),b
  4417  000EAA  0E01               	movlw	1
  4418  000EAC  ECDD  F009         	call	_Display_segment
  4419                           
  4420                           ;mylib.h: 165: Display_segment(2,1);
  4421  000EB0  0E01               	movlw	1
  4422  000EB2  0101               	movlb	1	; () banked
  4423  000EB4  6F32               	movwf	Display_segment@on_off& (0+255),b
  4424  000EB6  0E02               	movlw	2
  4425  000EB8  ECDD  F009         	call	_Display_segment
  4426                           
  4427                           ;mylib.h: 166: Display_segment(5,1);
  4428  000EBC  0E01               	movlw	1
  4429  000EBE  0101               	movlb	1	; () banked
  4430  000EC0  6F32               	movwf	Display_segment@on_off& (0+255),b
  4431  000EC2  0E05               	movlw	5
  4432  000EC4  ECDD  F009         	call	_Display_segment
  4433                           
  4434                           ;mylib.h: 167: Display_segment(6,1);
  4435  000EC8  0E01               	movlw	1
  4436  000ECA  0101               	movlb	1	; () banked
  4437  000ECC  6F32               	movwf	Display_segment@on_off& (0+255),b
  4438  000ECE  0E06               	movlw	6
  4439  000ED0  ECDD  F009         	call	_Display_segment
  4440                           
  4441                           ;mylib.h: 168: Display_segment(7,1);
  4442  000ED4  0E01               	movlw	1
  4443  000ED6  0101               	movlb	1	; () banked
  4444  000ED8  6F32               	movwf	Display_segment@on_off& (0+255),b
  4445  000EDA  0E07               	movlw	7
  4446  000EDC  ECDD  F009         	call	_Display_segment
  4447                           
  4448                           ;mylib.h: 169: break;
  4449  000EE0  0012               	return	
  4450  000EE2                     l4266:
  4451                           
  4452                           ; BSR set to: 1
  4453                           ;mylib.h: 171: Display_segment(1,1);
  4454  000EE2  0E01               	movlw	1
  4455  000EE4  6F32               	movwf	Display_segment@on_off& (0+255),b
  4456  000EE6  0E01               	movlw	1
  4457  000EE8  ECDD  F009         	call	_Display_segment
  4458                           
  4459                           ;mylib.h: 172: Display_segment(2,1);
  4460  000EEC  0E01               	movlw	1
  4461  000EEE  0101               	movlb	1	; () banked
  4462  000EF0  6F32               	movwf	Display_segment@on_off& (0+255),b
  4463  000EF2  0E02               	movlw	2
  4464  000EF4  ECDD  F009         	call	_Display_segment
  4465                           
  4466                           ;mylib.h: 173: Display_segment(5,1);
  4467  000EF8  0E01               	movlw	1
  4468  000EFA  0101               	movlb	1	; () banked
  4469  000EFC  6F32               	movwf	Display_segment@on_off& (0+255),b
  4470  000EFE  0E05               	movlw	5
  4471  000F00  ECDD  F009         	call	_Display_segment
  4472                           
  4473                           ;mylib.h: 174: Display_segment(6,1);
  4474  000F04  0E01               	movlw	1
  4475  000F06  0101               	movlb	1	; () banked
  4476  000F08  6F32               	movwf	Display_segment@on_off& (0+255),b
  4477  000F0A  0E06               	movlw	6
  4478  000F0C  ECDD  F009         	call	_Display_segment
  4479                           
  4480                           ;mylib.h: 175: break;
  4481  000F10  0012               	return	
  4482  000F12                     l4270:
  4483  000F12  0101               	movlb	1	; () banked
  4484  000F14  5134               	movf	Display_letter@letter& (0+255),w,b
  4485                           
  4486                           ; Switch size 1, requested type "simple"
  4487                           ; Number of cases is 3, Range of values is 67 to 72
  4488                           ; switch strategies available:
  4489                           ; Name         Instructions Cycles
  4490                           ; simple_byte           10     6 (average)
  4491                           ;	Chosen strategy is simple_byte
  4492  000F16  0A43               	xorlw	67	; case 67
  4493  000F18  B4D8               	btfsc	status,2,c
  4494  000F1A  D7E3               	goto	l4266
  4495  000F1C  0A06               	xorlw	6	; case 69
  4496  000F1E  B4D8               	btfsc	status,2,c
  4497  000F20  D7C2               	goto	l4264
  4498  000F22  0A0D               	xorlw	13	; case 72
  4499  000F24  A4D8               	btfss	status,2,c
  4500  000F26  0012               	return	
  4501  000F28  D7A0               	goto	l4262
  4502  000F2A                     __end_of_Display_letter:
  4503                           	opt callstack 0
  4504                           
  4505 ;; *************** function _adjustEEPROMdata *****************
  4506 ;; Defined at:
  4507 ;;		line 371 in file "mylib.h"
  4508 ;; Parameters:    Size  Location     Type
  4509 ;;  type            1    wreg     unsigned char 
  4510 ;;  data            1    0[BANK1 ] unsigned char 
  4511 ;; Auto vars:     Size  Location     Type
  4512 ;;  type            1    1[BANK1 ] unsigned char 
  4513 ;;  value           1    4[BANK1 ] unsigned char 
  4514 ;;  defVal_mv       1    3[BANK1 ] unsigned char 
  4515 ;;  defVal_th       1    0        unsigned char 
  4516 ;; Return value:  Size  Location     Type
  4517 ;;                  1    wreg      unsigned char 
  4518 ;; Registers used:
  4519 ;;		wreg, status,2, status,0
  4520 ;; Tracked objects:
  4521 ;;		On entry : 0/0
  4522 ;;		On exit  : 3F/1
  4523 ;;		Unchanged: 0/0
  4524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4525 ;;      Params:         0       0       1       0
  4526 ;;      Locals:         0       0       4       0
  4527 ;;      Temps:          0       0       0       0
  4528 ;;      Totals:         0       0       5       0
  4529 ;;Total ram usage:        5 bytes
  4530 ;; Hardware stack levels used:    1
  4531 ;; Hardware stack levels required when called:    6
  4532 ;; This function calls:
  4533 ;;		Nothing
  4534 ;; This function is called by:
  4535 ;;		_main
  4536 ;; This function uses a non-reentrant model
  4537 ;;
  4538                           
  4539                           	psect	text21
  4540  001C18                     __ptext21:
  4541                           	opt callstack 0
  4542  001C18                     _adjustEEPROMdata:
  4543                           	opt callstack 24
  4544                           
  4545                           ;incstack = 0
  4546                           ;adjustEEPROMdata@type stored from wreg
  4547  001C18  0101               	movlb	1	; () banked
  4548  001C1A  6F33               	movwf	adjustEEPROMdata@type& (0+255),b
  4549                           
  4550                           ;mylib.h: 379: unsigned char defVal_mv = 100;
  4551  001C1C  0E64               	movlw	100
  4552  001C1E  0101               	movlb	1	; () banked
  4553  001C20  6F35               	movwf	adjustEEPROMdata@defVal_mv& (0+255),b
  4554                           
  4555                           ; BSR set to: 1
  4556                           ;mylib.h: 380: if(data == 255){
  4557  001C22  2932               	incf	adjustEEPROMdata@data& (0+255),w,b
  4558  001C24  B4D8               	btfsc	status,2,c
  4559  001C26  D006               	goto	l4646
  4560  001C28  D00D               	goto	l216
  4561  001C2A                     l218:
  4562                           
  4563                           ; BSR set to: 1
  4564                           ;mylib.h: 383: value = defVal_th;
  4565  001C2A  0E32               	movlw	50
  4566  001C2C  D001               	goto	L24
  4567  001C2E                     l220:
  4568                           
  4569                           ; BSR set to: 1
  4570                           ;mylib.h: 386: value = defVal_mv;
  4571  001C2E  0E64               	movlw	100
  4572  001C30                     L24:
  4573  001C30  6F36               	movwf	adjustEEPROMdata@value& (0+255),b
  4574                           
  4575                           ;mylib.h: 387: break;
  4576  001C32  D00A               	goto	l4648
  4577  001C34                     l4646:
  4578                           
  4579                           ; BSR set to: 1
  4580  001C34  5133               	movf	adjustEEPROMdata@type& (0+255),w,b
  4581                           
  4582                           ; Switch size 1, requested type "simple"
  4583                           ; Number of cases is 2, Range of values is 77 to 84
  4584                           ; switch strategies available:
  4585                           ; Name         Instructions Cycles
  4586                           ; simple_byte            7     4 (average)
  4587                           ;	Chosen strategy is simple_byte
  4588  001C36  0A4D               	xorlw	77	; case 77
  4589  001C38  B4D8               	btfsc	status,2,c
  4590  001C3A  D7F9               	goto	l220
  4591  001C3C  0A19               	xorlw	25	; case 84
  4592  001C3E  B4D8               	btfsc	status,2,c
  4593  001C40  D7F4               	goto	l218
  4594  001C42  D002               	goto	l4648
  4595  001C44                     l216:
  4596                           
  4597                           ; BSR set to: 1
  4598  001C44  C132  F136         	movff	adjustEEPROMdata@data,adjustEEPROMdata@value
  4599  001C48                     l4648:
  4600                           
  4601                           ; BSR set to: 1
  4602                           ;mylib.h: 391: return value;
  4603  001C48  5136               	movf	adjustEEPROMdata@value& (0+255),w,b
  4604                           
  4605                           ; BSR set to: 1
  4606  001C4A  0012               	return		;funcret
  4607  001C4C                     __end_of_adjustEEPROMdata:
  4608                           	opt callstack 0
  4609                           
  4610 ;; *************** function _absFunc *****************
  4611 ;; Defined at:
  4612 ;;		line 439 in file "mylib.h"
  4613 ;; Parameters:    Size  Location     Type
  4614 ;;  A               2    0[BANK1 ] unsigned int 
  4615 ;;  B               2    2[BANK1 ] unsigned int 
  4616 ;; Auto vars:     Size  Location     Type
  4617 ;;  result          2    4[BANK1 ] unsigned int 
  4618 ;; Return value:  Size  Location     Type
  4619 ;;                  2    0[BANK1 ] unsigned int 
  4620 ;; Registers used:
  4621 ;;		wreg, status,2, status,0
  4622 ;; Tracked objects:
  4623 ;;		On entry : 3F/1
  4624 ;;		On exit  : 3F/1
  4625 ;;		Unchanged: 0/0
  4626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4627 ;;      Params:         0       0       4       0
  4628 ;;      Locals:         0       0       2       0
  4629 ;;      Temps:          0       0       0       0
  4630 ;;      Totals:         0       0       6       0
  4631 ;;Total ram usage:        6 bytes
  4632 ;; Hardware stack levels used:    1
  4633 ;; Hardware stack levels required when called:    6
  4634 ;; This function calls:
  4635 ;;		Nothing
  4636 ;; This function is called by:
  4637 ;;		_main
  4638 ;; This function uses a non-reentrant model
  4639 ;;
  4640                           
  4641                           	psect	text22
  4642  001A5E                     __ptext22:
  4643                           	opt callstack 0
  4644  001A5E                     _absFunc:
  4645                           	opt callstack 24
  4646                           
  4647                           ; BSR set to: 1
  4648                           ;mylib.h: 440: unsigned int result;;mylib.h: 441: if(A > B) result = A - B;
  4649                           
  4650                           ; BSR set to: 1
  4651                           ;incstack = 0
  4652  001A5E  5132               	movf	absFunc@A& (0+255),w,b
  4653  001A60  5D34               	subwf	absFunc@B& (0+255),w,b
  4654  001A62  5133               	movf	(absFunc@A+1)& (0+255),w,b
  4655  001A64  5935               	subwfb	(absFunc@B+1)& (0+255),w,b
  4656  001A66  B0D8               	btfsc	status,0,c
  4657  001A68  D006               	goto	l4690
  4658                           
  4659                           ; BSR set to: 1
  4660  001A6A  5134               	movf	absFunc@B& (0+255),w,b
  4661  001A6C  5D32               	subwf	absFunc@A& (0+255),w,b
  4662  001A6E  6F36               	movwf	absFunc@result& (0+255),b
  4663  001A70  5135               	movf	(absFunc@B+1)& (0+255),w,b
  4664  001A72  5933               	subwfb	(absFunc@A+1)& (0+255),w,b
  4665  001A74  D00B               	goto	L25
  4666  001A76                     l4690:
  4667                           
  4668                           ; BSR set to: 1
  4669                           ;mylib.h: 442: else if(A < B) result = B - A;
  4670  001A76  5134               	movf	absFunc@B& (0+255),w,b
  4671  001A78  5D32               	subwf	absFunc@A& (0+255),w,b
  4672  001A7A  5135               	movf	(absFunc@B+1)& (0+255),w,b
  4673  001A7C  5933               	subwfb	(absFunc@A+1)& (0+255),w,b
  4674  001A7E  B0D8               	btfsc	status,0,c
  4675  001A80  D007               	goto	l4694
  4676                           
  4677                           ; BSR set to: 1
  4678  001A82  5132               	movf	absFunc@A& (0+255),w,b
  4679  001A84  5D34               	subwf	absFunc@B& (0+255),w,b
  4680  001A86  6F36               	movwf	absFunc@result& (0+255),b
  4681  001A88  5133               	movf	(absFunc@A+1)& (0+255),w,b
  4682  001A8A  5935               	subwfb	(absFunc@B+1)& (0+255),w,b
  4683  001A8C                     L25:
  4684  001A8C  6F37               	movwf	(absFunc@result+1)& (0+255),b
  4685  001A8E  D004               	goto	l4696
  4686  001A90                     l4694:
  4687                           
  4688                           ; BSR set to: 1
  4689                           ;mylib.h: 443: else result = 0;
  4690  001A90  0E00               	movlw	0
  4691  001A92  6F37               	movwf	(absFunc@result+1)& (0+255),b
  4692  001A94  0E00               	movlw	0
  4693  001A96  6F36               	movwf	absFunc@result& (0+255),b
  4694  001A98                     l4696:
  4695                           
  4696                           ; BSR set to: 1
  4697                           ;mylib.h: 444: return result;
  4698  001A98  C136  F132         	movff	absFunc@result,?_absFunc
  4699  001A9C  C137  F133         	movff	absFunc@result+1,?_absFunc+1
  4700                           
  4701                           ; BSR set to: 1
  4702  001AA0  0012               	return		;funcret
  4703  001AA2                     __end_of_absFunc:
  4704                           	opt callstack 0
  4705                           
  4706 ;; *************** function _GraspPreshape *****************
  4707 ;; Defined at:
  4708 ;;		line 518 in file "mylib.h"
  4709 ;; Parameters:    Size  Location     Type
  4710 ;;  preshapeStat    1    wreg     unsigned char 
  4711 ;; Auto vars:     Size  Location     Type
  4712 ;;  preshapeStat    1   13[BANK1 ] unsigned char 
  4713 ;; Return value:  Size  Location     Type
  4714 ;;                  1    wreg      void 
  4715 ;; Registers used:
  4716 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4717 ;; Tracked objects:
  4718 ;;		On entry : 3F/1
  4719 ;;		On exit  : 3F/1
  4720 ;;		Unchanged: 0/0
  4721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4722 ;;      Params:         0       0       0       0
  4723 ;;      Locals:         0       0       1       0
  4724 ;;      Temps:          0       0       0       0
  4725 ;;      Totals:         0       0       1       0
  4726 ;;Total ram usage:        1 bytes
  4727 ;; Hardware stack levels used:    1
  4728 ;; Hardware stack levels required when called:   11
  4729 ;; This function calls:
  4730 ;;		_sendUSART
  4731 ;;		_waitHandReached
  4732 ;; This function is called by:
  4733 ;;		_main
  4734 ;; This function uses a non-reentrant model
  4735 ;;
  4736                           
  4737                           	psect	text23
  4738  001088                     __ptext23:
  4739                           	opt callstack 0
  4740  001088                     _GraspPreshape:
  4741                           	opt callstack 19
  4742                           
  4743                           ; BSR set to: 1
  4744                           ;incstack = 0
  4745                           ;GraspPreshape@preshapeState stored from wreg
  4746  001088  6F3F               	movwf	GraspPreshape@preshapeState& (0+255),b
  4747                           
  4748                           ;mylib.h: 519: sendUSART(0x48);
  4749  00108A  0E48               	movlw	72
  4750  00108C  EC5B  F00F         	call	_sendUSART
  4751                           
  4752                           ;mylib.h: 520: switch (preshapeState){
  4753  001090  D03F               	goto	l4732
  4754  001092                     l4724:
  4755                           
  4756                           ; BSR set to: 1
  4757                           ;mylib.h: 522: sendUSART(PrePos0[0]);
  4758  001092  0100               	movlb	0	; () banked
  4759  001094  51B7               	movf	_PrePos0& (0+255),w,b
  4760  001096  EC5B  F00F         	call	_sendUSART
  4761                           
  4762                           ;mylib.h: 523: sendUSART(PrePos0[1]);
  4763  00109A  0100               	movlb	0	; () banked
  4764  00109C  51B8               	movf	(_PrePos0+1)& (0+255),w,b
  4765  00109E  EC5B  F00F         	call	_sendUSART
  4766                           
  4767                           ;mylib.h: 524: sendUSART(PrePos0[2]);
  4768  0010A2  0100               	movlb	0	; () banked
  4769  0010A4  51B9               	movf	(_PrePos0+2)& (0+255),w,b
  4770  0010A6  EC5B  F00F         	call	_sendUSART
  4771                           
  4772                           ;mylib.h: 525: sendUSART(PrePos0[3]);
  4773  0010AA  0100               	movlb	0	; () banked
  4774  0010AC  51BA               	movf	(_PrePos0+3)& (0+255),w,b
  4775  0010AE  EC5B  F00F         	call	_sendUSART
  4776                           
  4777                           ;mylib.h: 526: sendUSART(PrePos0[4]);
  4778  0010B2  0100               	movlb	0	; () banked
  4779  0010B4  51BB               	movf	(_PrePos0+4)& (0+255),w,b
  4780  0010B6  EC5B  F00F         	call	_sendUSART
  4781                           
  4782                           ;mylib.h: 527: break;
  4783  0010BA  D035               	goto	l4734
  4784  0010BC                     l4726:
  4785                           
  4786                           ; BSR set to: 1
  4787                           ;mylib.h: 529: sendUSART(PrePos2[0]);
  4788  0010BC  0100               	movlb	0	; () banked
  4789  0010BE  51B2               	movf	_PrePos2& (0+255),w,b
  4790  0010C0  EC5B  F00F         	call	_sendUSART
  4791                           
  4792                           ;mylib.h: 530: sendUSART(PrePos2[1]);
  4793  0010C4  0100               	movlb	0	; () banked
  4794  0010C6  51B3               	movf	(_PrePos2+1)& (0+255),w,b
  4795  0010C8  EC5B  F00F         	call	_sendUSART
  4796                           
  4797                           ;mylib.h: 531: sendUSART(PrePos2[2]);
  4798  0010CC  0100               	movlb	0	; () banked
  4799  0010CE  51B4               	movf	(_PrePos2+2)& (0+255),w,b
  4800  0010D0  EC5B  F00F         	call	_sendUSART
  4801                           
  4802                           ;mylib.h: 532: sendUSART(PrePos2[3]);
  4803  0010D4  0100               	movlb	0	; () banked
  4804  0010D6  51B5               	movf	(_PrePos2+3)& (0+255),w,b
  4805  0010D8  EC5B  F00F         	call	_sendUSART
  4806                           
  4807                           ;mylib.h: 533: sendUSART(PrePos2[4]);
  4808  0010DC  0100               	movlb	0	; () banked
  4809  0010DE  51B6               	movf	(_PrePos2+4)& (0+255),w,b
  4810  0010E0  EC5B  F00F         	call	_sendUSART
  4811                           
  4812                           ;mylib.h: 534: break;
  4813  0010E4  D020               	goto	l4734
  4814  0010E6                     l4728:
  4815                           
  4816                           ; BSR set to: 1
  4817                           ;mylib.h: 536: sendUSART(PrePos4[0]);
  4818  0010E6  0100               	movlb	0	; () banked
  4819  0010E8  51AD               	movf	_PrePos4& (0+255),w,b
  4820  0010EA  EC5B  F00F         	call	_sendUSART
  4821                           
  4822                           ;mylib.h: 537: sendUSART(PrePos4[1]);
  4823  0010EE  0100               	movlb	0	; () banked
  4824  0010F0  51AE               	movf	(_PrePos4+1)& (0+255),w,b
  4825  0010F2  EC5B  F00F         	call	_sendUSART
  4826                           
  4827                           ;mylib.h: 538: sendUSART(PrePos4[2]);
  4828  0010F6  0100               	movlb	0	; () banked
  4829  0010F8  51AF               	movf	(_PrePos4+2)& (0+255),w,b
  4830  0010FA  EC5B  F00F         	call	_sendUSART
  4831                           
  4832                           ;mylib.h: 539: sendUSART(PrePos4[3]);
  4833  0010FE  0100               	movlb	0	; () banked
  4834  001100  51B0               	movf	(_PrePos4+3)& (0+255),w,b
  4835  001102  EC5B  F00F         	call	_sendUSART
  4836                           
  4837                           ;mylib.h: 540: sendUSART(PrePos4[4]);
  4838  001106  0100               	movlb	0	; () banked
  4839  001108  51B1               	movf	(_PrePos4+4)& (0+255),w,b
  4840  00110A  EC5B  F00F         	call	_sendUSART
  4841                           
  4842                           ;mylib.h: 541: break;
  4843  00110E  D00B               	goto	l4734
  4844  001110                     l4732:
  4845  001110  0101               	movlb	1	; () banked
  4846  001112  513F               	movf	GraspPreshape@preshapeState& (0+255),w,b
  4847                           
  4848                           ; Switch size 1, requested type "simple"
  4849                           ; Number of cases is 3, Range of values is 0 to 4
  4850                           ; switch strategies available:
  4851                           ; Name         Instructions Cycles
  4852                           ; simple_byte           10     6 (average)
  4853                           ;	Chosen strategy is simple_byte
  4854  001114  0A00               	xorlw	0	; case 0
  4855  001116  B4D8               	btfsc	status,2,c
  4856  001118  D7BC               	goto	l4724
  4857  00111A  0A02               	xorlw	2	; case 2
  4858  00111C  B4D8               	btfsc	status,2,c
  4859  00111E  D7CE               	goto	l4726
  4860  001120  0A06               	xorlw	6	; case 4
  4861  001122  B4D8               	btfsc	status,2,c
  4862  001124  D7E0               	goto	l4728
  4863  001126                     l4734:
  4864                           
  4865                           ;mylib.h: 543: sendUSART(0x48);
  4866  001126  0E48               	movlw	72
  4867  001128  EC5B  F00F         	call	_sendUSART
  4868                           
  4869                           ;mylib.h: 544: waitHandReached();
  4870  00112C  ECB8  F00E         	call	_waitHandReached	;wreg free
  4871                           
  4872                           ; BSR set to: 1
  4873  001130  0012               	return		;funcret
  4874  001132                     __end_of_GraspPreshape:
  4875                           	opt callstack 0
  4876                           
  4877 ;; *************** function _waitHandReached *****************
  4878 ;; Defined at:
  4879 ;;		line 496 in file "mylib.h"
  4880 ;; Parameters:    Size  Location     Type
  4881 ;;		None
  4882 ;; Auto vars:     Size  Location     Type
  4883 ;;  motorID         1   12[BANK1 ] unsigned char 
  4884 ;; Return value:  Size  Location     Type
  4885 ;;                  1    wreg      void 
  4886 ;; Registers used:
  4887 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4888 ;; Tracked objects:
  4889 ;;		On entry : 0/1
  4890 ;;		On exit  : 3F/1
  4891 ;;		Unchanged: 0/0
  4892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4893 ;;      Params:         0       0       0       0
  4894 ;;      Locals:         0       0       1       0
  4895 ;;      Temps:          0       0       0       0
  4896 ;;      Totals:         0       0       1       0
  4897 ;;Total ram usage:        1 bytes
  4898 ;; Hardware stack levels used:    1
  4899 ;; Hardware stack levels required when called:   10
  4900 ;; This function calls:
  4901 ;;		_waitFingerReached
  4902 ;; This function is called by:
  4903 ;;		_GraspPreshape
  4904 ;; This function uses a non-reentrant model
  4905 ;;
  4906                           
  4907                           	psect	text24
  4908  001D70                     __ptext24:
  4909                           	opt callstack 0
  4910  001D70                     _waitHandReached:
  4911                           	opt callstack 19
  4912                           
  4913                           ;mylib.h: 497: unsigned char motorID;;mylib.h: 498: for(motorID = 0 ; motorID < 5 ; moto
      +                          rID++){
  4914                           
  4915                           ; BSR set to: 1
  4916                           ;incstack = 0
  4917  001D70  0E00               	movlw	0
  4918  001D72  0101               	movlb	1	; () banked
  4919  001D74  6F3E               	movwf	waitHandReached@motorID& (0+255),b
  4920  001D76                     l4286:
  4921                           
  4922                           ; BSR set to: 1
  4923                           ;mylib.h: 499: if(motorID != 1) waitFingerReached(motorID);
  4924  001D76  053E               	decf	waitHandReached@motorID& (0+255),w,b
  4925  001D78  B4D8               	btfsc	status,2,c
  4926  001D7A  D003               	goto	l4290
  4927                           
  4928                           ; BSR set to: 1
  4929  001D7C  513E               	movf	waitHandReached@motorID& (0+255),w,b
  4930  001D7E  ECC6  F00E         	call	_waitFingerReached
  4931  001D82                     l4290:
  4932                           
  4933                           ; BSR set to: 1
  4934  001D82  2B3E               	incf	waitHandReached@motorID& (0+255),f,b
  4935                           
  4936                           ; BSR set to: 1
  4937  001D84  0E04               	movlw	4
  4938  001D86  653E               	cpfsgt	waitHandReached@motorID& (0+255),b
  4939  001D88  D7F6               	goto	l4286
  4940  001D8A  0012               	return	
  4941  001D8C                     __end_of_waitHandReached:
  4942                           	opt callstack 0
  4943                           
  4944 ;; *************** function _waitFingerReached *****************
  4945 ;; Defined at:
  4946 ;;		line 487 in file "mylib.h"
  4947 ;; Parameters:    Size  Location     Type
  4948 ;;  motorID         1    wreg     unsigned char 
  4949 ;; Auto vars:     Size  Location     Type
  4950 ;;  motorID         1    9[BANK1 ] unsigned char 
  4951 ;;  statusBit4      1   11[BANK1 ] unsigned char 
  4952 ;;  status          1   10[BANK1 ] unsigned char 
  4953 ;; Return value:  Size  Location     Type
  4954 ;;                  1    wreg      void 
  4955 ;; Registers used:
  4956 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4957 ;; Tracked objects:
  4958 ;;		On entry : 3F/1
  4959 ;;		On exit  : 3F/1
  4960 ;;		Unchanged: 0/0
  4961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4962 ;;      Params:         0       0       0       0
  4963 ;;      Locals:         0       0       3       0
  4964 ;;      Temps:          0       0       0       0
  4965 ;;      Totals:         0       0       3       0
  4966 ;;Total ram usage:        3 bytes
  4967 ;; Hardware stack levels used:    1
  4968 ;; Hardware stack levels required when called:    9
  4969 ;; This function calls:
  4970 ;;		_getFingerStatus
  4971 ;; This function is called by:
  4972 ;;		_waitHandReached
  4973 ;; This function uses a non-reentrant model
  4974 ;;
  4975                           
  4976                           	psect	text25
  4977  001D8C                     __ptext25:
  4978                           	opt callstack 0
  4979  001D8C                     _waitFingerReached:
  4980                           	opt callstack 19
  4981                           
  4982                           ; BSR set to: 1
  4983                           ;incstack = 0
  4984                           ;waitFingerReached@motorID stored from wreg
  4985  001D8C  6F3B               	movwf	waitFingerReached@motorID& (0+255),b
  4986  001D8E                     l260:
  4987                           
  4988                           ;mylib.h: 491: status = getFingerStatus(motorID);
  4989  001D8E  0101               	movlb	1	; () banked
  4990  001D90  513B               	movf	waitFingerReached@motorID& (0+255),w,b
  4991  001D92  ECEE  F00E         	call	_getFingerStatus
  4992  001D96  6F3C               	movwf	waitFingerReached@status& (0+255),b
  4993                           
  4994                           ; BSR set to: 1
  4995                           ;mylib.h: 492: statusBit4 = (status>>4) & 0x1;
  4996  001D98  393C               	swapf	waitFingerReached@status& (0+255),w,b
  4997  001D9A  0B0F               	andlw	15
  4998  001D9C  0B01               	andlw	1
  4999  001D9E  6F3D               	movwf	waitFingerReached@statusBit4& (0+255),b
  5000                           
  5001                           ; BSR set to: 1
  5002                           ;mylib.h: 493: }while(statusBit4 != 1);
  5003  001DA0  053D               	decf	waitFingerReached@statusBit4& (0+255),w,b
  5004  001DA2  B4D8               	btfsc	status,2,c
  5005  001DA4  0012               	return	
  5006  001DA6  D7F3               	goto	l260
  5007  001DA8                     __end_of_waitFingerReached:
  5008                           	opt callstack 0
  5009                           
  5010 ;; *************** function _getFingerStatus *****************
  5011 ;; Defined at:
  5012 ;;		line 479 in file "mylib.h"
  5013 ;; Parameters:    Size  Location     Type
  5014 ;;  MA3210          1    wreg     unsigned char 
  5015 ;; Auto vars:     Size  Location     Type
  5016 ;;  MA3210          1    7[BANK1 ] unsigned char 
  5017 ;;  statusFinger    1    8[BANK1 ] unsigned char 
  5018 ;; Return value:  Size  Location     Type
  5019 ;;                  1    wreg      unsigned char 
  5020 ;; Registers used:
  5021 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5022 ;; Tracked objects:
  5023 ;;		On entry : 3F/1
  5024 ;;		On exit  : 3F/1
  5025 ;;		Unchanged: 0/0
  5026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5027 ;;      Params:         0       0       0       0
  5028 ;;      Locals:         0       0       2       0
  5029 ;;      Temps:          0       0       0       0
  5030 ;;      Totals:         0       0       2       0
  5031 ;;Total ram usage:        2 bytes
  5032 ;; Hardware stack levels used:    1
  5033 ;; Hardware stack levels required when called:    8
  5034 ;; This function calls:
  5035 ;;		_readUSART
  5036 ;;		_sendUSART
  5037 ;; This function is called by:
  5038 ;;		_waitFingerReached
  5039 ;; This function uses a non-reentrant model
  5040 ;;
  5041                           
  5042                           	psect	text26
  5043  001DDC                     __ptext26:
  5044                           	opt callstack 0
  5045  001DDC                     _getFingerStatus:
  5046                           	opt callstack 19
  5047                           
  5048                           ; BSR set to: 1
  5049                           ;incstack = 0
  5050                           ;getFingerStatus@MA3210 stored from wreg
  5051  001DDC  6F39               	movwf	getFingerStatus@MA3210& (0+255),b
  5052                           
  5053                           ;mylib.h: 480: unsigned char statusFinger;;mylib.h: 481: sendUSART(0x4B);
  5054  001DDE  0E4B               	movlw	75
  5055  001DE0  EC5B  F00F         	call	_sendUSART
  5056                           
  5057                           ;mylib.h: 482: sendUSART(MA3210);
  5058  001DE4  0101               	movlb	1	; () banked
  5059  001DE6  5139               	movf	getFingerStatus@MA3210& (0+255),w,b
  5060  001DE8  EC5B  F00F         	call	_sendUSART
  5061                           
  5062                           ;mylib.h: 483: statusFinger = readUSART();
  5063  001DEC  EC6B  F00C         	call	_readUSART	;wreg free
  5064  001DF0  6F3A               	movwf	getFingerStatus@statusFinger& (0+255),b
  5065                           
  5066                           ; BSR set to: 1
  5067                           ;mylib.h: 484: return statusFinger;
  5068  001DF2  513A               	movf	getFingerStatus@statusFinger& (0+255),w,b
  5069                           
  5070                           ; BSR set to: 1
  5071  001DF4  0012               	return		;funcret
  5072  001DF6                     __end_of_getFingerStatus:
  5073                           	opt callstack 0
  5074                           
  5075 ;; *************** function _GraspControl *****************
  5076 ;; Defined at:
  5077 ;;		line 548 in file "mylib.h"
  5078 ;; Parameters:    Size  Location     Type
  5079 ;;  graspState      1    wreg     unsigned char 
  5080 ;;  S               1   13[BANK1 ] unsigned char 
  5081 ;;  speed           2   14[BANK1 ] unsigned int 
  5082 ;; Auto vars:     Size  Location     Type
  5083 ;;  graspState      1   16[BANK1 ] unsigned char 
  5084 ;;  auxspeed_lit    2   24[BANK1 ] unsigned int 
  5085 ;;  littlePercen    2    0        unsigned int 
  5086 ;;  auxspeed_thu    2   19[BANK1 ] unsigned int 
  5087 ;;  thumbPercent    2   17[BANK1 ] unsigned int 
  5088 ;;  indexpos        1    0        unsigned char 
  5089 ;; Return value:  Size  Location     Type
  5090 ;;                  1    wreg      void 
  5091 ;; Registers used:
  5092 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5093 ;; Tracked objects:
  5094 ;;		On entry : 3F/1
  5095 ;;		On exit  : 0/0
  5096 ;;		Unchanged: 0/0
  5097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5098 ;;      Params:         0       0       3       0
  5099 ;;      Locals:         0       0      10       0
  5100 ;;      Temps:          0       0       0       0
  5101 ;;      Totals:         0       0      13       0
  5102 ;;Total ram usage:       13 bytes
  5103 ;; Hardware stack levels used:    1
  5104 ;; Hardware stack levels required when called:   10
  5105 ;; This function calls:
  5106 ;;		_MoveMotor
  5107 ;;		___lwdiv
  5108 ;;		___wmul
  5109 ;;		_getHandPosition
  5110 ;; This function is called by:
  5111 ;;		_main
  5112 ;; This function uses a non-reentrant model
  5113 ;;
  5114                           
  5115                           	psect	text27
  5116  0008E0                     __ptext27:
  5117                           	opt callstack 0
  5118  0008E0                     _GraspControl:
  5119                           	opt callstack 20
  5120                           
  5121                           ; BSR set to: 1
  5122                           ;incstack = 0
  5123                           ;GraspControl@graspState stored from wreg
  5124  0008E0  6F42               	movwf	GraspControl@graspState& (0+255),b
  5125                           
  5126                           ;mylib.h: 551: unsigned int thumbPercentage = 40;
  5127  0008E2  0E00               	movlw	0
  5128  0008E4  0101               	movlb	1	; () banked
  5129  0008E6  6F44               	movwf	(GraspControl@thumbPercentage+1)& (0+255),b
  5130  0008E8  0E28               	movlw	40
  5131  0008EA  6F43               	movwf	GraspControl@thumbPercentage& (0+255),b
  5132                           
  5133                           ; BSR set to: 1
  5134                           ;mylib.h: 552: unsigned int auxspeed_thumb = (thumbPercentage * speed) / 100;
  5135  0008EC  0E00               	movlw	0
  5136  0008EE  6F33               	movwf	(___wmul@multiplier+1)& (0+255),b
  5137  0008F0  0E28               	movlw	40
  5138  0008F2  6F32               	movwf	___wmul@multiplier& (0+255),b
  5139  0008F4  C140  F134         	movff	GraspControl@speed,___wmul@multiplicand
  5140  0008F8  C141  F135         	movff	GraspControl@speed+1,___wmul@multiplicand+1
  5141  0008FC  EC81  F00E         	call	___wmul	;wreg free
  5142  000900  C132  F138         	movff	?___wmul,___lwdiv@dividend
  5143  000904  C133  F139         	movff	?___wmul+1,___lwdiv@dividend+1
  5144  000908  0E00               	movlw	0
  5145  00090A  6F3B               	movwf	(___lwdiv@divisor+1)& (0+255),b
  5146  00090C  0E64               	movlw	100
  5147  00090E  6F3A               	movwf	___lwdiv@divisor& (0+255),b
  5148  000910  ECBF  F00C         	call	___lwdiv	;wreg free
  5149  000914  C138  F145         	movff	?___lwdiv,GraspControl@auxspeed_thumb
  5150  000918  C139  F146         	movff	?___lwdiv+1,GraspControl@auxspeed_thumb+1
  5151                           
  5152                           ; BSR set to: 1
  5153                           ;mylib.h: 555: unsigned int auxspeed_little = (littlePercentage * speed) / 100;
  5154                           
  5155                           ; BSR set to: 1
  5156  00091C  0E00               	movlw	0
  5157  00091E  6F33               	movwf	(___wmul@multiplier+1)& (0+255),b
  5158  000920  0E78               	movlw	120
  5159  000922  6F32               	movwf	___wmul@multiplier& (0+255),b
  5160  000924  C140  F134         	movff	GraspControl@speed,___wmul@multiplicand
  5161  000928  C141  F135         	movff	GraspControl@speed+1,___wmul@multiplicand+1
  5162  00092C  EC81  F00E         	call	___wmul	;wreg free
  5163  000930  C132  F138         	movff	?___wmul,___lwdiv@dividend
  5164  000934  C133  F139         	movff	?___wmul+1,___lwdiv@dividend+1
  5165  000938  0E00               	movlw	0
  5166  00093A  6F3B               	movwf	(___lwdiv@divisor+1)& (0+255),b
  5167  00093C  0E64               	movlw	100
  5168  00093E  6F3A               	movwf	___lwdiv@divisor& (0+255),b
  5169  000940  ECBF  F00C         	call	___lwdiv	;wreg free
  5170  000944  C138  F14A         	movff	?___lwdiv,GraspControl@auxspeed_little
  5171  000948  C139  F14B         	movff	?___lwdiv+1,GraspControl@auxspeed_little+1
  5172                           
  5173                           ; BSR set to: 1
  5174                           ;mylib.h: 556: if(auxspeed_little > 511) auxspeed_little = 511;
  5175  00094C  0E02               	movlw	2
  5176  00094E  5D4B               	subwf	(GraspControl@auxspeed_little+1)& (0+255),w,b
  5177  000950  A0D8               	btfss	status,0,c
  5178  000952  D003               	goto	l4750
  5179                           
  5180                           ; BSR set to: 1
  5181  000954  0E01               	movlw	1
  5182  000956  6F4B               	movwf	(GraspControl@auxspeed_little+1)& (0+255),b
  5183  000958  694A               	setf	GraspControl@auxspeed_little& (0+255),b
  5184  00095A                     l4750:
  5185                           
  5186                           ; BSR set to: 1
  5187                           ;mylib.h: 559: getHandPosition();
  5188  00095A  ECA7  F00E         	call	_getHandPosition	;wreg free
  5189                           
  5190                           ;mylib.h: 560: switch(graspState){
  5191  00095E  D123               	goto	l4846
  5192  000960                     l4752:
  5193                           
  5194                           ; BSR set to: 1
  5195                           ;mylib.h: 562: if ((Pos[1] >= closing1[1] && S == 1) || (Pos[1] <= PrePos0[1] && S == 0)
      +                          ) MoveMotor(S,1,0);
  5196  000960  0100               	movlb	0	; () banked
  5197  000962  51A9               	movf	(_closing1+1)& (0+255),w,b
  5198  000964  5D93               	subwf	(_Pos+1)& (0+255),w,b
  5199  000966  A0D8               	btfss	status,0,c
  5200  000968  D004               	goto	u4680
  5201                           
  5202                           ; BSR set to: 0
  5203  00096A  0101               	movlb	1	; () banked
  5204  00096C  053F               	decf	GraspControl@S& (0+255),w,b
  5205  00096E  B4D8               	btfsc	status,2,c
  5206  000970  D009               	goto	u4700
  5207  000972                     u4680:
  5208  000972  0100               	movlb	0	; () banked
  5209  000974  5193               	movf	(_Pos+1)& (0+255),w,b
  5210  000976  5DB8               	subwf	(_PrePos0+1)& (0+255),w,b
  5211  000978  A0D8               	btfss	status,0,c
  5212  00097A  D00E               	goto	l4762
  5213                           
  5214                           ; BSR set to: 0
  5215  00097C  0101               	movlb	1	; () banked
  5216  00097E  513F               	movf	GraspControl@S& (0+255),w,b
  5217  000980  A4D8               	btfss	status,2,c
  5218  000982  D00A               	goto	l4762
  5219  000984                     u4700:
  5220                           
  5221                           ; BSR set to: 1
  5222  000984  0E01               	movlw	1
  5223  000986  6F33               	movwf	MoveMotor@MA3210& (0+255),b
  5224  000988  0E00               	movlw	0
  5225  00098A  6F35               	movwf	(MoveMotor@vel+1)& (0+255),b
  5226  00098C  0E00               	movlw	0
  5227  00098E  6F34               	movwf	MoveMotor@vel& (0+255),b
  5228  000990  513F               	movf	GraspControl@S& (0+255),w,b
  5229  000992  ECF1  F00D         	call	_MoveMotor
  5230  000996  D020               	goto	l4772
  5231  000998                     l4762:
  5232                           
  5233                           ;mylib.h: 563: else if ((S == 1 && Pos[2] >= indexpos) || (S == 0)) MoveMotor(S,1,speed)
      +                          ;
  5234  000998  0101               	movlb	1	; () banked
  5235  00099A  053F               	decf	GraspControl@S& (0+255),w,b
  5236  00099C  A4D8               	btfss	status,2,c
  5237  00099E  D004               	goto	u4720
  5238                           
  5239                           ; BSR set to: 1
  5240  0009A0  0E7D               	movlw	125
  5241  0009A2  0100               	movlb	0	; () banked
  5242  0009A4  6194               	cpfslt	(_Pos+2)& (0+255),b
  5243  0009A6  D004               	goto	u4730
  5244  0009A8                     u4720:
  5245  0009A8  0101               	movlb	1	; () banked
  5246  0009AA  513F               	movf	GraspControl@S& (0+255),w,b
  5247  0009AC  A4D8               	btfss	status,2,c
  5248  0009AE  D00B               	goto	l4770
  5249  0009B0                     u4730:
  5250  0009B0  0E01               	movlw	1
  5251  0009B2  0101               	movlb	1	; () banked
  5252  0009B4  6F33               	movwf	MoveMotor@MA3210& (0+255),b
  5253  0009B6  C140  F134         	movff	GraspControl@speed,MoveMotor@vel
  5254  0009BA  C141  F135         	movff	GraspControl@speed+1,MoveMotor@vel+1
  5255  0009BE  513F               	movf	GraspControl@S& (0+255),w,b
  5256  0009C0  ECF1  F00D         	call	_MoveMotor
  5257  0009C4  D009               	goto	l4772
  5258  0009C6                     l4770:
  5259                           
  5260                           ; BSR set to: 1
  5261                           ;mylib.h: 564: else MoveMotor(S,1,auxspeed_thumb);
  5262  0009C6  0E01               	movlw	1
  5263  0009C8  6F33               	movwf	MoveMotor@MA3210& (0+255),b
  5264  0009CA  C145  F134         	movff	GraspControl@auxspeed_thumb,MoveMotor@vel
  5265  0009CE  C146  F135         	movff	GraspControl@auxspeed_thumb+1,MoveMotor@vel+1
  5266  0009D2  513F               	movf	GraspControl@S& (0+255),w,b
  5267  0009D4  ECF1  F00D         	call	_MoveMotor
  5268  0009D8                     l4772:
  5269                           
  5270                           ;mylib.h: 566: if ((Pos[2] >= closing1[2] && S == 1) || (Pos[2] <= PrePos0[2] && S == 0)
      +                          ) MoveMotor(S,2,0);
  5271  0009D8  0100               	movlb	0	; () banked
  5272  0009DA  51AA               	movf	(_closing1+2)& (0+255),w,b
  5273  0009DC  5D94               	subwf	(_Pos+2)& (0+255),w,b
  5274  0009DE  A0D8               	btfss	status,0,c
  5275  0009E0  D004               	goto	u4750
  5276                           
  5277                           ; BSR set to: 0
  5278  0009E2  0101               	movlb	1	; () banked
  5279  0009E4  053F               	decf	GraspControl@S& (0+255),w,b
  5280  0009E6  B4D8               	btfsc	status,2,c
  5281  0009E8  D009               	goto	u4770
  5282  0009EA                     u4750:
  5283  0009EA  0100               	movlb	0	; () banked
  5284  0009EC  5194               	movf	(_Pos+2)& (0+255),w,b
  5285  0009EE  5DB9               	subwf	(_PrePos0+2)& (0+255),w,b
  5286  0009F0  A0D8               	btfss	status,0,c
  5287  0009F2  D00E               	goto	l4782
  5288                           
  5289                           ; BSR set to: 0
  5290  0009F4  0101               	movlb	1	; () banked
  5291  0009F6  513F               	movf	GraspControl@S& (0+255),w,b
  5292  0009F8  A4D8               	btfss	status,2,c
  5293  0009FA  D00A               	goto	l4782
  5294  0009FC                     u4770:
  5295                           
  5296                           ; BSR set to: 1
  5297  0009FC  0E02               	movlw	2
  5298  0009FE  6F33               	movwf	MoveMotor@MA3210& (0+255),b
  5299  000A00  0E00               	movlw	0
  5300  000A02  6F35               	movwf	(MoveMotor@vel+1)& (0+255),b
  5301  000A04  0E00               	movlw	0
  5302  000A06  6F34               	movwf	MoveMotor@vel& (0+255),b
  5303  000A08  513F               	movf	GraspControl@S& (0+255),w,b
  5304  000A0A  ECF1  F00D         	call	_MoveMotor
  5305  000A0E  D00A               	goto	l4784
  5306  000A10                     l4782:
  5307                           
  5308                           ;mylib.h: 567: else MoveMotor(S,2,speed);
  5309  000A10  0E02               	movlw	2
  5310  000A12  0101               	movlb	1	; () banked
  5311  000A14  6F33               	movwf	MoveMotor@MA3210& (0+255),b
  5312  000A16  C140  F134         	movff	GraspControl@speed,MoveMotor@vel
  5313  000A1A  C141  F135         	movff	GraspControl@speed+1,MoveMotor@vel+1
  5314  000A1E  513F               	movf	GraspControl@S& (0+255),w,b
  5315  000A20  ECF1  F00D         	call	_MoveMotor
  5316  000A24                     l4784:
  5317                           
  5318                           ;mylib.h: 569: if ((Pos[3] >= closing1[3] && S == 1) || (Pos[3] <= PrePos0[3] && S == 0)
      +                          ) MoveMotor(S,3,0);
  5319  000A24  0100               	movlb	0	; () banked
  5320  000A26  51AB               	movf	(_closing1+3)& (0+255),w,b
  5321  000A28  5D95               	subwf	(_Pos+3)& (0+255),w,b
  5322  000A2A  A0D8               	btfss	status,0,c
  5323  000A2C  D004               	goto	u4790
  5324                           
  5325                           ; BSR set to: 0
  5326  000A2E  0101               	movlb	1	; () banked
  5327  000A30  053F               	decf	GraspControl@S& (0+255),w,b
  5328  000A32  B4D8               	btfsc	status,2,c
  5329  000A34  D009               	goto	u4810
  5330  000A36                     u4790:
  5331  000A36  0100               	movlb	0	; () banked
  5332  000A38  5195               	movf	(_Pos+3)& (0+255),w,b
  5333  000A3A  5DBA               	subwf	(_PrePos0+3)& (0+255),w,b
  5334  000A3C  A0D8               	btfss	status,0,c
  5335  000A3E  D00E               	goto	l4794
  5336                           
  5337                           ; BSR set to: 0
  5338  000A40  0101               	movlb	1	; () banked
  5339  000A42  513F               	movf	GraspControl@S& (0+255),w,b
  5340  000A44  A4D8               	btfss	status,2,c
  5341  000A46  D00A               	goto	l4794
  5342  000A48                     u4810:
  5343                           
  5344                           ; BSR set to: 1
  5345  000A48  0E03               	movlw	3
  5346  000A4A  6F33               	movwf	MoveMotor@MA3210& (0+255),b
  5347  000A4C  0E00               	movlw	0
  5348  000A4E  6F35               	movwf	(MoveMotor@vel+1)& (0+255),b
  5349  000A50  0E00               	movlw	0
  5350  000A52  6F34               	movwf	MoveMotor@vel& (0+255),b
  5351  000A54  513F               	movf	GraspControl@S& (0+255),w,b
  5352  000A56  ECF1  F00D         	call	_MoveMotor
  5353  000A5A  D00A               	goto	l4796
  5354  000A5C                     l4794:
  5355                           
  5356                           ;mylib.h: 570: else MoveMotor(S,3,speed);
  5357  000A5C  0E03               	movlw	3
  5358  000A5E  0101               	movlb	1	; () banked
  5359  000A60  6F33               	movwf	MoveMotor@MA3210& (0+255),b
  5360  000A62  C140  F134         	movff	GraspControl@speed,MoveMotor@vel
  5361  000A66  C141  F135         	movff	GraspControl@speed+1,MoveMotor@vel+1
  5362  000A6A  513F               	movf	GraspControl@S& (0+255),w,b
  5363  000A6C  ECF1  F00D         	call	_MoveMotor
  5364  000A70                     l4796:
  5365                           
  5366                           ;mylib.h: 572: if ((Pos[4] >= closing1[4] && S == 1) || (Pos[4] <= PrePos0[4] && S == 0)
      +                          ) MoveMotor(S,4,0);
  5367  000A70  0100               	movlb	0	; () banked
  5368  000A72  51AC               	movf	(_closing1+4)& (0+255),w,b
  5369  000A74  5D96               	subwf	(_Pos+4)& (0+255),w,b
  5370  000A76  A0D8               	btfss	status,0,c
  5371  000A78  D004               	goto	u4830
  5372                           
  5373                           ; BSR set to: 0
  5374  000A7A  0101               	movlb	1	; () banked
  5375  000A7C  053F               	decf	GraspControl@S& (0+255),w,b
  5376  000A7E  B4D8               	btfsc	status,2,c
  5377  000A80  D009               	goto	u4850
  5378  000A82                     u4830:
  5379  000A82  0100               	movlb	0	; () banked
  5380  000A84  5196               	movf	(_Pos+4)& (0+255),w,b
  5381  000A86  5DBB               	subwf	(_PrePos0+4)& (0+255),w,b
  5382  000A88  A0D8               	btfss	status,0,c
  5383  000A8A  D00E               	goto	l4806
  5384                           
  5385                           ; BSR set to: 0
  5386  000A8C  0101               	movlb	1	; () banked
  5387  000A8E  513F               	movf	GraspControl@S& (0+255),w,b
  5388  000A90  A4D8               	btfss	status,2,c
  5389  000A92  D00A               	goto	l4806
  5390  000A94                     u4850:
  5391                           
  5392                           ; BSR set to: 1
  5393  000A94  0E04               	movlw	4
  5394  000A96  6F33               	movwf	MoveMotor@MA3210& (0+255),b
  5395  000A98  0E00               	movlw	0
  5396  000A9A  6F35               	movwf	(MoveMotor@vel+1)& (0+255),b
  5397  000A9C  0E00               	movlw	0
  5398  000A9E  6F34               	movwf	MoveMotor@vel& (0+255),b
  5399  000AA0  513F               	movf	GraspControl@S& (0+255),w,b
  5400  000AA2  ECF1  F00D         	call	_MoveMotor
  5401  000AA6  0012               	return	
  5402  000AA8                     l4806:
  5403                           
  5404                           ;mylib.h: 573: else MoveMotor(S,4,auxspeed_little);
  5405  000AA8  0E04               	movlw	4
  5406  000AAA  0101               	movlb	1	; () banked
  5407  000AAC  6F33               	movwf	MoveMotor@MA3210& (0+255),b
  5408  000AAE  C14A  F134         	movff	GraspControl@auxspeed_little,MoveMotor@vel
  5409  000AB2  C14B  F135         	movff	GraspControl@auxspeed_little+1,MoveMotor@vel+1
  5410  000AB6  513F               	movf	GraspControl@S& (0+255),w,b
  5411  000AB8  ECF1  F00D         	call	_MoveMotor
  5412  000ABC  0012               	return	
  5413  000ABE                     l4808:
  5414                           
  5415                           ; BSR set to: 1
  5416                           ;mylib.h: 576: if ((Pos[1] >= closing3[1] && S == 1) || (Pos[1] <= PrePos2[1] && S == 0)
      +                           ) MoveMotor(S,1,0);
  5417  000ABE  0100               	movlb	0	; () banked
  5418  000AC0  51A4               	movf	(_closing3+1)& (0+255),w,b
  5419  000AC2  5D93               	subwf	(_Pos+1)& (0+255),w,b
  5420  000AC4  A0D8               	btfss	status,0,c
  5421  000AC6  D004               	goto	u4870
  5422                           
  5423                           ; BSR set to: 0
  5424  000AC8  0101               	movlb	1	; () banked
  5425  000ACA  053F               	decf	GraspControl@S& (0+255),w,b
  5426  000ACC  B4D8               	btfsc	status,2,c
  5427  000ACE  D009               	goto	u4890
  5428  000AD0                     u4870:
  5429  000AD0  0100               	movlb	0	; () banked
  5430  000AD2  5193               	movf	(_Pos+1)& (0+255),w,b
  5431  000AD4  5DB3               	subwf	(_PrePos2+1)& (0+255),w,b
  5432  000AD6  A0D8               	btfss	status,0,c
  5433  000AD8  D00E               	goto	l4818
  5434                           
  5435                           ; BSR set to: 0
  5436  000ADA  0101               	movlb	1	; () banked
  5437  000ADC  513F               	movf	GraspControl@S& (0+255),w,b
  5438  000ADE  A4D8               	btfss	status,2,c
  5439  000AE0  D00A               	goto	l4818
  5440  000AE2                     u4890:
  5441                           
  5442                           ; BSR set to: 1
  5443  000AE2  0E01               	movlw	1
  5444  000AE4  6F33               	movwf	MoveMotor@MA3210& (0+255),b
  5445  000AE6  0E00               	movlw	0
  5446  000AE8  6F35               	movwf	(MoveMotor@vel+1)& (0+255),b
  5447  000AEA  0E00               	movlw	0
  5448  000AEC  6F34               	movwf	MoveMotor@vel& (0+255),b
  5449  000AEE  513F               	movf	GraspControl@S& (0+255),w,b
  5450  000AF0  ECF1  F00D         	call	_MoveMotor
  5451  000AF4  0012               	return	
  5452  000AF6                     l4818:
  5453                           
  5454                           ;mylib.h: 577: else MoveMotor(S,1,speed);
  5455  000AF6  0E01               	movlw	1
  5456  000AF8  0101               	movlb	1	; () banked
  5457  000AFA  6F33               	movwf	MoveMotor@MA3210& (0+255),b
  5458  000AFC  C140  F134         	movff	GraspControl@speed,MoveMotor@vel
  5459  000B00  C141  F135         	movff	GraspControl@speed+1,MoveMotor@vel+1
  5460  000B04  513F               	movf	GraspControl@S& (0+255),w,b
  5461  000B06  ECF1  F00D         	call	_MoveMotor
  5462  000B0A  0012               	return	
  5463  000B0C                     l4820:
  5464                           
  5465                           ; BSR set to: 1
  5466                           ;mylib.h: 580: if ((Pos[1] >= closing5[1] && S == 1) || (Pos[1] <= PrePos4[1] && S == 0)
      +                           ) MoveMotor(S,1,0);
  5467  000B0C  0100               	movlb	0	; () banked
  5468  000B0E  519F               	movf	(_closing5+1)& (0+255),w,b
  5469  000B10  5D93               	subwf	(_Pos+1)& (0+255),w,b
  5470  000B12  A0D8               	btfss	status,0,c
  5471  000B14  D004               	goto	u4910
  5472                           
  5473                           ; BSR set to: 0
  5474  000B16  0101               	movlb	1	; () banked
  5475  000B18  053F               	decf	GraspControl@S& (0+255),w,b
  5476  000B1A  B4D8               	btfsc	status,2,c
  5477  000B1C  D009               	goto	u4930
  5478  000B1E                     u4910:
  5479  000B1E  0100               	movlb	0	; () banked
  5480  000B20  5193               	movf	(_Pos+1)& (0+255),w,b
  5481  000B22  5DAE               	subwf	(_PrePos4+1)& (0+255),w,b
  5482  000B24  A0D8               	btfss	status,0,c
  5483  000B26  D00E               	goto	l4830
  5484                           
  5485                           ; BSR set to: 0
  5486  000B28  0101               	movlb	1	; () banked
  5487  000B2A  513F               	movf	GraspControl@S& (0+255),w,b
  5488  000B2C  A4D8               	btfss	status,2,c
  5489  000B2E  D00A               	goto	l4830
  5490  000B30                     u4930:
  5491                           
  5492                           ; BSR set to: 1
  5493  000B30  0E01               	movlw	1
  5494  000B32  6F33               	movwf	MoveMotor@MA3210& (0+255),b
  5495  000B34  0E00               	movlw	0
  5496  000B36  6F35               	movwf	(MoveMotor@vel+1)& (0+255),b
  5497  000B38  0E00               	movlw	0
  5498  000B3A  6F34               	movwf	MoveMotor@vel& (0+255),b
  5499  000B3C  513F               	movf	GraspControl@S& (0+255),w,b
  5500  000B3E  ECF1  F00D         	call	_MoveMotor
  5501  000B42  D00A               	goto	l4832
  5502  000B44                     l4830:
  5503                           
  5504                           ;mylib.h: 581: else MoveMotor(S,1,speed);
  5505  000B44  0E01               	movlw	1
  5506  000B46  0101               	movlb	1	; () banked
  5507  000B48  6F33               	movwf	MoveMotor@MA3210& (0+255),b
  5508  000B4A  C140  F134         	movff	GraspControl@speed,MoveMotor@vel
  5509  000B4E  C141  F135         	movff	GraspControl@speed+1,MoveMotor@vel+1
  5510  000B52  513F               	movf	GraspControl@S& (0+255),w,b
  5511  000B54  ECF1  F00D         	call	_MoveMotor
  5512  000B58                     l4832:
  5513                           
  5514                           ;mylib.h: 582: if ((Pos[2] >= closing5[2] && S == 1) || (Pos[2] <= PrePos4[2] && S == 0)
      +                           ) MoveMotor(S,2,0);
  5515  000B58  0100               	movlb	0	; () banked
  5516  000B5A  51A0               	movf	(_closing5+2)& (0+255),w,b
  5517  000B5C  5D94               	subwf	(_Pos+2)& (0+255),w,b
  5518  000B5E  A0D8               	btfss	status,0,c
  5519  000B60  D004               	goto	u4950
  5520                           
  5521                           ; BSR set to: 0
  5522  000B62  0101               	movlb	1	; () banked
  5523  000B64  053F               	decf	GraspControl@S& (0+255),w,b
  5524  000B66  B4D8               	btfsc	status,2,c
  5525  000B68  D009               	goto	u4970
  5526  000B6A                     u4950:
  5527  000B6A  0100               	movlb	0	; () banked
  5528  000B6C  5194               	movf	(_Pos+2)& (0+255),w,b
  5529  000B6E  5DAF               	subwf	(_PrePos4+2)& (0+255),w,b
  5530  000B70  A0D8               	btfss	status,0,c
  5531  000B72  D00E               	goto	l4842
  5532                           
  5533                           ; BSR set to: 0
  5534  000B74  0101               	movlb	1	; () banked
  5535  000B76  513F               	movf	GraspControl@S& (0+255),w,b
  5536  000B78  A4D8               	btfss	status,2,c
  5537  000B7A  D00A               	goto	l4842
  5538  000B7C                     u4970:
  5539                           
  5540                           ; BSR set to: 1
  5541  000B7C  0E02               	movlw	2
  5542  000B7E  6F33               	movwf	MoveMotor@MA3210& (0+255),b
  5543  000B80  0E00               	movlw	0
  5544  000B82  6F35               	movwf	(MoveMotor@vel+1)& (0+255),b
  5545  000B84  0E00               	movlw	0
  5546  000B86  6F34               	movwf	MoveMotor@vel& (0+255),b
  5547  000B88  513F               	movf	GraspControl@S& (0+255),w,b
  5548  000B8A  ECF1  F00D         	call	_MoveMotor
  5549  000B8E  0012               	return	
  5550  000B90                     l4842:
  5551                           
  5552                           ;mylib.h: 583: else MoveMotor(S,2,speed);
  5553  000B90  0E02               	movlw	2
  5554  000B92  0101               	movlb	1	; () banked
  5555  000B94  6F33               	movwf	MoveMotor@MA3210& (0+255),b
  5556  000B96  C140  F134         	movff	GraspControl@speed,MoveMotor@vel
  5557  000B9A  C141  F135         	movff	GraspControl@speed+1,MoveMotor@vel+1
  5558  000B9E  513F               	movf	GraspControl@S& (0+255),w,b
  5559  000BA0  ECF1  F00D         	call	_MoveMotor
  5560  000BA4  0012               	return	
  5561  000BA6                     l4846:
  5562                           
  5563                           ; BSR set to: 1
  5564  000BA6  5142               	movf	GraspControl@graspState& (0+255),w,b
  5565                           
  5566                           ; Switch size 1, requested type "simple"
  5567                           ; Number of cases is 3, Range of values is 1 to 5
  5568                           ; switch strategies available:
  5569                           ; Name         Instructions Cycles
  5570                           ; simple_byte           10     6 (average)
  5571                           ;	Chosen strategy is simple_byte
  5572  000BA8  0A01               	xorlw	1	; case 1
  5573  000BAA  B4D8               	btfsc	status,2,c
  5574  000BAC  D6D9               	goto	l4752
  5575  000BAE  0A02               	xorlw	2	; case 3
  5576  000BB0  B4D8               	btfsc	status,2,c
  5577  000BB2  D785               	goto	l4808
  5578  000BB4  0A06               	xorlw	6	; case 5
  5579  000BB6  A4D8               	btfss	status,2,c
  5580  000BB8  0012               	return	
  5581  000BBA  D7A8               	goto	l4820
  5582  000BBC                     __end_of_GraspControl:
  5583                           	opt callstack 0
  5584                           
  5585 ;; *************** function _getHandPosition *****************
  5586 ;; Defined at:
  5587 ;;		line 510 in file "mylib.h"
  5588 ;; Parameters:    Size  Location     Type
  5589 ;;		None
  5590 ;; Auto vars:     Size  Location     Type
  5591 ;;  i_finger        1   10[BANK1 ] unsigned char 
  5592 ;; Return value:  Size  Location     Type
  5593 ;;                  1    wreg      void 
  5594 ;; Registers used:
  5595 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5596 ;; Tracked objects:
  5597 ;;		On entry : 3F/1
  5598 ;;		On exit  : 3F/1
  5599 ;;		Unchanged: 0/0
  5600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5601 ;;      Params:         0       0       0       0
  5602 ;;      Locals:         0       0       1       0
  5603 ;;      Temps:          0       0       1       0
  5604 ;;      Totals:         0       0       2       0
  5605 ;;Total ram usage:        2 bytes
  5606 ;; Hardware stack levels used:    1
  5607 ;; Hardware stack levels required when called:    9
  5608 ;; This function calls:
  5609 ;;		_getFingerPosition
  5610 ;; This function is called by:
  5611 ;;		_GraspControl
  5612 ;; This function uses a non-reentrant model
  5613 ;;
  5614                           
  5615                           	psect	text28
  5616  001D4E                     __ptext28:
  5617                           	opt callstack 0
  5618  001D4E                     _getHandPosition:
  5619                           	opt callstack 20
  5620                           
  5621                           ; BSR set to: 1
  5622                           ;mylib.h: 511: unsigned char i_finger;;mylib.h: 512: for(i_finger = 0; i_finger < 5; i_f
      +                          inger++){
  5623                           
  5624                           ;incstack = 0
  5625  001D4E  0E00               	movlw	0
  5626  001D50  6F3C               	movwf	getHandPosition@i_finger& (0+255),b
  5627  001D52                     l4300:
  5628                           
  5629                           ; BSR set to: 1
  5630                           ;mylib.h: 513: Pos[i_finger] = getFingerPosition(i_finger);
  5631  001D52  513C               	movf	getHandPosition@i_finger& (0+255),w,b
  5632  001D54  ECFB  F00E         	call	_getFingerPosition
  5633  001D58  6F3B               	movwf	??_getHandPosition& (0+255),b
  5634  001D5A  513C               	movf	getHandPosition@i_finger& (0+255),w,b
  5635  001D5C  0F92               	addlw	low _Pos
  5636  001D5E  6ED9               	movwf	fsr2l,c
  5637  001D60  6ADA               	clrf	fsr2h,c
  5638  001D62  C13B  FFDF         	movff	??_getHandPosition,indf2
  5639                           
  5640                           ; BSR set to: 1
  5641  001D66  2B3C               	incf	getHandPosition@i_finger& (0+255),f,b
  5642                           
  5643                           ; BSR set to: 1
  5644  001D68  0E04               	movlw	4
  5645  001D6A  653C               	cpfsgt	getHandPosition@i_finger& (0+255),b
  5646  001D6C  D7F2               	goto	l4300
  5647  001D6E  0012               	return	
  5648  001D70                     __end_of_getHandPosition:
  5649                           	opt callstack 0
  5650                           
  5651 ;; *************** function _getFingerPosition *****************
  5652 ;; Defined at:
  5653 ;;		line 503 in file "mylib.h"
  5654 ;; Parameters:    Size  Location     Type
  5655 ;;  MA              1    wreg     unsigned char 
  5656 ;; Auto vars:     Size  Location     Type
  5657 ;;  MA              1    7[BANK1 ] unsigned char 
  5658 ;;  value           1    8[BANK1 ] unsigned char 
  5659 ;; Return value:  Size  Location     Type
  5660 ;;                  1    wreg      unsigned char 
  5661 ;; Registers used:
  5662 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5663 ;; Tracked objects:
  5664 ;;		On entry : 3F/1
  5665 ;;		On exit  : 3F/1
  5666 ;;		Unchanged: 0/0
  5667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5668 ;;      Params:         0       0       0       0
  5669 ;;      Locals:         0       0       2       0
  5670 ;;      Temps:          0       0       0       0
  5671 ;;      Totals:         0       0       2       0
  5672 ;;Total ram usage:        2 bytes
  5673 ;; Hardware stack levels used:    1
  5674 ;; Hardware stack levels required when called:    8
  5675 ;; This function calls:
  5676 ;;		_readUSART
  5677 ;;		_sendUSART
  5678 ;; This function is called by:
  5679 ;;		_getHandPosition
  5680 ;; This function uses a non-reentrant model
  5681 ;;
  5682                           
  5683                           	psect	text29
  5684  001DF6                     __ptext29:
  5685                           	opt callstack 0
  5686  001DF6                     _getFingerPosition:
  5687                           	opt callstack 20
  5688                           
  5689                           ; BSR set to: 1
  5690                           ;incstack = 0
  5691                           ;getFingerPosition@MA stored from wreg
  5692  001DF6  6F39               	movwf	getFingerPosition@MA& (0+255),b
  5693                           
  5694                           ;mylib.h: 504: sendUSART(0x45);
  5695  001DF8  0E45               	movlw	69
  5696  001DFA  EC5B  F00F         	call	_sendUSART
  5697                           
  5698                           ;mylib.h: 505: sendUSART(MA);
  5699  001DFE  0101               	movlb	1	; () banked
  5700  001E00  5139               	movf	getFingerPosition@MA& (0+255),w,b
  5701  001E02  EC5B  F00F         	call	_sendUSART
  5702                           
  5703                           ;mylib.h: 506: unsigned char value = readUSART();
  5704  001E06  EC6B  F00C         	call	_readUSART	;wreg free
  5705  001E0A  6F3A               	movwf	getFingerPosition@value& (0+255),b
  5706                           
  5707                           ; BSR set to: 1
  5708                           ;mylib.h: 507: return value;
  5709  001E0C  513A               	movf	getFingerPosition@value& (0+255),w,b
  5710                           
  5711                           ; BSR set to: 1
  5712  001E0E  0012               	return		;funcret
  5713  001E10                     __end_of_getFingerPosition:
  5714                           	opt callstack 0
  5715                           
  5716 ;; *************** function _readUSART *****************
  5717 ;; Defined at:
  5718 ;;		line 281 in file "mylib.h"
  5719 ;; Parameters:    Size  Location     Type
  5720 ;;		None
  5721 ;; Auto vars:     Size  Location     Type
  5722 ;;  value           1    6[BANK1 ] unsigned char 
  5723 ;; Return value:  Size  Location     Type
  5724 ;;                  1    wreg      unsigned char 
  5725 ;; Registers used:
  5726 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5727 ;; Tracked objects:
  5728 ;;		On entry : 0/1
  5729 ;;		On exit  : 3F/1
  5730 ;;		Unchanged: 0/0
  5731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5732 ;;      Params:         0       0       0       0
  5733 ;;      Locals:         0       0       1       0
  5734 ;;      Temps:          0       0       0       0
  5735 ;;      Totals:         0       0       1       0
  5736 ;;Total ram usage:        1 bytes
  5737 ;; Hardware stack levels used:    1
  5738 ;; Hardware stack levels required when called:    7
  5739 ;; This function calls:
  5740 ;;		___awmod
  5741 ;; This function is called by:
  5742 ;;		_getFingerStatus
  5743 ;;		_getFingerPosition
  5744 ;; This function uses a non-reentrant model
  5745 ;;
  5746                           
  5747                           	psect	text30
  5748  0018D6                     __ptext30:
  5749                           	opt callstack 0
  5750  0018D6                     _readUSART:
  5751                           	opt callstack 19
  5752                           
  5753                           ;mylib.h: 282: unsigned char value;;mylib.h: 283: while(USARTinput_val[ir] == 0);
  5754                           
  5755                           ; BSR set to: 1
  5756                           ;incstack = 0
  5757  0018D6  0100               	movlb	0	; () banked
  5758  0018D8  519D               	movf	_ir& (0+255),w,b
  5759  0018DA  0F60               	addlw	low _USARTinput_val
  5760  0018DC  6ED9               	movwf	fsr2l,c
  5761  0018DE  6ADA               	clrf	fsr2h,c
  5762  0018E0  50DF               	movf	indf2,w,c
  5763  0018E2  B4D8               	btfsc	status,2,c
  5764  0018E4  D7F8               	goto	_readUSART
  5765                           
  5766                           ; BSR set to: 0
  5767                           ;mylib.h: 284: value = USARTinput_data[ir];
  5768  0018E6  0E00               	movlw	low _USARTinput_data
  5769  0018E8  259D               	addwf	_ir& (0+255),w,b
  5770  0018EA  6ED9               	movwf	fsr2l,c
  5771  0018EC  6ADA               	clrf	fsr2h,c
  5772  0018EE  0E01               	movlw	high _USARTinput_data
  5773  0018F0  22DA               	addwfc	fsr2h,f,c
  5774  0018F2  50DF               	movf	indf2,w,c
  5775  0018F4  0101               	movlb	1	; () banked
  5776  0018F6  6F38               	movwf	readUSART@value& (0+255),b
  5777                           
  5778                           ;mylib.h: 285: USARTinput_val[ir] = 0;
  5779  0018F8  0100               	movlb	0	; () banked
  5780  0018FA  519D               	movf	_ir& (0+255),w,b
  5781  0018FC  0F60               	addlw	low _USARTinput_val
  5782  0018FE  6ED9               	movwf	fsr2l,c
  5783  001900  6ADA               	clrf	fsr2h,c
  5784  001902  0E00               	movlw	0
  5785  001904  6EDF               	movwf	indf2,c
  5786                           
  5787                           ; BSR set to: 0
  5788                           ;mylib.h: 286: ir = (ir+1) % USARTinput_length;
  5789  001906  0E01               	movlw	1
  5790  001908  259D               	addwf	_ir& (0+255),w,b
  5791  00190A  0101               	movlb	1	; () banked
  5792  00190C  6F32               	movwf	___awmod@dividend& (0+255),b
  5793  00190E  6B33               	clrf	(___awmod@dividend+1)& (0+255),b
  5794  001910  0E00               	movlw	0
  5795  001912  2333               	addwfc	(___awmod@dividend+1)& (0+255),f,b
  5796  001914  C0C5  F134         	movff	_USARTinput_length,___awmod@divisor
  5797  001918  6B35               	clrf	(___awmod@divisor+1)& (0+255),b
  5798  00191A  ECC6  F00B         	call	___awmod	;wreg free
  5799  00191E  5132               	movf	?___awmod& (0+255),w,b
  5800  001920  0100               	movlb	0	; () banked
  5801  001922  6F9D               	movwf	_ir& (0+255),b
  5802                           
  5803                           ; BSR set to: 0
  5804                           ;mylib.h: 287: return value;
  5805  001924  0101               	movlb	1	; () banked
  5806  001926  5138               	movf	readUSART@value& (0+255),w,b
  5807                           
  5808                           ; BSR set to: 1
  5809  001928  0012               	return		;funcret
  5810  00192A                     __end_of_readUSART:
  5811                           	opt callstack 0
  5812                           
  5813 ;; *************** function ___awmod *****************
  5814 ;; Defined at:
  5815 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\awmod.c"
  5816 ;; Parameters:    Size  Location     Type
  5817 ;;  dividend        2    0[BANK1 ] int 
  5818 ;;  divisor         2    2[BANK1 ] int 
  5819 ;; Auto vars:     Size  Location     Type
  5820 ;;  sign            1    5[BANK1 ] unsigned char 
  5821 ;;  counter         1    4[BANK1 ] unsigned char 
  5822 ;; Return value:  Size  Location     Type
  5823 ;;                  2    0[BANK1 ] int 
  5824 ;; Registers used:
  5825 ;;		wreg, status,2, status,0
  5826 ;; Tracked objects:
  5827 ;;		On entry : 3F/1
  5828 ;;		On exit  : 3F/1
  5829 ;;		Unchanged: 0/0
  5830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5831 ;;      Params:         0       0       4       0
  5832 ;;      Locals:         0       0       2       0
  5833 ;;      Temps:          0       0       0       0
  5834 ;;      Totals:         0       0       6       0
  5835 ;;Total ram usage:        6 bytes
  5836 ;; Hardware stack levels used:    1
  5837 ;; Hardware stack levels required when called:    6
  5838 ;; This function calls:
  5839 ;;		Nothing
  5840 ;; This function is called by:
  5841 ;;		_readUSART
  5842 ;;		_readUSART_withTIMEOUT
  5843 ;; This function uses a non-reentrant model
  5844 ;;
  5845                           
  5846                           	psect	text31
  5847  00178C                     __ptext31:
  5848                           	opt callstack 0
  5849  00178C                     ___awmod:
  5850                           	opt callstack 23
  5851                           
  5852                           ; BSR set to: 1
  5853                           
  5854                           ; BSR set to: 1
  5855                           ;incstack = 0
  5856  00178C  0E00               	movlw	0
  5857  00178E  6F37               	movwf	___awmod@sign& (0+255),b
  5858                           
  5859                           ; BSR set to: 1
  5860  001790  AF33               	btfss	(___awmod@dividend+1)& (0+255),7,b
  5861  001792  D006               	goto	l4184
  5862                           
  5863                           ; BSR set to: 1
  5864  001794  6D32               	negf	___awmod@dividend& (0+255),b
  5865  001796  1F33               	comf	(___awmod@dividend+1)& (0+255),f,b
  5866  001798  B0D8               	btfsc	status,0,c
  5867  00179A  2B33               	incf	(___awmod@dividend+1)& (0+255),f,b
  5868                           
  5869                           ; BSR set to: 1
  5870  00179C  0E01               	movlw	1
  5871  00179E  6F37               	movwf	___awmod@sign& (0+255),b
  5872  0017A0                     l4184:
  5873                           
  5874                           ; BSR set to: 1
  5875  0017A0  AF35               	btfss	(___awmod@divisor+1)& (0+255),7,b
  5876  0017A2  D004               	goto	l4188
  5877                           
  5878                           ; BSR set to: 1
  5879  0017A4  6D34               	negf	___awmod@divisor& (0+255),b
  5880  0017A6  1F35               	comf	(___awmod@divisor+1)& (0+255),f,b
  5881  0017A8  B0D8               	btfsc	status,0,c
  5882  0017AA  2B35               	incf	(___awmod@divisor+1)& (0+255),f,b
  5883  0017AC                     l4188:
  5884                           
  5885                           ; BSR set to: 1
  5886  0017AC  5134               	movf	___awmod@divisor& (0+255),w,b
  5887  0017AE  1135               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  5888  0017B0  B4D8               	btfsc	status,2,c
  5889  0017B2  D018               	goto	l4204
  5890                           
  5891                           ; BSR set to: 1
  5892  0017B4  0E01               	movlw	1
  5893  0017B6  6F36               	movwf	___awmod@counter& (0+255),b
  5894  0017B8  D004               	goto	l4194
  5895  0017BA                     l4192:
  5896                           
  5897                           ; BSR set to: 1
  5898  0017BA  90D8               	bcf	status,0,c
  5899  0017BC  3734               	rlcf	___awmod@divisor& (0+255),f,b
  5900  0017BE  3735               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  5901  0017C0  2B36               	incf	___awmod@counter& (0+255),f,b
  5902  0017C2                     l4194:
  5903                           
  5904                           ; BSR set to: 1
  5905  0017C2  AF35               	btfss	(___awmod@divisor+1)& (0+255),7,b
  5906  0017C4  D7FA               	goto	l4192
  5907  0017C6                     u4080:
  5908                           
  5909                           ; BSR set to: 1
  5910  0017C6  5134               	movf	___awmod@divisor& (0+255),w,b
  5911  0017C8  5D32               	subwf	___awmod@dividend& (0+255),w,b
  5912  0017CA  5135               	movf	(___awmod@divisor+1)& (0+255),w,b
  5913  0017CC  5933               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  5914  0017CE  A0D8               	btfss	status,0,c
  5915  0017D0  D004               	goto	l4200
  5916                           
  5917                           ; BSR set to: 1
  5918  0017D2  5134               	movf	___awmod@divisor& (0+255),w,b
  5919  0017D4  5F32               	subwf	___awmod@dividend& (0+255),f,b
  5920  0017D6  5135               	movf	(___awmod@divisor+1)& (0+255),w,b
  5921  0017D8  5B33               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  5922  0017DA                     l4200:
  5923                           
  5924                           ; BSR set to: 1
  5925  0017DA  90D8               	bcf	status,0,c
  5926  0017DC  3335               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  5927  0017DE  3334               	rrcf	___awmod@divisor& (0+255),f,b
  5928                           
  5929                           ; BSR set to: 1
  5930  0017E0  2F36               	decfsz	___awmod@counter& (0+255),f,b
  5931  0017E2  D7F1               	goto	u4080
  5932  0017E4                     l4204:
  5933                           
  5934                           ; BSR set to: 1
  5935  0017E4  5137               	movf	___awmod@sign& (0+255),w,b
  5936  0017E6  B4D8               	btfsc	status,2,c
  5937  0017E8  D004               	goto	l4208
  5938                           
  5939                           ; BSR set to: 1
  5940  0017EA  6D32               	negf	___awmod@dividend& (0+255),b
  5941  0017EC  1F33               	comf	(___awmod@dividend+1)& (0+255),f,b
  5942  0017EE  B0D8               	btfsc	status,0,c
  5943  0017F0  2B33               	incf	(___awmod@dividend+1)& (0+255),f,b
  5944  0017F2                     l4208:
  5945                           
  5946                           ; BSR set to: 1
  5947  0017F2  C132  F132         	movff	___awmod@dividend,?___awmod
  5948  0017F6  C133  F133         	movff	___awmod@dividend+1,?___awmod+1
  5949                           
  5950                           ; BSR set to: 1
  5951  0017FA  0012               	return		;funcret
  5952  0017FC                     __end_of___awmod:
  5953                           	opt callstack 0
  5954                           
  5955 ;; *************** function ___wmul *****************
  5956 ;; Defined at:
  5957 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul16.c"
  5958 ;; Parameters:    Size  Location     Type
  5959 ;;  multiplier      2    0[BANK1 ] unsigned int 
  5960 ;;  multiplicand    2    2[BANK1 ] unsigned int 
  5961 ;; Auto vars:     Size  Location     Type
  5962 ;;  product         2    4[BANK1 ] unsigned int 
  5963 ;; Return value:  Size  Location     Type
  5964 ;;                  2    0[BANK1 ] unsigned int 
  5965 ;; Registers used:
  5966 ;;		wreg, status,2, status,0, prodl, prodh
  5967 ;; Tracked objects:
  5968 ;;		On entry : 3F/1
  5969 ;;		On exit  : 3F/1
  5970 ;;		Unchanged: 0/0
  5971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5972 ;;      Params:         0       0       4       0
  5973 ;;      Locals:         0       0       2       0
  5974 ;;      Temps:          0       0       0       0
  5975 ;;      Totals:         0       0       6       0
  5976 ;;Total ram usage:        6 bytes
  5977 ;; Hardware stack levels used:    1
  5978 ;; Hardware stack levels required when called:    6
  5979 ;; This function calls:
  5980 ;;		Nothing
  5981 ;; This function is called by:
  5982 ;;		_GraspControl
  5983 ;; This function uses a non-reentrant model
  5984 ;;
  5985                           
  5986                           	psect	text32
  5987  001D02                     __ptext32:
  5988                           	opt callstack 0
  5989  001D02                     ___wmul:
  5990                           	opt callstack 23
  5991                           
  5992                           ; BSR set to: 1
  5993                           
  5994                           ; BSR set to: 1
  5995                           ;incstack = 0
  5996  001D02  5132               	movf	___wmul@multiplier& (0+255),w,b
  5997  001D04  0334               	mulwf	___wmul@multiplicand& (0+255),b
  5998  001D06  CFF3 F136          	movff	prodl,___wmul@product
  5999  001D0A  CFF4 F137          	movff	prodh,___wmul@product+1
  6000  001D0E  5132               	movf	___wmul@multiplier& (0+255),w,b
  6001  001D10  0335               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  6002  001D12  50F3               	movf	243,w,c
  6003  001D14  2737               	addwf	(___wmul@product+1)& (0+255),f,b
  6004  001D16  5133               	movf	(___wmul@multiplier+1)& (0+255),w,b
  6005  001D18  0334               	mulwf	___wmul@multiplicand& (0+255),b
  6006  001D1A  50F3               	movf	243,w,c
  6007  001D1C  2737               	addwf	(___wmul@product+1)& (0+255),f,b
  6008                           
  6009                           ; BSR set to: 1
  6010  001D1E  C136  F132         	movff	___wmul@product,?___wmul
  6011  001D22  C137  F133         	movff	___wmul@product+1,?___wmul+1
  6012                           
  6013                           ; BSR set to: 1
  6014  001D26  0012               	return		;funcret
  6015  001D28                     __end_of___wmul:
  6016                           	opt callstack 0
  6017                           
  6018 ;; *************** function ___lwdiv *****************
  6019 ;; Defined at:
  6020 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwdiv.c"
  6021 ;; Parameters:    Size  Location     Type
  6022 ;;  dividend        2    6[BANK1 ] unsigned int 
  6023 ;;  divisor         2    8[BANK1 ] unsigned int 
  6024 ;; Auto vars:     Size  Location     Type
  6025 ;;  quotient        2   11[BANK1 ] unsigned int 
  6026 ;;  counter         1   10[BANK1 ] unsigned char 
  6027 ;; Return value:  Size  Location     Type
  6028 ;;                  2    6[BANK1 ] unsigned int 
  6029 ;; Registers used:
  6030 ;;		wreg, status,2, status,0
  6031 ;; Tracked objects:
  6032 ;;		On entry : 3F/1
  6033 ;;		On exit  : 3F/1
  6034 ;;		Unchanged: 0/0
  6035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6036 ;;      Params:         0       0       4       0
  6037 ;;      Locals:         0       0       3       0
  6038 ;;      Temps:          0       0       0       0
  6039 ;;      Totals:         0       0       7       0
  6040 ;;Total ram usage:        7 bytes
  6041 ;; Hardware stack levels used:    1
  6042 ;; Hardware stack levels required when called:    6
  6043 ;; This function calls:
  6044 ;;		Nothing
  6045 ;; This function is called by:
  6046 ;;		_GraspControl
  6047 ;; This function uses a non-reentrant model
  6048 ;;
  6049                           
  6050                           	psect	text33
  6051  00197E                     __ptext33:
  6052                           	opt callstack 0
  6053  00197E                     ___lwdiv:
  6054                           	opt callstack 23
  6055                           
  6056                           ; BSR set to: 1
  6057                           
  6058                           ; BSR set to: 1
  6059                           ;incstack = 0
  6060  00197E  0E00               	movlw	0
  6061  001980  6F3E               	movwf	(___lwdiv@quotient+1)& (0+255),b
  6062  001982  0E00               	movlw	0
  6063  001984  6F3D               	movwf	___lwdiv@quotient& (0+255),b
  6064                           
  6065                           ; BSR set to: 1
  6066  001986  513A               	movf	___lwdiv@divisor& (0+255),w,b
  6067  001988  113B               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  6068  00198A  B4D8               	btfsc	status,2,c
  6069  00198C  D01C               	goto	l1064
  6070                           
  6071                           ; BSR set to: 1
  6072  00198E  0E01               	movlw	1
  6073  001990  6F3C               	movwf	___lwdiv@counter& (0+255),b
  6074  001992  D004               	goto	l4392
  6075  001994                     l4390:
  6076                           
  6077                           ; BSR set to: 1
  6078  001994  90D8               	bcf	status,0,c
  6079  001996  373A               	rlcf	___lwdiv@divisor& (0+255),f,b
  6080  001998  373B               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  6081  00199A  2B3C               	incf	___lwdiv@counter& (0+255),f,b
  6082  00199C                     l4392:
  6083                           
  6084                           ; BSR set to: 1
  6085  00199C  AF3B               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  6086  00199E  D7FA               	goto	l4390
  6087  0019A0                     u4360:
  6088                           
  6089                           ; BSR set to: 1
  6090  0019A0  90D8               	bcf	status,0,c
  6091  0019A2  373D               	rlcf	___lwdiv@quotient& (0+255),f,b
  6092  0019A4  373E               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  6093                           
  6094                           ; BSR set to: 1
  6095  0019A6  513A               	movf	___lwdiv@divisor& (0+255),w,b
  6096  0019A8  5D38               	subwf	___lwdiv@dividend& (0+255),w,b
  6097  0019AA  513B               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  6098  0019AC  5939               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  6099  0019AE  A0D8               	btfss	status,0,c
  6100  0019B0  D005               	goto	l4402
  6101                           
  6102                           ; BSR set to: 1
  6103  0019B2  513A               	movf	___lwdiv@divisor& (0+255),w,b
  6104  0019B4  5F38               	subwf	___lwdiv@dividend& (0+255),f,b
  6105  0019B6  513B               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  6106  0019B8  5B39               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  6107                           
  6108                           ; BSR set to: 1
  6109  0019BA  813D               	bsf	___lwdiv@quotient& (0+255),0,b
  6110  0019BC                     l4402:
  6111                           
  6112                           ; BSR set to: 1
  6113  0019BC  90D8               	bcf	status,0,c
  6114  0019BE  333B               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  6115  0019C0  333A               	rrcf	___lwdiv@divisor& (0+255),f,b
  6116                           
  6117                           ; BSR set to: 1
  6118  0019C2  2F3C               	decfsz	___lwdiv@counter& (0+255),f,b
  6119  0019C4  D7ED               	goto	u4360
  6120  0019C6                     l1064:
  6121                           
  6122                           ; BSR set to: 1
  6123  0019C6  C13D  F138         	movff	___lwdiv@quotient,?___lwdiv
  6124  0019CA  C13E  F139         	movff	___lwdiv@quotient+1,?___lwdiv+1
  6125                           
  6126                           ; BSR set to: 1
  6127  0019CE  0012               	return		;funcret
  6128  0019D0                     __end_of___lwdiv:
  6129                           	opt callstack 0
  6130                           
  6131 ;; *************** function _MoveMotor *****************
  6132 ;; Defined at:
  6133 ;;		line 471 in file "mylib.h"
  6134 ;; Parameters:    Size  Location     Type
  6135 ;;  S               1    wreg     unsigned char 
  6136 ;;  MA3210          1    1[BANK1 ] unsigned char 
  6137 ;;  vel             2    2[BANK1 ] unsigned int 
  6138 ;; Auto vars:     Size  Location     Type
  6139 ;;  S               1    5[BANK1 ] unsigned char 
  6140 ;;  FirstByte       1    8[BANK1 ] unsigned char 
  6141 ;;  D70             1    7[BANK1 ] unsigned char 
  6142 ;;  D8              1    6[BANK1 ] unsigned char 
  6143 ;; Return value:  Size  Location     Type
  6144 ;;                  1    wreg      void 
  6145 ;; Registers used:
  6146 ;;		wreg, status,2, status,0, cstack
  6147 ;; Tracked objects:
  6148 ;;		On entry : 3F/1
  6149 ;;		On exit  : 0/0
  6150 ;;		Unchanged: 0/0
  6151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6152 ;;      Params:         0       0       3       0
  6153 ;;      Locals:         0       0       4       0
  6154 ;;      Temps:          0       0       1       0
  6155 ;;      Totals:         0       0       8       0
  6156 ;;Total ram usage:        8 bytes
  6157 ;; Hardware stack levels used:    1
  6158 ;; Hardware stack levels required when called:    7
  6159 ;; This function calls:
  6160 ;;		_sendUSART
  6161 ;; This function is called by:
  6162 ;;		_GraspControl
  6163 ;; This function uses a non-reentrant model
  6164 ;;
  6165                           
  6166                           	psect	text34
  6167  001BE2                     __ptext34:
  6168                           	opt callstack 0
  6169  001BE2                     _MoveMotor:
  6170                           	opt callstack 22
  6171                           
  6172                           ; BSR set to: 1
  6173                           ;incstack = 0
  6174                           ;MoveMotor@S stored from wreg
  6175  001BE2  6F37               	movwf	MoveMotor@S& (0+255),b
  6176                           
  6177                           ;mylib.h: 472: unsigned char D8 = vel>>8;
  6178  001BE4  C135  F138         	movff	MoveMotor@vel+1,MoveMotor@D8
  6179                           
  6180                           ;mylib.h: 473: unsigned char D70 = vel;
  6181  001BE8  C134  F139         	movff	MoveMotor@vel,MoveMotor@D70
  6182                           
  6183                           ;mylib.h: 474: unsigned char FirstByte = (1<<7) | (S << 6) | (MA3210 << 2) | 0<<1 | (D8)
      +                          ;
  6184  001BEC  C133  F136         	movff	MoveMotor@MA3210,??_MoveMotor
  6185  001BF0  0101               	movlb	1	; () banked
  6186  001BF2  90D8               	bcf	status,0,c
  6187  001BF4  3736               	rlcf	??_MoveMotor& (0+255),f,b
  6188  001BF6  90D8               	bcf	status,0,c
  6189  001BF8  3736               	rlcf	??_MoveMotor& (0+255),f,b
  6190  001BFA  4137               	rrncf	MoveMotor@S& (0+255),w,b
  6191  001BFC  42E8               	rrncf	wreg,f,c
  6192  001BFE  0BC0               	andlw	192
  6193  001C00  1136               	iorwf	??_MoveMotor& (0+255),w,b
  6194  001C02  1138               	iorwf	MoveMotor@D8& (0+255),w,b
  6195  001C04  0980               	iorlw	128
  6196  001C06  6F3A               	movwf	MoveMotor@FirstByte& (0+255),b
  6197                           
  6198                           ; BSR set to: 1
  6199                           ;mylib.h: 475: sendUSART(FirstByte);
  6200  001C08  513A               	movf	MoveMotor@FirstByte& (0+255),w,b
  6201  001C0A  EC5B  F00F         	call	_sendUSART
  6202                           
  6203                           ;mylib.h: 476: sendUSART(D70);
  6204  001C0E  0101               	movlb	1	; () banked
  6205  001C10  5139               	movf	MoveMotor@D70& (0+255),w,b
  6206  001C12  EC5B  F00F         	call	_sendUSART
  6207  001C16  0012               	return		;funcret
  6208  001C18                     __end_of_MoveMotor:
  6209                           	opt callstack 0
  6210                           
  6211 ;; *************** function _sendUSART *****************
  6212 ;; Defined at:
  6213 ;;		line 264 in file "mylib.h"
  6214 ;; Parameters:    Size  Location     Type
  6215 ;;  A               1    wreg     unsigned char 
  6216 ;; Auto vars:     Size  Location     Type
  6217 ;;  A               1    0[BANK1 ] unsigned char 
  6218 ;; Return value:  Size  Location     Type
  6219 ;;                  1    wreg      void 
  6220 ;; Registers used:
  6221 ;;		wreg
  6222 ;; Tracked objects:
  6223 ;;		On entry : 0/0
  6224 ;;		On exit  : 0/0
  6225 ;;		Unchanged: 0/0
  6226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6227 ;;      Params:         0       0       0       0
  6228 ;;      Locals:         0       0       1       0
  6229 ;;      Temps:          0       0       0       0
  6230 ;;      Totals:         0       0       1       0
  6231 ;;Total ram usage:        1 bytes
  6232 ;; Hardware stack levels used:    1
  6233 ;; Hardware stack levels required when called:    6
  6234 ;; This function calls:
  6235 ;;		Nothing
  6236 ;; This function is called by:
  6237 ;;		_sendUSART_int
  6238 ;;		_MoveMotor
  6239 ;;		_getFingerStatus
  6240 ;;		_getFingerPosition
  6241 ;;		_GraspPreshape
  6242 ;;		_main
  6243 ;; This function uses a non-reentrant model
  6244 ;;
  6245                           
  6246                           	psect	text35
  6247  001EB6                     __ptext35:
  6248                           	opt callstack 0
  6249  001EB6                     _sendUSART:
  6250                           	opt callstack 23
  6251                           
  6252                           ;incstack = 0
  6253                           ;sendUSART@A stored from wreg
  6254  001EB6  0101               	movlb	1	; () banked
  6255  001EB8  6F32               	movwf	sendUSART@A& (0+255),b
  6256                           
  6257                           ;mylib.h: 265: TXREG=A;
  6258  001EBA  C132  FFAD         	movff	sendUSART@A,4013	;volatile
  6259  001EBE                     l174:
  6260  001EBE  B2AC               	btfsc	172,1,c	;volatile
  6261  001EC0  0012               	return	
  6262  001EC2  D7FD               	goto	l174
  6263  001EC4                     __end_of_sendUSART:
  6264                           	opt callstack 0
  6265                           
  6266 ;; *************** function _Display_number *****************
  6267 ;; Defined at:
  6268 ;;		line 189 in file "mylib.h"
  6269 ;; Parameters:    Size  Location     Type
  6270 ;;  number          2    5[BANK1 ] unsigned int 
  6271 ;; Auto vars:     Size  Location     Type
  6272 ;;		None
  6273 ;; Return value:  Size  Location     Type
  6274 ;;                  1    wreg      void 
  6275 ;; Registers used:
  6276 ;;		wreg, status,2, status,0, cstack
  6277 ;; Tracked objects:
  6278 ;;		On entry : 3F/1
  6279 ;;		On exit  : 0/0
  6280 ;;		Unchanged: 0/0
  6281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6282 ;;      Params:         0       0       2       0
  6283 ;;      Locals:         0       0       0       0
  6284 ;;      Temps:          0       0       0       0
  6285 ;;      Totals:         0       0       2       0
  6286 ;;Total ram usage:        2 bytes
  6287 ;; Hardware stack levels used:    1
  6288 ;; Hardware stack levels required when called:    7
  6289 ;; This function calls:
  6290 ;;		_Display_segment
  6291 ;;		_Reset_segments
  6292 ;;		___lwmod
  6293 ;; This function is called by:
  6294 ;;		_main
  6295 ;; This function uses a non-reentrant model
  6296 ;;
  6297                           
  6298                           	psect	text36
  6299  000BBC                     __ptext36:
  6300                           	opt callstack 0
  6301  000BBC                     _Display_number:
  6302                           	opt callstack 23
  6303                           
  6304                           ; BSR set to: 1
  6305                           ;mylib.h: 190: Reset_segments();
  6306                           
  6307                           ;incstack = 0
  6308  000BBC  EC34  F00F         	call	_Reset_segments	;wreg free
  6309                           
  6310                           ;mylib.h: 191: switch(number%10){
  6311  000BC0  D120               	goto	l4568
  6312  000BC2                     l4546:
  6313                           
  6314                           ; BSR set to: 1
  6315                           ;mylib.h: 193: Display_segment(1,1);
  6316  000BC2  0E01               	movlw	1
  6317  000BC4  6F32               	movwf	Display_segment@on_off& (0+255),b
  6318  000BC6  0E01               	movlw	1
  6319  000BC8  ECDD  F009         	call	_Display_segment
  6320                           
  6321                           ;mylib.h: 194: Display_segment(2,1);
  6322  000BCC  0E01               	movlw	1
  6323  000BCE  0101               	movlb	1	; () banked
  6324  000BD0  6F32               	movwf	Display_segment@on_off& (0+255),b
  6325  000BD2  0E02               	movlw	2
  6326  000BD4  ECDD  F009         	call	_Display_segment
  6327                           
  6328                           ;mylib.h: 195: Display_segment(3,1);
  6329  000BD8  0E01               	movlw	1
  6330  000BDA  0101               	movlb	1	; () banked
  6331  000BDC  6F32               	movwf	Display_segment@on_off& (0+255),b
  6332  000BDE  0E03               	movlw	3
  6333  000BE0  ECDD  F009         	call	_Display_segment
  6334                           
  6335                           ;mylib.h: 196: Display_segment(4,1);
  6336  000BE4  0E01               	movlw	1
  6337  000BE6  0101               	movlb	1	; () banked
  6338  000BE8  6F32               	movwf	Display_segment@on_off& (0+255),b
  6339  000BEA  0E04               	movlw	4
  6340  000BEC  ECDD  F009         	call	_Display_segment
  6341                           
  6342                           ;mylib.h: 197: Display_segment(5,1);
  6343  000BF0  0E01               	movlw	1
  6344  000BF2  0101               	movlb	1	; () banked
  6345  000BF4  6F32               	movwf	Display_segment@on_off& (0+255),b
  6346  000BF6  0E05               	movlw	5
  6347  000BF8  ECDD  F009         	call	_Display_segment
  6348                           
  6349                           ;mylib.h: 198: Display_segment(6,1);
  6350  000BFC  0E01               	movlw	1
  6351  000BFE  0101               	movlb	1	; () banked
  6352  000C00  6F32               	movwf	Display_segment@on_off& (0+255),b
  6353  000C02  0E06               	movlw	6
  6354  000C04  ECDD  F009         	call	_Display_segment
  6355                           
  6356                           ;mylib.h: 199: break;
  6357  000C08  0012               	return	
  6358  000C0A                     l4548:
  6359                           
  6360                           ; BSR set to: 1
  6361                           ;mylib.h: 201: Display_segment(3,1);
  6362  000C0A  0E01               	movlw	1
  6363  000C0C  6F32               	movwf	Display_segment@on_off& (0+255),b
  6364  000C0E  0E03               	movlw	3
  6365  000C10  ECDD  F009         	call	_Display_segment
  6366                           
  6367                           ;mylib.h: 202: Display_segment(4,1);
  6368  000C14  0E01               	movlw	1
  6369  000C16  0101               	movlb	1	; () banked
  6370  000C18  6F32               	movwf	Display_segment@on_off& (0+255),b
  6371  000C1A  0E04               	movlw	4
  6372  000C1C  ECDD  F009         	call	_Display_segment
  6373                           
  6374                           ;mylib.h: 203: break;
  6375  000C20  0012               	return	
  6376  000C22                     l4550:
  6377                           
  6378                           ; BSR set to: 1
  6379                           ;mylib.h: 205: Display_segment(5,1);
  6380  000C22  0E01               	movlw	1
  6381  000C24  6F32               	movwf	Display_segment@on_off& (0+255),b
  6382  000C26  0E05               	movlw	5
  6383  000C28  ECDD  F009         	call	_Display_segment
  6384                           
  6385                           ;mylib.h: 206: Display_segment(4,1);
  6386  000C2C  0E01               	movlw	1
  6387  000C2E  0101               	movlb	1	; () banked
  6388  000C30  6F32               	movwf	Display_segment@on_off& (0+255),b
  6389  000C32  0E04               	movlw	4
  6390  000C34  ECDD  F009         	call	_Display_segment
  6391                           
  6392                           ;mylib.h: 207: Display_segment(7,1);
  6393  000C38  0E01               	movlw	1
  6394  000C3A  0101               	movlb	1	; () banked
  6395  000C3C  6F32               	movwf	Display_segment@on_off& (0+255),b
  6396  000C3E  0E07               	movlw	7
  6397  000C40  ECDD  F009         	call	_Display_segment
  6398                           
  6399                           ;mylib.h: 208: Display_segment(1,1);
  6400  000C44  0E01               	movlw	1
  6401  000C46  0101               	movlb	1	; () banked
  6402  000C48  6F32               	movwf	Display_segment@on_off& (0+255),b
  6403  000C4A  0E01               	movlw	1
  6404  000C4C  ECDD  F009         	call	_Display_segment
  6405                           
  6406                           ;mylib.h: 209: Display_segment(2,1);
  6407  000C50  0E01               	movlw	1
  6408  000C52  0101               	movlb	1	; () banked
  6409  000C54  6F32               	movwf	Display_segment@on_off& (0+255),b
  6410  000C56  0E02               	movlw	2
  6411  000C58  ECDD  F009         	call	_Display_segment
  6412                           
  6413                           ;mylib.h: 210: break;
  6414  000C5C  0012               	return	
  6415  000C5E                     l4552:
  6416                           
  6417                           ; BSR set to: 1
  6418                           ;mylib.h: 212: Display_segment(5,1);
  6419  000C5E  0E01               	movlw	1
  6420  000C60  6F32               	movwf	Display_segment@on_off& (0+255),b
  6421  000C62  0E05               	movlw	5
  6422  000C64  ECDD  F009         	call	_Display_segment
  6423                           
  6424                           ;mylib.h: 213: Display_segment(4,1);
  6425  000C68  0E01               	movlw	1
  6426  000C6A  0101               	movlb	1	; () banked
  6427  000C6C  6F32               	movwf	Display_segment@on_off& (0+255),b
  6428  000C6E  0E04               	movlw	4
  6429  000C70  ECDD  F009         	call	_Display_segment
  6430                           
  6431                           ;mylib.h: 214: Display_segment(7,1);
  6432  000C74  0E01               	movlw	1
  6433  000C76  0101               	movlb	1	; () banked
  6434  000C78  6F32               	movwf	Display_segment@on_off& (0+255),b
  6435  000C7A  0E07               	movlw	7
  6436  000C7C  ECDD  F009         	call	_Display_segment
  6437                           
  6438                           ;mylib.h: 215: Display_segment(3,1);
  6439  000C80  0E01               	movlw	1
  6440  000C82  0101               	movlb	1	; () banked
  6441  000C84  6F32               	movwf	Display_segment@on_off& (0+255),b
  6442  000C86  0E03               	movlw	3
  6443  000C88  ECDD  F009         	call	_Display_segment
  6444                           
  6445                           ;mylib.h: 216: Display_segment(2,1);
  6446  000C8C  0E01               	movlw	1
  6447  000C8E  0101               	movlb	1	; () banked
  6448  000C90  6F32               	movwf	Display_segment@on_off& (0+255),b
  6449  000C92  0E02               	movlw	2
  6450  000C94  ECDD  F009         	call	_Display_segment
  6451                           
  6452                           ;mylib.h: 217: break;
  6453  000C98  0012               	return	
  6454  000C9A                     l4554:
  6455                           
  6456                           ; BSR set to: 1
  6457                           ;mylib.h: 219: Display_segment(6,1);
  6458  000C9A  0E01               	movlw	1
  6459  000C9C  6F32               	movwf	Display_segment@on_off& (0+255),b
  6460  000C9E  0E06               	movlw	6
  6461  000CA0  ECDD  F009         	call	_Display_segment
  6462                           
  6463                           ;mylib.h: 220: Display_segment(4,1);
  6464  000CA4  0E01               	movlw	1
  6465  000CA6  0101               	movlb	1	; () banked
  6466  000CA8  6F32               	movwf	Display_segment@on_off& (0+255),b
  6467  000CAA  0E04               	movlw	4
  6468  000CAC  ECDD  F009         	call	_Display_segment
  6469                           
  6470                           ;mylib.h: 221: Display_segment(7,1);
  6471  000CB0  0E01               	movlw	1
  6472  000CB2  0101               	movlb	1	; () banked
  6473  000CB4  6F32               	movwf	Display_segment@on_off& (0+255),b
  6474  000CB6  0E07               	movlw	7
  6475  000CB8  ECDD  F009         	call	_Display_segment
  6476                           
  6477                           ;mylib.h: 222: Display_segment(3,1);
  6478  000CBC  0E01               	movlw	1
  6479  000CBE  0101               	movlb	1	; () banked
  6480  000CC0  6F32               	movwf	Display_segment@on_off& (0+255),b
  6481  000CC2  0E03               	movlw	3
  6482  000CC4  ECDD  F009         	call	_Display_segment
  6483                           
  6484                           ;mylib.h: 223: break;
  6485  000CC8  0012               	return	
  6486  000CCA                     l4556:
  6487                           
  6488                           ; BSR set to: 1
  6489                           ;mylib.h: 225: Display_segment(5,1);
  6490  000CCA  0E01               	movlw	1
  6491  000CCC  6F32               	movwf	Display_segment@on_off& (0+255),b
  6492  000CCE  0E05               	movlw	5
  6493  000CD0  ECDD  F009         	call	_Display_segment
  6494                           
  6495                           ;mylib.h: 226: Display_segment(6,1);
  6496  000CD4  0E01               	movlw	1
  6497  000CD6  0101               	movlb	1	; () banked
  6498  000CD8  6F32               	movwf	Display_segment@on_off& (0+255),b
  6499  000CDA  0E06               	movlw	6
  6500  000CDC  ECDD  F009         	call	_Display_segment
  6501                           
  6502                           ;mylib.h: 227: Display_segment(7,1);
  6503  000CE0  0E01               	movlw	1
  6504  000CE2  0101               	movlb	1	; () banked
  6505  000CE4  6F32               	movwf	Display_segment@on_off& (0+255),b
  6506  000CE6  0E07               	movlw	7
  6507  000CE8  ECDD  F009         	call	_Display_segment
  6508                           
  6509                           ;mylib.h: 228: Display_segment(3,1);
  6510  000CEC  0E01               	movlw	1
  6511  000CEE  0101               	movlb	1	; () banked
  6512  000CF0  6F32               	movwf	Display_segment@on_off& (0+255),b
  6513  000CF2  0E03               	movlw	3
  6514  000CF4  ECDD  F009         	call	_Display_segment
  6515                           
  6516                           ;mylib.h: 229: Display_segment(2,1);
  6517  000CF8  0E01               	movlw	1
  6518  000CFA  0101               	movlb	1	; () banked
  6519  000CFC  6F32               	movwf	Display_segment@on_off& (0+255),b
  6520  000CFE  0E02               	movlw	2
  6521  000D00  ECDD  F009         	call	_Display_segment
  6522                           
  6523                           ;mylib.h: 230: break;
  6524  000D04  0012               	return	
  6525  000D06                     l4558:
  6526                           
  6527                           ; BSR set to: 1
  6528                           ;mylib.h: 232: Display_segment(5,1);
  6529  000D06  0E01               	movlw	1
  6530  000D08  6F32               	movwf	Display_segment@on_off& (0+255),b
  6531  000D0A  0E05               	movlw	5
  6532  000D0C  ECDD  F009         	call	_Display_segment
  6533                           
  6534                           ;mylib.h: 233: Display_segment(6,1);
  6535  000D10  0E01               	movlw	1
  6536  000D12  0101               	movlb	1	; () banked
  6537  000D14  6F32               	movwf	Display_segment@on_off& (0+255),b
  6538  000D16  0E06               	movlw	6
  6539  000D18  ECDD  F009         	call	_Display_segment
  6540                           
  6541                           ;mylib.h: 234: Display_segment(1,1);
  6542  000D1C  0E01               	movlw	1
  6543  000D1E  0101               	movlb	1	; () banked
  6544  000D20  6F32               	movwf	Display_segment@on_off& (0+255),b
  6545  000D22  0E01               	movlw	1
  6546  000D24  ECDD  F009         	call	_Display_segment
  6547                           
  6548                           ;mylib.h: 235: Display_segment(2,1);
  6549  000D28  0E01               	movlw	1
  6550  000D2A  0101               	movlb	1	; () banked
  6551  000D2C  6F32               	movwf	Display_segment@on_off& (0+255),b
  6552  000D2E  0E02               	movlw	2
  6553  000D30  ECDD  F009         	call	_Display_segment
  6554                           
  6555                           ;mylib.h: 236: Display_segment(3,1);
  6556  000D34  0E01               	movlw	1
  6557  000D36  0101               	movlb	1	; () banked
  6558  000D38  6F32               	movwf	Display_segment@on_off& (0+255),b
  6559  000D3A  0E03               	movlw	3
  6560  000D3C  ECDD  F009         	call	_Display_segment
  6561                           
  6562                           ;mylib.h: 237: Display_segment(7,1);
  6563  000D40  0E01               	movlw	1
  6564  000D42  0101               	movlb	1	; () banked
  6565  000D44  6F32               	movwf	Display_segment@on_off& (0+255),b
  6566  000D46  0E07               	movlw	7
  6567  000D48  ECDD  F009         	call	_Display_segment
  6568                           
  6569                           ;mylib.h: 238: break;
  6570  000D4C  0012               	return	
  6571  000D4E                     l4560:
  6572                           
  6573                           ; BSR set to: 1
  6574                           ;mylib.h: 240: Display_segment(5,1);
  6575  000D4E  0E01               	movlw	1
  6576  000D50  6F32               	movwf	Display_segment@on_off& (0+255),b
  6577  000D52  0E05               	movlw	5
  6578  000D54  ECDD  F009         	call	_Display_segment
  6579                           
  6580                           ;mylib.h: 241: Display_segment(4,1);
  6581  000D58  0E01               	movlw	1
  6582  000D5A  0101               	movlb	1	; () banked
  6583  000D5C  6F32               	movwf	Display_segment@on_off& (0+255),b
  6584  000D5E  0E04               	movlw	4
  6585  000D60  ECDD  F009         	call	_Display_segment
  6586                           
  6587                           ;mylib.h: 242: Display_segment(3,1);
  6588  000D64  0E01               	movlw	1
  6589  000D66  0101               	movlb	1	; () banked
  6590  000D68  6F32               	movwf	Display_segment@on_off& (0+255),b
  6591  000D6A  0E03               	movlw	3
  6592  000D6C  ECDD  F009         	call	_Display_segment
  6593                           
  6594                           ;mylib.h: 243: break;
  6595  000D70  0012               	return	
  6596  000D72                     l4562:
  6597                           
  6598                           ; BSR set to: 1
  6599                           ;mylib.h: 245: Display_segment(1,1);
  6600  000D72  0E01               	movlw	1
  6601  000D74  6F32               	movwf	Display_segment@on_off& (0+255),b
  6602  000D76  0E01               	movlw	1
  6603  000D78  ECDD  F009         	call	_Display_segment
  6604                           
  6605                           ;mylib.h: 246: Display_segment(2,1);
  6606  000D7C  0E01               	movlw	1
  6607  000D7E  0101               	movlb	1	; () banked
  6608  000D80  6F32               	movwf	Display_segment@on_off& (0+255),b
  6609  000D82  0E02               	movlw	2
  6610  000D84  ECDD  F009         	call	_Display_segment
  6611                           
  6612                           ;mylib.h: 247: Display_segment(3,1);
  6613  000D88  0E01               	movlw	1
  6614  000D8A  0101               	movlb	1	; () banked
  6615  000D8C  6F32               	movwf	Display_segment@on_off& (0+255),b
  6616  000D8E  0E03               	movlw	3
  6617  000D90  ECDD  F009         	call	_Display_segment
  6618                           
  6619                           ;mylib.h: 248: Display_segment(4,1);
  6620  000D94  0E01               	movlw	1
  6621  000D96  0101               	movlb	1	; () banked
  6622  000D98  6F32               	movwf	Display_segment@on_off& (0+255),b
  6623  000D9A  0E04               	movlw	4
  6624  000D9C  ECDD  F009         	call	_Display_segment
  6625                           
  6626                           ;mylib.h: 249: Display_segment(5,1);
  6627  000DA0  0E01               	movlw	1
  6628  000DA2  0101               	movlb	1	; () banked
  6629  000DA4  6F32               	movwf	Display_segment@on_off& (0+255),b
  6630  000DA6  0E05               	movlw	5
  6631  000DA8  ECDD  F009         	call	_Display_segment
  6632                           
  6633                           ;mylib.h: 250: Display_segment(6,1);
  6634  000DAC  0E01               	movlw	1
  6635  000DAE  0101               	movlb	1	; () banked
  6636  000DB0  6F32               	movwf	Display_segment@on_off& (0+255),b
  6637  000DB2  0E06               	movlw	6
  6638  000DB4  ECDD  F009         	call	_Display_segment
  6639                           
  6640                           ;mylib.h: 251: Display_segment(7,1);
  6641  000DB8  0E01               	movlw	1
  6642  000DBA  0101               	movlb	1	; () banked
  6643  000DBC  6F32               	movwf	Display_segment@on_off& (0+255),b
  6644  000DBE  0E07               	movlw	7
  6645  000DC0  ECDD  F009         	call	_Display_segment
  6646                           
  6647                           ;mylib.h: 252: break;
  6648  000DC4  0012               	return	
  6649  000DC6                     l4564:
  6650                           
  6651                           ; BSR set to: 1
  6652                           ;mylib.h: 254: Display_segment(3,1);
  6653  000DC6  0E01               	movlw	1
  6654  000DC8  6F32               	movwf	Display_segment@on_off& (0+255),b
  6655  000DCA  0E03               	movlw	3
  6656  000DCC  ECDD  F009         	call	_Display_segment
  6657                           
  6658                           ;mylib.h: 255: Display_segment(4,1);
  6659  000DD0  0E01               	movlw	1
  6660  000DD2  0101               	movlb	1	; () banked
  6661  000DD4  6F32               	movwf	Display_segment@on_off& (0+255),b
  6662  000DD6  0E04               	movlw	4
  6663  000DD8  ECDD  F009         	call	_Display_segment
  6664                           
  6665                           ;mylib.h: 256: Display_segment(5,1);
  6666  000DDC  0E01               	movlw	1
  6667  000DDE  0101               	movlb	1	; () banked
  6668  000DE0  6F32               	movwf	Display_segment@on_off& (0+255),b
  6669  000DE2  0E05               	movlw	5
  6670  000DE4  ECDD  F009         	call	_Display_segment
  6671                           
  6672                           ;mylib.h: 257: Display_segment(6,1);
  6673  000DE8  0E01               	movlw	1
  6674  000DEA  0101               	movlb	1	; () banked
  6675  000DEC  6F32               	movwf	Display_segment@on_off& (0+255),b
  6676  000DEE  0E06               	movlw	6
  6677  000DF0  ECDD  F009         	call	_Display_segment
  6678                           
  6679                           ;mylib.h: 258: Display_segment(7,1);
  6680  000DF4  0E01               	movlw	1
  6681  000DF6  0101               	movlb	1	; () banked
  6682  000DF8  6F32               	movwf	Display_segment@on_off& (0+255),b
  6683  000DFA  0E07               	movlw	7
  6684  000DFC  ECDD  F009         	call	_Display_segment
  6685                           
  6686                           ;mylib.h: 259: break;
  6687  000E00  0012               	return	
  6688  000E02                     l4568:
  6689  000E02  C137  F132         	movff	Display_number@number,___lwmod@dividend
  6690  000E06  C138  F133         	movff	Display_number@number+1,___lwmod@dividend+1
  6691  000E0A  0E00               	movlw	0
  6692  000E0C  0101               	movlb	1	; () banked
  6693  000E0E  6F35               	movwf	(___lwmod@divisor+1)& (0+255),b
  6694  000E10  0E0A               	movlw	10
  6695  000E12  6F34               	movwf	___lwmod@divisor& (0+255),b
  6696  000E14  EC95  F00D         	call	___lwmod	;wreg free
  6697                           
  6698                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6699                           ; Switch size 1, requested type "simple"
  6700                           ; Number of cases is 1, Range of values is 0 to 0
  6701                           ; switch strategies available:
  6702                           ; Name         Instructions Cycles
  6703                           ; simple_byte            4     3 (average)
  6704                           ;	Chosen strategy is simple_byte
  6705  000E18  5133               	movf	(?___lwmod+1)& (0+255),w,b
  6706  000E1A  0A00               	xorlw	0	; case 0
  6707  000E1C  A4D8               	btfss	status,2,c
  6708  000E1E  0012               	return	
  6709                           
  6710                           ; BSR set to: 1
  6711                           ; Switch size 1, requested type "simple"
  6712                           ; Number of cases is 10, Range of values is 0 to 9
  6713                           ; switch strategies available:
  6714                           ; Name         Instructions Cycles
  6715                           ; simple_byte           31    16 (average)
  6716                           ;	Chosen strategy is simple_byte
  6717  000E20  5132               	movf	?___lwmod& (0+255),w,b
  6718  000E22  0A00               	xorlw	0	; case 0
  6719  000E24  B4D8               	btfsc	status,2,c
  6720  000E26  D6CD               	goto	l4546
  6721  000E28  0A01               	xorlw	1	; case 1
  6722  000E2A  B4D8               	btfsc	status,2,c
  6723  000E2C  D6EE               	goto	l4548
  6724  000E2E  0A03               	xorlw	3	; case 2
  6725  000E30  B4D8               	btfsc	status,2,c
  6726  000E32  D6F7               	goto	l4550
  6727  000E34  0A01               	xorlw	1	; case 3
  6728  000E36  B4D8               	btfsc	status,2,c
  6729  000E38  D712               	goto	l4552
  6730  000E3A  0A07               	xorlw	7	; case 4
  6731  000E3C  B4D8               	btfsc	status,2,c
  6732  000E3E  D72D               	goto	l4554
  6733  000E40  0A01               	xorlw	1	; case 5
  6734  000E42  B4D8               	btfsc	status,2,c
  6735  000E44  D742               	goto	l4556
  6736  000E46  0A03               	xorlw	3	; case 6
  6737  000E48  B4D8               	btfsc	status,2,c
  6738  000E4A  D75D               	goto	l4558
  6739  000E4C  0A01               	xorlw	1	; case 7
  6740  000E4E  B4D8               	btfsc	status,2,c
  6741  000E50  D77E               	goto	l4560
  6742  000E52  0A0F               	xorlw	15	; case 8
  6743  000E54  B4D8               	btfsc	status,2,c
  6744  000E56  D78D               	goto	l4562
  6745  000E58  0A01               	xorlw	1	; case 9
  6746  000E5A  A4D8               	btfss	status,2,c
  6747  000E5C  0012               	return	
  6748  000E5E  D7B3               	goto	l4564
  6749  000E60                     __end_of_Display_number:
  6750                           	opt callstack 0
  6751                           
  6752 ;; *************** function ___lwmod *****************
  6753 ;; Defined at:
  6754 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwmod.c"
  6755 ;; Parameters:    Size  Location     Type
  6756 ;;  dividend        2    0[BANK1 ] unsigned int 
  6757 ;;  divisor         2    2[BANK1 ] unsigned int 
  6758 ;; Auto vars:     Size  Location     Type
  6759 ;;  counter         1    4[BANK1 ] unsigned char 
  6760 ;; Return value:  Size  Location     Type
  6761 ;;                  2    0[BANK1 ] unsigned int 
  6762 ;; Registers used:
  6763 ;;		wreg, status,2, status,0
  6764 ;; Tracked objects:
  6765 ;;		On entry : 3F/1
  6766 ;;		On exit  : 3F/1
  6767 ;;		Unchanged: 0/0
  6768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6769 ;;      Params:         0       0       4       0
  6770 ;;      Locals:         0       0       1       0
  6771 ;;      Temps:          0       0       0       0
  6772 ;;      Totals:         0       0       5       0
  6773 ;;Total ram usage:        5 bytes
  6774 ;; Hardware stack levels used:    1
  6775 ;; Hardware stack levels required when called:    6
  6776 ;; This function calls:
  6777 ;;		Nothing
  6778 ;; This function is called by:
  6779 ;;		_blinkDisplayLetterC
  6780 ;;		_Display_number
  6781 ;; This function uses a non-reentrant model
  6782 ;;
  6783                           
  6784                           	psect	text37
  6785  001B2A                     __ptext37:
  6786                           	opt callstack 0
  6787  001B2A                     ___lwmod:
  6788                           	opt callstack 23
  6789                           
  6790                           ; BSR set to: 1
  6791                           
  6792                           ;incstack = 0
  6793  001B2A  5134               	movf	___lwmod@divisor& (0+255),w,b
  6794  001B2C  1135               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  6795  001B2E  B4D8               	btfsc	status,2,c
  6796  001B30  D018               	goto	l1074
  6797                           
  6798                           ; BSR set to: 1
  6799  001B32  0E01               	movlw	1
  6800  001B34  6F36               	movwf	___lwmod@counter& (0+255),b
  6801  001B36  D004               	goto	l4412
  6802  001B38                     l4410:
  6803                           
  6804                           ; BSR set to: 1
  6805  001B38  90D8               	bcf	status,0,c
  6806  001B3A  3734               	rlcf	___lwmod@divisor& (0+255),f,b
  6807  001B3C  3735               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  6808  001B3E  2B36               	incf	___lwmod@counter& (0+255),f,b
  6809  001B40                     l4412:
  6810                           
  6811                           ; BSR set to: 1
  6812  001B40  AF35               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  6813  001B42  D7FA               	goto	l4410
  6814  001B44                     u4390:
  6815                           
  6816                           ; BSR set to: 1
  6817  001B44  5134               	movf	___lwmod@divisor& (0+255),w,b
  6818  001B46  5D32               	subwf	___lwmod@dividend& (0+255),w,b
  6819  001B48  5135               	movf	(___lwmod@divisor+1)& (0+255),w,b
  6820  001B4A  5933               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  6821  001B4C  A0D8               	btfss	status,0,c
  6822  001B4E  D004               	goto	l4418
  6823                           
  6824                           ; BSR set to: 1
  6825  001B50  5134               	movf	___lwmod@divisor& (0+255),w,b
  6826  001B52  5F32               	subwf	___lwmod@dividend& (0+255),f,b
  6827  001B54  5135               	movf	(___lwmod@divisor+1)& (0+255),w,b
  6828  001B56  5B33               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  6829  001B58                     l4418:
  6830                           
  6831                           ; BSR set to: 1
  6832  001B58  90D8               	bcf	status,0,c
  6833  001B5A  3335               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  6834  001B5C  3334               	rrcf	___lwmod@divisor& (0+255),f,b
  6835                           
  6836                           ; BSR set to: 1
  6837  001B5E  2F36               	decfsz	___lwmod@counter& (0+255),f,b
  6838  001B60  D7F1               	goto	u4390
  6839  001B62                     l1074:
  6840                           
  6841                           ; BSR set to: 1
  6842  001B62  C132  F132         	movff	___lwmod@dividend,?___lwmod
  6843  001B66  C133  F133         	movff	___lwmod@dividend+1,?___lwmod+1
  6844                           
  6845                           ; BSR set to: 1
  6846  001B6A  0012               	return		;funcret
  6847  001B6C                     __end_of___lwmod:
  6848                           	opt callstack 0
  6849                           
  6850 ;; *************** function _Reset_segments *****************
  6851 ;; Defined at:
  6852 ;;		line 115 in file "mylib.h"
  6853 ;; Parameters:    Size  Location     Type
  6854 ;;		None
  6855 ;; Auto vars:     Size  Location     Type
  6856 ;;		None
  6857 ;; Return value:  Size  Location     Type
  6858 ;;                  1    wreg      void 
  6859 ;; Registers used:
  6860 ;;		None
  6861 ;; Tracked objects:
  6862 ;;		On entry : 0/0
  6863 ;;		On exit  : 0/0
  6864 ;;		Unchanged: 0/0
  6865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6866 ;;      Params:         0       0       0       0
  6867 ;;      Locals:         0       0       0       0
  6868 ;;      Temps:          0       0       0       0
  6869 ;;      Totals:         0       0       0       0
  6870 ;;Total ram usage:        0 bytes
  6871 ;; Hardware stack levels used:    1
  6872 ;; Hardware stack levels required when called:    6
  6873 ;; This function calls:
  6874 ;;		Nothing
  6875 ;; This function is called by:
  6876 ;;		_Display_letter
  6877 ;;		_blinkDisplayLetterC
  6878 ;;		_Display_number
  6879 ;;		_main
  6880 ;; This function uses a non-reentrant model
  6881 ;;
  6882                           
  6883                           	psect	text38
  6884  001E68                     __ptext38:
  6885                           	opt callstack 0
  6886  001E68                     _Reset_segments:
  6887                           	opt callstack 23
  6888                           
  6889                           ;mylib.h: 116: PORTDbits.RD4=0;
  6890                           
  6891                           ; BSR set to: 1
  6892                           ;incstack = 0
  6893  001E68  9883               	bcf	131,4,c	;volatile
  6894                           
  6895                           ;mylib.h: 117: PORTDbits.RD5=0;
  6896  001E6A  9A83               	bcf	131,5,c	;volatile
  6897                           
  6898                           ;mylib.h: 118: PORTDbits.RD6=0;
  6899  001E6C  9C83               	bcf	131,6,c	;volatile
  6900                           
  6901                           ;mylib.h: 119: PORTDbits.RD7=0;
  6902  001E6E  9E83               	bcf	131,7,c	;volatile
  6903                           
  6904                           ;mylib.h: 120: PORTBbits.RB0=0;
  6905  001E70  9081               	bcf	129,0,c	;volatile
  6906                           
  6907                           ;mylib.h: 121: PORTBbits.RB1=0;
  6908  001E72  9281               	bcf	129,1,c	;volatile
  6909                           
  6910                           ;mylib.h: 122: PORTBbits.RB2=0;
  6911  001E74  9481               	bcf	129,2,c	;volatile
  6912  001E76  0012               	return		;funcret
  6913  001E78                     __end_of_Reset_segments:
  6914                           	opt callstack 0
  6915                           
  6916 ;; *************** function _Display_segment *****************
  6917 ;; Defined at:
  6918 ;;		line 126 in file "mylib.h"
  6919 ;; Parameters:    Size  Location     Type
  6920 ;;  segment         1    wreg     unsigned char 
  6921 ;;  on_off          1    0[BANK1 ] unsigned char 
  6922 ;; Auto vars:     Size  Location     Type
  6923 ;;  segment         1    1[BANK1 ] unsigned char 
  6924 ;; Return value:  Size  Location     Type
  6925 ;;                  1    wreg      void 
  6926 ;; Registers used:
  6927 ;;		wreg, status,2, status,0
  6928 ;; Tracked objects:
  6929 ;;		On entry : 3F/1
  6930 ;;		On exit  : 0/0
  6931 ;;		Unchanged: 0/0
  6932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6933 ;;      Params:         0       0       1       0
  6934 ;;      Locals:         0       0       1       0
  6935 ;;      Temps:          0       0       0       0
  6936 ;;      Totals:         0       0       2       0
  6937 ;;Total ram usage:        2 bytes
  6938 ;; Hardware stack levels used:    1
  6939 ;; Hardware stack levels required when called:    6
  6940 ;; This function calls:
  6941 ;;		Nothing
  6942 ;; This function is called by:
  6943 ;;		_Display_letter
  6944 ;;		_Display_number
  6945 ;; This function uses a non-reentrant model
  6946 ;;
  6947                           
  6948                           	psect	text39
  6949  0013BA                     __ptext39:
  6950                           	opt callstack 0
  6951  0013BA                     _Display_segment:
  6952                           	opt callstack 22
  6953                           
  6954                           ;incstack = 0
  6955                           ;Display_segment@segment stored from wreg
  6956  0013BA  6F33               	movwf	Display_segment@segment& (0+255),b
  6957                           
  6958                           ;mylib.h: 127: switch(segment){
  6959  0013BC  D02A               	goto	l4242
  6960  0013BE                     l134:
  6961                           
  6962                           ; BSR set to: 1
  6963                           ;mylib.h: 129: PORTDbits.RD4=on_off;
  6964  0013BE  B132               	btfsc	Display_segment@on_off& (0+255),0,b
  6965  0013C0  D002               	bra	u4135
  6966  0013C2  9883               	bcf	131,4,c	;volatile
  6967  0013C4  D001               	bra	u4136
  6968  0013C6                     u4135:
  6969  0013C6  8883               	bsf	131,4,c	;volatile
  6970  0013C8                     u4136:
  6971                           
  6972                           ;mylib.h: 130: break;
  6973  0013C8  0012               	return	
  6974  0013CA                     l136:
  6975                           
  6976                           ; BSR set to: 1
  6977                           ;mylib.h: 132: PORTDbits.RD5=on_off;
  6978  0013CA  B132               	btfsc	Display_segment@on_off& (0+255),0,b
  6979  0013CC  D002               	bra	u4145
  6980  0013CE  9A83               	bcf	131,5,c	;volatile
  6981  0013D0  D001               	bra	u4146
  6982  0013D2                     u4145:
  6983  0013D2  8A83               	bsf	131,5,c	;volatile
  6984  0013D4                     u4146:
  6985                           
  6986                           ;mylib.h: 133: break;
  6987  0013D4  0012               	return	
  6988  0013D6                     l137:
  6989                           
  6990                           ; BSR set to: 1
  6991                           ;mylib.h: 135: PORTDbits.RD6=on_off;
  6992  0013D6  B132               	btfsc	Display_segment@on_off& (0+255),0,b
  6993  0013D8  D002               	bra	u4155
  6994  0013DA  9C83               	bcf	131,6,c	;volatile
  6995  0013DC  D001               	bra	u4156
  6996  0013DE                     u4155:
  6997  0013DE  8C83               	bsf	131,6,c	;volatile
  6998  0013E0                     u4156:
  6999                           
  7000                           ;mylib.h: 136: break;
  7001  0013E0  0012               	return	
  7002  0013E2                     l138:
  7003                           
  7004                           ; BSR set to: 1
  7005                           ;mylib.h: 138: PORTDbits.RD7=on_off;
  7006  0013E2  B132               	btfsc	Display_segment@on_off& (0+255),0,b
  7007  0013E4  D002               	bra	u4165
  7008  0013E6  9E83               	bcf	131,7,c	;volatile
  7009  0013E8  D001               	bra	u4166
  7010  0013EA                     u4165:
  7011  0013EA  8E83               	bsf	131,7,c	;volatile
  7012  0013EC                     u4166:
  7013                           
  7014                           ;mylib.h: 139: break;
  7015  0013EC  0012               	return	
  7016  0013EE                     l139:
  7017                           
  7018                           ; BSR set to: 1
  7019                           ;mylib.h: 141: PORTBbits.RB0=on_off;
  7020  0013EE  B132               	btfsc	Display_segment@on_off& (0+255),0,b
  7021  0013F0  D002               	bra	u4175
  7022  0013F2  9081               	bcf	129,0,c	;volatile
  7023  0013F4  D001               	bra	u4176
  7024  0013F6                     u4175:
  7025  0013F6  8081               	bsf	129,0,c	;volatile
  7026  0013F8                     u4176:
  7027                           
  7028                           ;mylib.h: 142: break;
  7029  0013F8  0012               	return	
  7030  0013FA                     l140:
  7031                           
  7032                           ; BSR set to: 1
  7033                           ;mylib.h: 144: PORTBbits.RB1=on_off;
  7034  0013FA  B132               	btfsc	Display_segment@on_off& (0+255),0,b
  7035  0013FC  D002               	bra	u4185
  7036  0013FE  9281               	bcf	129,1,c	;volatile
  7037  001400  D001               	bra	u4186
  7038  001402                     u4185:
  7039  001402  8281               	bsf	129,1,c	;volatile
  7040  001404                     u4186:
  7041                           
  7042                           ;mylib.h: 145: break;
  7043  001404  0012               	return	
  7044  001406                     l141:
  7045                           
  7046                           ; BSR set to: 1
  7047                           ;mylib.h: 147: PORTBbits.RB2=on_off;
  7048  001406  B132               	btfsc	Display_segment@on_off& (0+255),0,b
  7049  001408  D002               	bra	u4195
  7050  00140A  9481               	bcf	129,2,c	;volatile
  7051  00140C  D001               	bra	u4196
  7052  00140E                     u4195:
  7053  00140E  8481               	bsf	129,2,c	;volatile
  7054  001410                     u4196:
  7055                           
  7056                           ;mylib.h: 148: break;
  7057  001410  0012               	return	
  7058  001412                     l4242:
  7059  001412  0101               	movlb	1	; () banked
  7060  001414  5133               	movf	Display_segment@segment& (0+255),w,b
  7061                           
  7062                           ; Switch size 1, requested type "simple"
  7063                           ; Number of cases is 7, Range of values is 1 to 7
  7064                           ; switch strategies available:
  7065                           ; Name         Instructions Cycles
  7066                           ; simple_byte           22    12 (average)
  7067                           ;	Chosen strategy is simple_byte
  7068  001416  0A01               	xorlw	1	; case 1
  7069  001418  B4D8               	btfsc	status,2,c
  7070  00141A  D7D1               	goto	l134
  7071  00141C  0A03               	xorlw	3	; case 2
  7072  00141E  B4D8               	btfsc	status,2,c
  7073  001420  D7D4               	goto	l136
  7074  001422  0A01               	xorlw	1	; case 3
  7075  001424  B4D8               	btfsc	status,2,c
  7076  001426  D7D7               	goto	l137
  7077  001428  0A07               	xorlw	7	; case 4
  7078  00142A  B4D8               	btfsc	status,2,c
  7079  00142C  D7DA               	goto	l138
  7080  00142E  0A01               	xorlw	1	; case 5
  7081  001430  B4D8               	btfsc	status,2,c
  7082  001432  D7DD               	goto	l139
  7083  001434  0A03               	xorlw	3	; case 6
  7084  001436  B4D8               	btfsc	status,2,c
  7085  001438  D7E0               	goto	l140
  7086  00143A  0A01               	xorlw	1	; case 7
  7087  00143C  A4D8               	btfss	status,2,c
  7088  00143E  0012               	return	
  7089  001440  D7E2               	goto	l141
  7090  001442                     __end_of_Display_segment:
  7091                           	opt callstack 0
  7092                           
  7093 ;; *************** function _Delay_ms *****************
  7094 ;; Defined at:
  7095 ;;		line 106 in file "mylib.h"
  7096 ;; Parameters:    Size  Location     Type
  7097 ;;  time            2    0[BANK1 ] unsigned int 
  7098 ;; Auto vars:     Size  Location     Type
  7099 ;;  timer           2    3[BANK1 ] unsigned int 
  7100 ;; Return value:  Size  Location     Type
  7101 ;;                  1    wreg      void 
  7102 ;; Registers used:
  7103 ;;		wreg, status,2, status,0
  7104 ;; Tracked objects:
  7105 ;;		On entry : 3F/1
  7106 ;;		On exit  : 3F/1
  7107 ;;		Unchanged: 0/0
  7108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7109 ;;      Params:         0       0       2       0
  7110 ;;      Locals:         0       0       2       0
  7111 ;;      Temps:          0       0       1       0
  7112 ;;      Totals:         0       0       5       0
  7113 ;;Total ram usage:        5 bytes
  7114 ;; Hardware stack levels used:    1
  7115 ;; Hardware stack levels required when called:    6
  7116 ;; This function calls:
  7117 ;;		Nothing
  7118 ;; This function is called by:
  7119 ;;		_main
  7120 ;; This function uses a non-reentrant model
  7121 ;;
  7122                           
  7123                           	psect	text40
  7124  001BA8                     __ptext40:
  7125                           	opt callstack 0
  7126  001BA8                     _Delay_ms:
  7127                           	opt callstack 24
  7128                           
  7129                           ; BSR set to: 1
  7130                           ;mylib.h: 107: unsigned int timer;;mylib.h: 108: if(time>0)
  7131                           
  7132                           ;incstack = 0
  7133  001BA8  5132               	movf	Delay_ms@time& (0+255),w,b
  7134  001BAA  1133               	iorwf	(Delay_ms@time+1)& (0+255),w,b
  7135  001BAC  B4D8               	btfsc	status,2,c
  7136  001BAE  0012               	return	
  7137                           
  7138                           ; BSR set to: 1
  7139                           ;mylib.h: 109: for(timer=0; timer<time; timer++){
  7140  001BB0  0E00               	movlw	0
  7141  001BB2  6F36               	movwf	(Delay_ms@timer+1)& (0+255),b
  7142  001BB4  0E00               	movlw	0
  7143  001BB6  6F35               	movwf	Delay_ms@timer& (0+255),b
  7144  001BB8  D00D               	goto	l124
  7145  001BBA                     l4526:
  7146                           
  7147                           ; BSR set to: 1
  7148                           ;mylib.h: 110: _delay((unsigned long)((1)*(40000000/4000.0)));
  7149  001BBA  0E0D               	movlw	13
  7150  001BBC  0101               	movlb	1	; () banked
  7151  001BBE  6F34               	movwf	??_Delay_ms& (0+255),b
  7152  001BC0  0EFB               	movlw	251
  7153  001BC2                     u5757:
  7154  001BC2  2EE8               	decfsz	wreg,f,c
  7155  001BC4  D7FE               	bra	u5757
  7156  001BC6  2F34               	decfsz	??_Delay_ms& (0+255),f,b
  7157  001BC8  D7FC               	bra	u5757
  7158  001BCA  F000 F000          	nop2	
  7159  001BCE  0101               	movlb	1	; () banked
  7160  001BD0  4B35               	infsnz	Delay_ms@timer& (0+255),f,b
  7161  001BD2  2B36               	incf	(Delay_ms@timer+1)& (0+255),f,b
  7162  001BD4                     l124:
  7163                           
  7164                           ; BSR set to: 1
  7165  001BD4  5132               	movf	Delay_ms@time& (0+255),w,b
  7166  001BD6  5D35               	subwf	Delay_ms@timer& (0+255),w,b
  7167  001BD8  5133               	movf	(Delay_ms@time+1)& (0+255),w,b
  7168  001BDA  5936               	subwfb	(Delay_ms@timer+1)& (0+255),w,b
  7169  001BDC  B0D8               	btfsc	status,0,c
  7170  001BDE  0012               	return	
  7171  001BE0  D7EC               	goto	l4526
  7172  001BE2                     __end_of_Delay_ms:
  7173                           	opt callstack 0
  7174                           
  7175 ;; *************** function _InterruptAction_low *****************
  7176 ;; Defined at:
  7177 ;;		line 87 in file "main.c"
  7178 ;; Parameters:    Size  Location     Type
  7179 ;;		None
  7180 ;; Auto vars:     Size  Location     Type
  7181 ;;		None
  7182 ;; Return value:  Size  Location     Type
  7183 ;;                  1    wreg      void 
  7184 ;; Registers used:
  7185 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7186 ;; Tracked objects:
  7187 ;;		On entry : 0/0
  7188 ;;		On exit  : 0/0
  7189 ;;		Unchanged: 0/0
  7190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7191 ;;      Params:         0       0       0       0
  7192 ;;      Locals:         0       0       0       0
  7193 ;;      Temps:          0       9       0       0
  7194 ;;      Totals:         0       9       0       0
  7195 ;;Total ram usage:        9 bytes
  7196 ;; Hardware stack levels used:    1
  7197 ;; Hardware stack levels required when called:    5
  7198 ;; This function calls:
  7199 ;;		_ADC
  7200 ;;		_amplifiedSignalValue
  7201 ;;		i1___awmod
  7202 ;;		i1___lwdiv
  7203 ;;		i1___wmul
  7204 ;; This function is called by:
  7205 ;;		Interrupt level 1
  7206 ;; This function uses a non-reentrant model
  7207 ;;
  7208                           
  7209                           	psect	intcodelo
  7210  000018                     __pintcodelo:
  7211                           	opt callstack 0
  7212  000018                     _InterruptAction_low:
  7213                           	opt callstack 19
  7214                           
  7215                           ; BSR set to: 1
  7216                           ;incstack = 0
  7217  000018  8042               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  7218  00001A  CFD8 F0DB          	movff	status,??_InterruptAction_low+2
  7219  00001E  CFE8 F0DC          	movff	wreg,??_InterruptAction_low+3
  7220  000022  CFE0 F0DD          	movff	bsr,??_InterruptAction_low+4
  7221  000026  CFD9 F0DE          	movff	fsr2l,??_InterruptAction_low+5
  7222  00002A  CFDA F0DF          	movff	fsr2h,??_InterruptAction_low+6
  7223  00002E  CFF3 F0E0          	movff	prodl,??_InterruptAction_low+7
  7224  000032  CFF4 F0E1          	movff	prodh,??_InterruptAction_low+8
  7225                           
  7226                           ;main.c: 88: if(PIR1bits.TMR1IF){
  7227  000036  A09E               	btfss	158,0,c	;volatile
  7228  000038  D071               	goto	i1l4938
  7229                           
  7230                           ;main.c: 91: TMR1H = 0b11011000;
  7231  00003A  0ED8               	movlw	216
  7232  00003C  6ECF               	movwf	207,c	;volatile
  7233                           
  7234                           ;main.c: 92: TMR1L = 0b11101111;
  7235  00003E  0EEF               	movlw	239
  7236  000040  6ECE               	movwf	206,c	;volatile
  7237                           
  7238                           ;main.c: 94: ADC();
  7239  000042  ECB6  F00D         	call	_ADC	;wreg free
  7240                           
  7241                           ;main.c: 96: flexor_averagePart = (flexor + is * flexor_averagePart)/(is+1);
  7242  000046  C02B  F01D         	movff	_is,i1___wmul@multiplier
  7243  00004A  C02C  F01E         	movff	_is+1,i1___wmul@multiplier+1
  7244  00004E  C029  F01F         	movff	_flexor_averagePart,i1___wmul@multiplicand
  7245  000052  C02A  F020         	movff	_flexor_averagePart+1,i1___wmul@multiplicand+1
  7246  000056  EC94  F00E         	call	i1___wmul	;wreg free
  7247  00005A  502F               	movf	_flexor^0,w,c
  7248  00005C  241D               	addwf	?i1___wmul^0,w,c
  7249  00005E  6E23               	movwf	i1___lwdiv@dividend^0,c
  7250  000060  5030               	movf	(_flexor+1)^0,w,c
  7251  000062  201E               	addwfc	(?i1___wmul+1)^0,w,c
  7252  000064  6E24               	movwf	(i1___lwdiv@dividend+1)^0,c
  7253  000066  0E01               	movlw	1
  7254  000068  242B               	addwf	_is^0,w,c
  7255  00006A  6E25               	movwf	i1___lwdiv@divisor^0,c
  7256  00006C  0E00               	movlw	0
  7257  00006E  202C               	addwfc	(_is+1)^0,w,c
  7258  000070  6E26               	movwf	(i1___lwdiv@divisor+1)^0,c
  7259  000072  EC95  F00C         	call	i1___lwdiv	;wreg free
  7260  000076  C023  F029         	movff	?i1___lwdiv,_flexor_averagePart
  7261  00007A  C024  F02A         	movff	?i1___lwdiv+1,_flexor_averagePart+1
  7262                           
  7263                           ; BSR set to: 0
  7264                           ;main.c: 97: extensor_averagePart = (extensor + is * extensor_averagePart)/(is+1);
  7265  00007E  C02B  F01D         	movff	_is,i1___wmul@multiplier
  7266  000082  C02C  F01E         	movff	_is+1,i1___wmul@multiplier+1
  7267  000086  C027  F01F         	movff	_extensor_averagePart,i1___wmul@multiplicand
  7268  00008A  C028  F020         	movff	_extensor_averagePart+1,i1___wmul@multiplicand+1
  7269  00008E  EC94  F00E         	call	i1___wmul	;wreg free
  7270  000092  502D               	movf	_extensor^0,w,c
  7271  000094  241D               	addwf	?i1___wmul^0,w,c
  7272  000096  6E23               	movwf	i1___lwdiv@dividend^0,c
  7273  000098  502E               	movf	(_extensor+1)^0,w,c
  7274  00009A  201E               	addwfc	(?i1___wmul+1)^0,w,c
  7275  00009C  6E24               	movwf	(i1___lwdiv@dividend+1)^0,c
  7276  00009E  0E01               	movlw	1
  7277  0000A0  242B               	addwf	_is^0,w,c
  7278  0000A2  6E25               	movwf	i1___lwdiv@divisor^0,c
  7279  0000A4  0E00               	movlw	0
  7280  0000A6  202C               	addwfc	(_is+1)^0,w,c
  7281  0000A8  6E26               	movwf	(i1___lwdiv@divisor+1)^0,c
  7282  0000AA  EC95  F00C         	call	i1___lwdiv	;wreg free
  7283  0000AE  C023  F027         	movff	?i1___lwdiv,_extensor_averagePart
  7284  0000B2  C024  F028         	movff	?i1___lwdiv+1,_extensor_averagePart+1
  7285                           
  7286                           ; BSR set to: 0
  7287                           ;main.c: 98: is++;
  7288  0000B6  4A2B               	infsnz	_is^0,f,c
  7289  0000B8  2A2C               	incf	(_is+1)^0,f,c
  7290                           
  7291                           ; BSR set to: 0
  7292                           ;main.c: 99: if (is == controlRate) {
  7293  0000BA  5041               	movf	_controlRate^0,w,c
  7294  0000BC  6FD9               	movwf	??_InterruptAction_low& (0+255),b
  7295  0000BE  6BDA               	clrf	(??_InterruptAction_low+1)& (0+255),b
  7296  0000C0  502B               	movf	_is^0,w,c
  7297  0000C2  19D9               	xorwf	??_InterruptAction_low& (0+255),w,b
  7298  0000C4  E12A               	bnz	i1l4936
  7299  0000C6  502C               	movf	(_is+1)^0,w,c
  7300  0000C8  19DA               	xorwf	(??_InterruptAction_low+1)& (0+255),w,b
  7301  0000CA  A4D8               	btfss	status,2,c
  7302  0000CC  D026               	goto	i1l4936
  7303                           
  7304                           ; BSR set to: 0
  7305                           ;main.c: 101: flexor_average = amplifiedSignalValue(flexor_averagePart,MVF_DATA);
  7306  0000CE  C029  F0D1         	movff	_flexor_averagePart,amplifiedSignalValue@signalVal
  7307  0000D2  C02A  F0D2         	movff	_flexor_averagePart+1,amplifiedSignalValue@signalVal+1
  7308  0000D6  C03E  F0D3         	movff	_MVF_DATA,amplifiedSignalValue@maxVal
  7309  0000DA  EC64  F00A         	call	_amplifiedSignalValue	;wreg free
  7310  0000DE  C0D1  F098         	movff	?_amplifiedSignalValue,_flexor_average
  7311  0000E2  C0D2  F099         	movff	?_amplifiedSignalValue+1,_flexor_average+1
  7312                           
  7313                           ;main.c: 102: extensor_average = amplifiedSignalValue(extensor_averagePart,MVE_DATA);
  7314  0000E6  C027  F0D1         	movff	_extensor_averagePart,amplifiedSignalValue@signalVal
  7315  0000EA  C028  F0D2         	movff	_extensor_averagePart+1,amplifiedSignalValue@signalVal+1
  7316  0000EE  C03F  F0D3         	movff	_MVE_DATA,amplifiedSignalValue@maxVal
  7317  0000F2  EC64  F00A         	call	_amplifiedSignalValue	;wreg free
  7318  0000F6  C0D1  F096         	movff	?_amplifiedSignalValue,_extensor_average
  7319  0000FA  C0D2  F097         	movff	?_amplifiedSignalValue+1,_extensor_average+1
  7320                           
  7321                           ; BSR set to: 0
  7322                           ;main.c: 104: flexor_averagePart = 0;
  7323  0000FE  0E00               	movlw	0
  7324  000100  6E2A               	movwf	(_flexor_averagePart+1)^0,c
  7325  000102  0E00               	movlw	0
  7326  000104  6E29               	movwf	_flexor_averagePart^0,c
  7327                           
  7328                           ; BSR set to: 0
  7329                           ;main.c: 105: extensor_averagePart = 0;
  7330  000106  0E00               	movlw	0
  7331  000108  6E28               	movwf	(_extensor_averagePart+1)^0,c
  7332  00010A  0E00               	movlw	0
  7333  00010C  6E27               	movwf	_extensor_averagePart^0,c
  7334                           
  7335                           ; BSR set to: 0
  7336                           ;main.c: 106: is = 0;
  7337  00010E  0E00               	movlw	0
  7338  000110  6E2C               	movwf	(_is+1)^0,c
  7339  000112  0E00               	movlw	0
  7340  000114  6E2B               	movwf	_is^0,c
  7341                           
  7342                           ; BSR set to: 0
  7343                           ;main.c: 107: CT10F = 1;
  7344  000116  0E01               	movlw	1
  7345  000118  6F9C               	movwf	_CT10F& (0+255),b
  7346  00011A                     i1l4936:
  7347                           
  7348                           ; BSR set to: 0
  7349                           ;main.c: 108: };main.c: 109: PIR1bits.TMR1IF = 0;
  7350  00011A  909E               	bcf	158,0,c	;volatile
  7351  00011C                     i1l4938:
  7352                           
  7353                           ;main.c: 110: };main.c: 112: if(PIR1bits.RCIF){
  7354  00011C  AA9E               	btfss	158,5,c	;volatile
  7355  00011E  D01B               	goto	i1l463
  7356                           
  7357                           ;main.c: 113: USARTinput_data[iw] = RCREG;
  7358  000120  0E00               	movlw	low _USARTinput_data
  7359  000122  2435               	addwf	_iw^0,w,c
  7360  000124  6ED9               	movwf	fsr2l,c
  7361  000126  6ADA               	clrf	fsr2h,c
  7362  000128  0E01               	movlw	high _USARTinput_data
  7363  00012A  22DA               	addwfc	fsr2h,f,c
  7364  00012C  CFAE FFDF          	movff	4014,indf2	;volatile
  7365                           
  7366                           ;main.c: 114: USARTinput_val[iw] = 1;
  7367  000130  5035               	movf	_iw^0,w,c
  7368  000132  0F60               	addlw	low _USARTinput_val
  7369  000134  6ED9               	movwf	fsr2l,c
  7370  000136  6ADA               	clrf	fsr2h,c
  7371  000138  0E01               	movlw	1
  7372  00013A  6EDF               	movwf	indf2,c
  7373                           
  7374                           ;main.c: 115: iw = (iw+1) % USARTinput_length;
  7375  00013C  0E01               	movlw	1
  7376  00013E  2435               	addwf	_iw^0,w,c
  7377  000140  6E1D               	movwf	i1___awmod@dividend^0,c
  7378  000142  6A1E               	clrf	(i1___awmod@dividend+1)^0,c
  7379  000144  0E00               	movlw	0
  7380  000146  221E               	addwfc	(i1___awmod@dividend+1)^0,f,c
  7381  000148  C0C5  F01F         	movff	_USARTinput_length,i1___awmod@divisor
  7382  00014C  6A20               	clrf	(i1___awmod@divisor+1)^0,c
  7383  00014E  ECFE  F00B         	call	i1___awmod	;wreg free
  7384  000152  501D               	movf	?i1___awmod^0,w,c
  7385  000154  6E35               	movwf	_iw^0,c
  7386  000156                     i1l463:
  7387  000156  C0E1  FFF4         	movff	??_InterruptAction_low+8,prodh
  7388  00015A  C0E0  FFF3         	movff	??_InterruptAction_low+7,prodl
  7389  00015E  C0DF  FFDA         	movff	??_InterruptAction_low+6,fsr2h
  7390  000162  C0DE  FFD9         	movff	??_InterruptAction_low+5,fsr2l
  7391  000166  C0DD  FFE0         	movff	??_InterruptAction_low+4,bsr
  7392  00016A  C0DC  FFE8         	movff	??_InterruptAction_low+3,wreg
  7393  00016E  C0DB  FFD8         	movff	??_InterruptAction_low+2,status
  7394  000172  9042               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  7395  000174  0010               	retfie	
  7396  000176                     __end_of_InterruptAction_low:
  7397                           	opt callstack 0
  7398                           
  7399 ;; *************** function i1___wmul *****************
  7400 ;; Defined at:
  7401 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul16.c"
  7402 ;; Parameters:    Size  Location     Type
  7403 ;;  multiplier      2   28[COMRAM] unsigned int 
  7404 ;;  multiplicand    2   30[COMRAM] unsigned int 
  7405 ;; Auto vars:     Size  Location     Type
  7406 ;;  __wmul          2   32[COMRAM] unsigned int 
  7407 ;; Return value:  Size  Location     Type
  7408 ;;                  2   28[COMRAM] unsigned int 
  7409 ;; Registers used:
  7410 ;;		wreg, status,2, status,0, prodl, prodh
  7411 ;; Tracked objects:
  7412 ;;		On entry : 0/0
  7413 ;;		On exit  : 0/0
  7414 ;;		Unchanged: 0/0
  7415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7416 ;;      Params:         4       0       0       0
  7417 ;;      Locals:         2       0       0       0
  7418 ;;      Temps:          0       0       0       0
  7419 ;;      Totals:         6       0       0       0
  7420 ;;Total ram usage:        6 bytes
  7421 ;; Hardware stack levels used:    1
  7422 ;; Hardware stack levels required when called:    3
  7423 ;; This function calls:
  7424 ;;		Nothing
  7425 ;; This function is called by:
  7426 ;;		_InterruptAction_low
  7427 ;; This function uses a non-reentrant model
  7428 ;;
  7429                           
  7430                           	psect	text42
  7431  001D28                     __ptext42:
  7432                           	opt callstack 0
  7433  001D28                     i1___wmul:
  7434                           	opt callstack 20
  7435                           
  7436                           ;incstack = 0
  7437  001D28  501D               	movf	i1___wmul@multiplier^0,w,c
  7438  001D2A  021F               	mulwf	i1___wmul@multiplicand^0,c
  7439  001D2C  CFF3 F021          	movff	prodl,i1___wmul@product
  7440  001D30  CFF4 F022          	movff	prodh,i1___wmul@product+1
  7441  001D34  501D               	movf	i1___wmul@multiplier^0,w,c
  7442  001D36  0220               	mulwf	(i1___wmul@multiplicand+1)^0,c
  7443  001D38  50F3               	movf	243,w,c
  7444  001D3A  2622               	addwf	(i1___wmul@product+1)^0,f,c
  7445  001D3C  501E               	movf	(i1___wmul@multiplier+1)^0,w,c
  7446  001D3E  021F               	mulwf	i1___wmul@multiplicand^0,c
  7447  001D40  50F3               	movf	243,w,c
  7448  001D42  2622               	addwf	(i1___wmul@product+1)^0,f,c
  7449  001D44  C021  F01D         	movff	i1___wmul@product,?i1___wmul
  7450  001D48  C022  F01E         	movff	i1___wmul@product+1,?i1___wmul+1
  7451  001D4C  0012               	return		;funcret
  7452  001D4E                     __end_ofi1___wmul:
  7453                           	opt callstack 0
  7454                           
  7455 ;; *************** function i1___lwdiv *****************
  7456 ;; Defined at:
  7457 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\lwdiv.c"
  7458 ;; Parameters:    Size  Location     Type
  7459 ;;  dividend        2   34[COMRAM] unsigned int 
  7460 ;;  divisor         2   36[COMRAM] unsigned int 
  7461 ;; Auto vars:     Size  Location     Type
  7462 ;;  __lwdiv         2    1[BANK0 ] unsigned int 
  7463 ;;  __lwdiv         1    0[BANK0 ] unsigned char 
  7464 ;; Return value:  Size  Location     Type
  7465 ;;                  2   34[COMRAM] unsigned int 
  7466 ;; Registers used:
  7467 ;;		wreg, status,2, status,0
  7468 ;; Tracked objects:
  7469 ;;		On entry : 0/0
  7470 ;;		On exit  : 3F/0
  7471 ;;		Unchanged: 0/0
  7472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7473 ;;      Params:         4       0       0       0
  7474 ;;      Locals:         0       3       0       0
  7475 ;;      Temps:          0       0       0       0
  7476 ;;      Totals:         4       3       0       0
  7477 ;;Total ram usage:        7 bytes
  7478 ;; Hardware stack levels used:    1
  7479 ;; Hardware stack levels required when called:    3
  7480 ;; This function calls:
  7481 ;;		Nothing
  7482 ;; This function is called by:
  7483 ;;		_InterruptAction_low
  7484 ;; This function uses a non-reentrant model
  7485 ;;
  7486                           
  7487                           	psect	text43
  7488  00192A                     __ptext43:
  7489                           	opt callstack 0
  7490  00192A                     i1___lwdiv:
  7491                           	opt callstack 20
  7492                           
  7493                           ;incstack = 0
  7494  00192A  0E00               	movlw	0
  7495  00192C  0100               	movlb	0	; () banked
  7496  00192E  6FC8               	movwf	(i1___lwdiv@quotient+1)& (0+255),b
  7497  001930  0E00               	movlw	0
  7498  001932  6FC7               	movwf	i1___lwdiv@quotient& (0+255),b
  7499                           
  7500                           ; BSR set to: 0
  7501  001934  5025               	movf	i1___lwdiv@divisor^0,w,c
  7502  001936  1026               	iorwf	(i1___lwdiv@divisor+1)^0,w,c
  7503  001938  B4D8               	btfsc	status,2,c
  7504  00193A  D01C               	goto	i1l1064
  7505                           
  7506                           ; BSR set to: 0
  7507  00193C  0E01               	movlw	1
  7508  00193E  6FC6               	movwf	i1___lwdiv@counter& (0+255),b
  7509  001940  D004               	goto	i1l4898
  7510  001942                     i1l4896:
  7511                           
  7512                           ; BSR set to: 0
  7513  001942  90D8               	bcf	status,0,c
  7514  001944  3625               	rlcf	i1___lwdiv@divisor^0,f,c
  7515  001946  3626               	rlcf	(i1___lwdiv@divisor+1)^0,f,c
  7516  001948  2BC6               	incf	i1___lwdiv@counter& (0+255),f,b
  7517  00194A                     i1l4898:
  7518                           
  7519                           ; BSR set to: 0
  7520  00194A  AE26               	btfss	(i1___lwdiv@divisor+1)^0,7,c
  7521  00194C  D7FA               	goto	i1l4896
  7522  00194E                     i1u507_20:
  7523                           
  7524                           ; BSR set to: 0
  7525  00194E  90D8               	bcf	status,0,c
  7526  001950  37C7               	rlcf	i1___lwdiv@quotient& (0+255),f,b
  7527  001952  37C8               	rlcf	(i1___lwdiv@quotient+1)& (0+255),f,b
  7528                           
  7529                           ; BSR set to: 0
  7530  001954  5025               	movf	i1___lwdiv@divisor^0,w,c
  7531  001956  5C23               	subwf	i1___lwdiv@dividend^0,w,c
  7532  001958  5026               	movf	(i1___lwdiv@divisor+1)^0,w,c
  7533  00195A  5824               	subwfb	(i1___lwdiv@dividend+1)^0,w,c
  7534  00195C  A0D8               	btfss	status,0,c
  7535  00195E  D005               	goto	i1l4908
  7536                           
  7537                           ; BSR set to: 0
  7538  001960  5025               	movf	i1___lwdiv@divisor^0,w,c
  7539  001962  5E23               	subwf	i1___lwdiv@dividend^0,f,c
  7540  001964  5026               	movf	(i1___lwdiv@divisor+1)^0,w,c
  7541  001966  5A24               	subwfb	(i1___lwdiv@dividend+1)^0,f,c
  7542                           
  7543                           ; BSR set to: 0
  7544  001968  81C7               	bsf	i1___lwdiv@quotient& (0+255),0,b
  7545  00196A                     i1l4908:
  7546                           
  7547                           ; BSR set to: 0
  7548  00196A  90D8               	bcf	status,0,c
  7549  00196C  3226               	rrcf	(i1___lwdiv@divisor+1)^0,f,c
  7550  00196E  3225               	rrcf	i1___lwdiv@divisor^0,f,c
  7551                           
  7552                           ; BSR set to: 0
  7553  001970  2FC6               	decfsz	i1___lwdiv@counter& (0+255),f,b
  7554  001972  D7ED               	goto	i1u507_20
  7555  001974                     i1l1064:
  7556                           
  7557                           ; BSR set to: 0
  7558  001974  C0C7  F023         	movff	i1___lwdiv@quotient,?i1___lwdiv
  7559  001978  C0C8  F024         	movff	i1___lwdiv@quotient+1,?i1___lwdiv+1
  7560                           
  7561                           ; BSR set to: 0
  7562  00197C  0012               	return		;funcret
  7563  00197E                     __end_ofi1___lwdiv:
  7564                           	opt callstack 0
  7565                           
  7566 ;; *************** function i1___awmod *****************
  7567 ;; Defined at:
  7568 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\awmod.c"
  7569 ;; Parameters:    Size  Location     Type
  7570 ;;  dividend        2   28[COMRAM] int 
  7571 ;;  divisor         2   30[COMRAM] int 
  7572 ;; Auto vars:     Size  Location     Type
  7573 ;;  __awmod         1   33[COMRAM] unsigned char 
  7574 ;;  __awmod         1   32[COMRAM] unsigned char 
  7575 ;; Return value:  Size  Location     Type
  7576 ;;                  2   28[COMRAM] int 
  7577 ;; Registers used:
  7578 ;;		wreg, status,2, status,0
  7579 ;; Tracked objects:
  7580 ;;		On entry : 0/0
  7581 ;;		On exit  : 0/0
  7582 ;;		Unchanged: 0/0
  7583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7584 ;;      Params:         4       0       0       0
  7585 ;;      Locals:         2       0       0       0
  7586 ;;      Temps:          0       0       0       0
  7587 ;;      Totals:         6       0       0       0
  7588 ;;Total ram usage:        6 bytes
  7589 ;; Hardware stack levels used:    1
  7590 ;; Hardware stack levels required when called:    3
  7591 ;; This function calls:
  7592 ;;		Nothing
  7593 ;; This function is called by:
  7594 ;;		_InterruptAction_low
  7595 ;; This function uses a non-reentrant model
  7596 ;;
  7597                           
  7598                           	psect	text44
  7599  0017FC                     __ptext44:
  7600                           	opt callstack 0
  7601  0017FC                     i1___awmod:
  7602                           	opt callstack 20
  7603                           
  7604                           ; BSR set to: 0
  7605                           ;incstack = 0
  7606  0017FC  0E00               	movlw	0
  7607  0017FE  6E22               	movwf	i1___awmod@sign^0,c
  7608  001800  AE1E               	btfss	(i1___awmod@dividend+1)^0,7,c
  7609  001802  D006               	goto	i1l3606
  7610  001804  6C1D               	negf	i1___awmod@dividend^0,c
  7611  001806  1E1E               	comf	(i1___awmod@dividend+1)^0,f,c
  7612  001808  B0D8               	btfsc	status,0,c
  7613  00180A  2A1E               	incf	(i1___awmod@dividend+1)^0,f,c
  7614  00180C  0E01               	movlw	1
  7615  00180E  6E22               	movwf	i1___awmod@sign^0,c
  7616  001810                     i1l3606:
  7617  001810  AE20               	btfss	(i1___awmod@divisor+1)^0,7,c
  7618  001812  D004               	goto	i1l3610
  7619  001814  6C1F               	negf	i1___awmod@divisor^0,c
  7620  001816  1E20               	comf	(i1___awmod@divisor+1)^0,f,c
  7621  001818  B0D8               	btfsc	status,0,c
  7622  00181A  2A20               	incf	(i1___awmod@divisor+1)^0,f,c
  7623  00181C                     i1l3610:
  7624  00181C  501F               	movf	i1___awmod@divisor^0,w,c
  7625  00181E  1020               	iorwf	(i1___awmod@divisor+1)^0,w,c
  7626  001820  B4D8               	btfsc	status,2,c
  7627  001822  D018               	goto	i1l3626
  7628  001824  0E01               	movlw	1
  7629  001826  6E21               	movwf	i1___awmod@counter^0,c
  7630  001828  D004               	goto	i1l3616
  7631  00182A                     i1l3614:
  7632  00182A  90D8               	bcf	status,0,c
  7633  00182C  361F               	rlcf	i1___awmod@divisor^0,f,c
  7634  00182E  3620               	rlcf	(i1___awmod@divisor+1)^0,f,c
  7635  001830  2A21               	incf	i1___awmod@counter^0,f,c
  7636  001832                     i1l3616:
  7637  001832  AE20               	btfss	(i1___awmod@divisor+1)^0,7,c
  7638  001834  D7FA               	goto	i1l3614
  7639  001836                     i1u328_20:
  7640  001836  501F               	movf	i1___awmod@divisor^0,w,c
  7641  001838  5C1D               	subwf	i1___awmod@dividend^0,w,c
  7642  00183A  5020               	movf	(i1___awmod@divisor+1)^0,w,c
  7643  00183C  581E               	subwfb	(i1___awmod@dividend+1)^0,w,c
  7644  00183E  A0D8               	btfss	status,0,c
  7645  001840  D004               	goto	i1l3622
  7646  001842  501F               	movf	i1___awmod@divisor^0,w,c
  7647  001844  5E1D               	subwf	i1___awmod@dividend^0,f,c
  7648  001846  5020               	movf	(i1___awmod@divisor+1)^0,w,c
  7649  001848  5A1E               	subwfb	(i1___awmod@dividend+1)^0,f,c
  7650  00184A                     i1l3622:
  7651  00184A  90D8               	bcf	status,0,c
  7652  00184C  3220               	rrcf	(i1___awmod@divisor+1)^0,f,c
  7653  00184E  321F               	rrcf	i1___awmod@divisor^0,f,c
  7654  001850  2E21               	decfsz	i1___awmod@counter^0,f,c
  7655  001852  D7F1               	goto	i1u328_20
  7656  001854                     i1l3626:
  7657  001854  5022               	movf	i1___awmod@sign^0,w,c
  7658  001856  B4D8               	btfsc	status,2,c
  7659  001858  D004               	goto	i1l3630
  7660  00185A  6C1D               	negf	i1___awmod@dividend^0,c
  7661  00185C  1E1E               	comf	(i1___awmod@dividend+1)^0,f,c
  7662  00185E  B0D8               	btfsc	status,0,c
  7663  001860  2A1E               	incf	(i1___awmod@dividend+1)^0,f,c
  7664  001862                     i1l3630:
  7665  001862  C01D  F01D         	movff	i1___awmod@dividend,?i1___awmod
  7666  001866  C01E  F01E         	movff	i1___awmod@dividend+1,?i1___awmod+1
  7667  00186A  0012               	return		;funcret
  7668  00186C                     __end_ofi1___awmod:
  7669                           	opt callstack 0
  7670                           
  7671 ;; *************** function _amplifiedSignalValue *****************
  7672 ;; Defined at:
  7673 ;;		line 356 in file "mylib.h"
  7674 ;; Parameters:    Size  Location     Type
  7675 ;;  signalVal       2   11[BANK0 ] unsigned int 
  7676 ;;  maxVal          1   13[BANK0 ] unsigned char 
  7677 ;; Auto vars:     Size  Location     Type
  7678 ;;  amplifiedSig    3   16[BANK0 ] m
  7679 ;;  amplifiedSig    2   14[BANK0 ] unsigned int 
  7680 ;; Return value:  Size  Location     Type
  7681 ;;                  2   11[BANK0 ] unsigned int 
  7682 ;; Registers used:
  7683 ;;		wreg, status,2, status,0, cstack
  7684 ;; Tracked objects:
  7685 ;;		On entry : 3F/0
  7686 ;;		On exit  : 3F/0
  7687 ;;		Unchanged: 0/0
  7688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7689 ;;      Params:         0       3       0       0
  7690 ;;      Locals:         0       5       0       0
  7691 ;;      Temps:          0       0       0       0
  7692 ;;      Totals:         0       8       0       0
  7693 ;;Total ram usage:        8 bytes
  7694 ;; Hardware stack levels used:    1
  7695 ;; Hardware stack levels required when called:    4
  7696 ;; This function calls:
  7697 ;;		i1___atdiv
  7698 ;;		i1___tmul
  7699 ;; This function is called by:
  7700 ;;		_InterruptAction_low
  7701 ;; This function uses a non-reentrant model
  7702 ;;
  7703                           
  7704                           	psect	text45
  7705  0014C8                     __ptext45:
  7706                           	opt callstack 0
  7707  0014C8                     _amplifiedSignalValue:
  7708                           	opt callstack 19
  7709                           
  7710                           ; BSR set to: 0
  7711                           ;mylib.h: 357: unsigned int amplifiedSignalValue_int;;mylib.h: 358: if(maxVal > 100) max
      +                          Val = 100;
  7712                           
  7713                           ;incstack = 0
  7714  0014C8  0E64               	movlw	100
  7715  0014CA  65D3               	cpfsgt	amplifiedSignalValue@maxVal& (0+255),b
  7716  0014CC  D002               	goto	i1l4622
  7717                           
  7718                           ; BSR set to: 0
  7719  0014CE  0E64               	movlw	100
  7720  0014D0  D004               	goto	L26
  7721  0014D2                     i1l4622:
  7722                           
  7723                           ; BSR set to: 0
  7724                           ;mylib.h: 359: else if(maxVal < 10) maxVal = 10;
  7725  0014D2  0E0A               	movlw	10
  7726  0014D4  61D3               	cpfslt	amplifiedSignalValue@maxVal& (0+255),b
  7727  0014D6  D002               	goto	i1l4626
  7728                           
  7729                           ; BSR set to: 0
  7730  0014D8  0E0A               	movlw	10
  7731  0014DA                     L26:
  7732  0014DA  6FD3               	movwf	amplifiedSignalValue@maxVal& (0+255),b
  7733  0014DC                     i1l4626:
  7734                           
  7735                           ; BSR set to: 0
  7736                           ;mylib.h: 361: short long amplifiedSignalValue_shortlong = (short long)100 * (short long
      +                          )signalVal / (short long)maxVal;
  7737  0014DC  0E64               	movlw	100
  7738  0014DE  6E20               	movwf	i1___tmul@multiplicand^0,c
  7739  0014E0  0E00               	movlw	0
  7740  0014E2  6E21               	movwf	(i1___tmul@multiplicand+1)^0,c
  7741  0014E4  0E00               	movlw	0
  7742  0014E6  6E22               	movwf	(i1___tmul@multiplicand+2)^0,c
  7743  0014E8  C0D1  F01D         	movff	amplifiedSignalValue@signalVal,i1___tmul@multiplier
  7744  0014EC  C0D2  F01E         	movff	amplifiedSignalValue@signalVal+1,i1___tmul@multiplier+1
  7745  0014F0  6A1F               	clrf	(i1___tmul@multiplier+2)^0,c
  7746  0014F2  EC51  F00D         	call	i1___tmul	;wreg free
  7747  0014F6  C01D  F0C6         	movff	?i1___tmul,i1___atdiv@dividend
  7748  0014FA  C01E  F0C7         	movff	?i1___tmul+1,i1___atdiv@dividend+1
  7749  0014FE  C01F  F0C8         	movff	?i1___tmul+2,i1___atdiv@dividend+2
  7750  001502  51D3               	movf	amplifiedSignalValue@maxVal& (0+255),w,b
  7751  001504  6FC9               	movwf	i1___atdiv@divisor& (0+255),b
  7752  001506  6BCA               	clrf	(i1___atdiv@divisor+1)& (0+255),b
  7753  001508  6BCB               	clrf	(i1___atdiv@divisor+2)& (0+255),b
  7754  00150A  ECED  F008         	call	i1___atdiv	;wreg free
  7755  00150E  C0C6  F0D6         	movff	?i1___atdiv,amplifiedSignalValue@amplifiedSignalValue_shortlong
  7756  001512  C0C7  F0D7         	movff	?i1___atdiv+1,amplifiedSignalValue@amplifiedSignalValue_shortlong+1
  7757  001516  C0C8  F0D8         	movff	?i1___atdiv+2,amplifiedSignalValue@amplifiedSignalValue_shortlong+2
  7758                           
  7759                           ; BSR set to: 0
  7760                           ;mylib.h: 362: if(amplifiedSignalValue_shortlong > 1023) amplifiedSignalValue_shortlong 
      +                          = 1023;
  7761  00151A  BFD8               	btfsc	(amplifiedSignalValue@amplifiedSignalValue_shortlong+2)& (0+255),7,b
  7762  00151C  D00C               	goto	i1l4632
  7763  00151E  51D8               	movf	(amplifiedSignalValue@amplifiedSignalValue_shortlong+2)& (0+255),w,b
  7764  001520  E104               	bnz	i1u459_20
  7765  001522  0E04               	movlw	4
  7766  001524  5DD7               	subwf	(amplifiedSignalValue@amplifiedSignalValue_shortlong+1)& (0+255),w,b
  7767  001526  A0D8               	btfss	status,0,c
  7768  001528  D006               	goto	i1l4632
  7769  00152A                     i1u459_20:
  7770                           
  7771                           ; BSR set to: 0
  7772  00152A  0EFF               	movlw	255
  7773  00152C  6FD6               	movwf	amplifiedSignalValue@amplifiedSignalValue_shortlong& (0+255),b
  7774  00152E  0E03               	movlw	3
  7775  001530  6FD7               	movwf	(amplifiedSignalValue@amplifiedSignalValue_shortlong+1)& (0+255),b
  7776  001532  0E00               	movlw	0
  7777  001534  6FD8               	movwf	(amplifiedSignalValue@amplifiedSignalValue_shortlong+2)& (0+255),b
  7778  001536                     i1l4632:
  7779                           
  7780                           ; BSR set to: 0
  7781                           ;mylib.h: 365: amplifiedSignalValue_int = amplifiedSignalValue_shortlong;
  7782  001536  C0D6  F0D4         	movff	amplifiedSignalValue@amplifiedSignalValue_shortlong,amplifiedSignalValue@amplifie
      +                          dSignalValue_int
  7783  00153A  C0D7  F0D5         	movff	amplifiedSignalValue@amplifiedSignalValue_shortlong+1,amplifiedSignalValue@amplif
      +                          iedSignalValue_int+1
  7784                           
  7785                           ; BSR set to: 0
  7786                           ;mylib.h: 367: return amplifiedSignalValue_int;
  7787  00153E  C0D4  F0D1         	movff	amplifiedSignalValue@amplifiedSignalValue_int,?_amplifiedSignalValue
  7788  001542  C0D5  F0D2         	movff	amplifiedSignalValue@amplifiedSignalValue_int+1,?_amplifiedSignalValue+1
  7789                           
  7790                           ; BSR set to: 0
  7791  001546  0012               	return		;funcret
  7792  001548                     __end_of_amplifiedSignalValue:
  7793                           	opt callstack 0
  7794                           
  7795 ;; *************** function i1___tmul *****************
  7796 ;; Defined at:
  7797 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul24.c"
  7798 ;; Parameters:    Size  Location     Type
  7799 ;;  multiplier      3   28[COMRAM] unsigned um
  7800 ;;  multiplicand    3   31[COMRAM] unsigned um
  7801 ;; Auto vars:     Size  Location     Type
  7802 ;;  __tmul          3   34[COMRAM] unsigned um
  7803 ;; Return value:  Size  Location     Type
  7804 ;;                  3   28[COMRAM] unsigned um
  7805 ;; Registers used:
  7806 ;;		wreg, status,2, status,0
  7807 ;; Tracked objects:
  7808 ;;		On entry : 3F/0
  7809 ;;		On exit  : 3F/0
  7810 ;;		Unchanged: 3F/0
  7811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7812 ;;      Params:         6       0       0       0
  7813 ;;      Locals:         3       0       0       0
  7814 ;;      Temps:          0       0       0       0
  7815 ;;      Totals:         9       0       0       0
  7816 ;;Total ram usage:        9 bytes
  7817 ;; Hardware stack levels used:    1
  7818 ;; Hardware stack levels required when called:    3
  7819 ;; This function calls:
  7820 ;;		Nothing
  7821 ;; This function is called by:
  7822 ;;		_amplifiedSignalValue
  7823 ;; This function uses a non-reentrant model
  7824 ;;
  7825                           
  7826                           	psect	text46
  7827  001AA2                     __ptext46:
  7828                           	opt callstack 0
  7829  001AA2                     i1___tmul:
  7830                           	opt callstack 19
  7831                           
  7832                           ; BSR set to: 0
  7833                           
  7834                           ; BSR set to: 0
  7835                           ;incstack = 0
  7836  001AA2  0E00               	movlw	0
  7837  001AA4  6E23               	movwf	i1___tmul@product^0,c
  7838  001AA6  0E00               	movlw	0
  7839  001AA8  6E24               	movwf	(i1___tmul@product+1)^0,c
  7840  001AAA  0E00               	movlw	0
  7841  001AAC  6E25               	movwf	(i1___tmul@product+2)^0,c
  7842  001AAE                     i1l4424:
  7843                           
  7844                           ; BSR set to: 0
  7845  001AAE  A01D               	btfss	i1___tmul@multiplier^0,0,c
  7846  001AB0  D006               	goto	i1l4428
  7847                           
  7848                           ; BSR set to: 0
  7849  001AB2  5020               	movf	i1___tmul@multiplicand^0,w,c
  7850  001AB4  2623               	addwf	i1___tmul@product^0,f,c
  7851  001AB6  5021               	movf	(i1___tmul@multiplicand+1)^0,w,c
  7852  001AB8  2224               	addwfc	(i1___tmul@product+1)^0,f,c
  7853  001ABA  5022               	movf	(i1___tmul@multiplicand+2)^0,w,c
  7854  001ABC  2225               	addwfc	(i1___tmul@product+2)^0,f,c
  7855  001ABE                     i1l4428:
  7856                           
  7857                           ; BSR set to: 0
  7858  001ABE  90D8               	bcf	status,0,c
  7859  001AC0  3620               	rlcf	i1___tmul@multiplicand^0,f,c
  7860  001AC2  3621               	rlcf	(i1___tmul@multiplicand+1)^0,f,c
  7861  001AC4  3622               	rlcf	(i1___tmul@multiplicand+2)^0,f,c
  7862  001AC6  90D8               	bcf	status,0,c
  7863  001AC8  321F               	rrcf	(i1___tmul@multiplier+2)^0,f,c
  7864  001ACA  321E               	rrcf	(i1___tmul@multiplier+1)^0,f,c
  7865  001ACC  321D               	rrcf	i1___tmul@multiplier^0,f,c
  7866                           
  7867                           ; BSR set to: 0
  7868  001ACE  501D               	movf	i1___tmul@multiplier^0,w,c
  7869  001AD0  101E               	iorwf	(i1___tmul@multiplier+1)^0,w,c
  7870  001AD2  101F               	iorwf	(i1___tmul@multiplier+2)^0,w,c
  7871  001AD4  A4D8               	btfss	status,2,c
  7872  001AD6  D7EB               	goto	i1l4424
  7873                           
  7874                           ; BSR set to: 0
  7875  001AD8  C023  F01D         	movff	i1___tmul@product,?i1___tmul
  7876  001ADC  C024  F01E         	movff	i1___tmul@product+1,?i1___tmul+1
  7877  001AE0  C025  F01F         	movff	i1___tmul@product+2,?i1___tmul+2
  7878                           
  7879                           ; BSR set to: 0
  7880  001AE4  0012               	return		;funcret
  7881  001AE6                     __end_ofi1___tmul:
  7882                           	opt callstack 0
  7883                           
  7884 ;; *************** function i1___atdiv *****************
  7885 ;; Defined at:
  7886 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\atdiv.c"
  7887 ;; Parameters:    Size  Location     Type
  7888 ;;  dividend        3    0[BANK0 ] m
  7889 ;;  divisor         3    3[BANK0 ] m
  7890 ;; Auto vars:     Size  Location     Type
  7891 ;;  __atdiv         3    8[BANK0 ] m
  7892 ;;  __atdiv         1    7[BANK0 ] unsigned char 
  7893 ;;  __atdiv         1    6[BANK0 ] unsigned char 
  7894 ;; Return value:  Size  Location     Type
  7895 ;;                  3    0[BANK0 ] m
  7896 ;; Registers used:
  7897 ;;		wreg, status,2, status,0
  7898 ;; Tracked objects:
  7899 ;;		On entry : 3F/0
  7900 ;;		On exit  : 3F/0
  7901 ;;		Unchanged: 0/0
  7902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  7903 ;;      Params:         0       6       0       0
  7904 ;;      Locals:         0       5       0       0
  7905 ;;      Temps:          0       0       0       0
  7906 ;;      Totals:         0      11       0       0
  7907 ;;Total ram usage:       11 bytes
  7908 ;; Hardware stack levels used:    1
  7909 ;; Hardware stack levels required when called:    3
  7910 ;; This function calls:
  7911 ;;		Nothing
  7912 ;; This function is called by:
  7913 ;;		_amplifiedSignalValue
  7914 ;; This function uses a non-reentrant model
  7915 ;;
  7916                           
  7917                           	psect	text47
  7918  0011DA                     __ptext47:
  7919                           	opt callstack 0
  7920  0011DA                     i1___atdiv:
  7921                           	opt callstack 19
  7922                           
  7923                           ; BSR set to: 0
  7924                           
  7925                           ; BSR set to: 0
  7926                           ;incstack = 0
  7927  0011DA  0E00               	movlw	0
  7928  0011DC  6FCD               	movwf	i1___atdiv@sign& (0+255),b
  7929                           
  7930                           ; BSR set to: 0
  7931  0011DE  AFCB               	btfss	(i1___atdiv@divisor+2)& (0+255),7,b
  7932  0011E0  D008               	goto	i1l4440
  7933                           
  7934                           ; BSR set to: 0
  7935  0011E2  1FCB               	comf	(i1___atdiv@divisor+2)& (0+255),f,b
  7936  0011E4  1FCA               	comf	(i1___atdiv@divisor+1)& (0+255),f,b
  7937  0011E6  6DC9               	negf	i1___atdiv@divisor& (0+255),b
  7938  0011E8  0E00               	movlw	0
  7939  0011EA  23CA               	addwfc	(i1___atdiv@divisor+1)& (0+255),f,b
  7940  0011EC  23CB               	addwfc	(i1___atdiv@divisor+2)& (0+255),f,b
  7941                           
  7942                           ; BSR set to: 0
  7943  0011EE  0E01               	movlw	1
  7944  0011F0  6FCD               	movwf	i1___atdiv@sign& (0+255),b
  7945  0011F2                     i1l4440:
  7946                           
  7947                           ; BSR set to: 0
  7948  0011F2  AFC8               	btfss	(i1___atdiv@dividend+2)& (0+255),7,b
  7949  0011F4  D008               	goto	i1l4446
  7950                           
  7951                           ; BSR set to: 0
  7952  0011F6  1FC8               	comf	(i1___atdiv@dividend+2)& (0+255),f,b
  7953  0011F8  1FC7               	comf	(i1___atdiv@dividend+1)& (0+255),f,b
  7954  0011FA  6DC6               	negf	i1___atdiv@dividend& (0+255),b
  7955  0011FC  0E00               	movlw	0
  7956  0011FE  23C7               	addwfc	(i1___atdiv@dividend+1)& (0+255),f,b
  7957  001200  23C8               	addwfc	(i1___atdiv@dividend+2)& (0+255),f,b
  7958                           
  7959                           ; BSR set to: 0
  7960  001202  0E01               	movlw	1
  7961  001204  1BCD               	xorwf	i1___atdiv@sign& (0+255),f,b
  7962  001206                     i1l4446:
  7963                           
  7964                           ; BSR set to: 0
  7965  001206  0E00               	movlw	0
  7966  001208  6FCE               	movwf	i1___atdiv@quotient& (0+255),b
  7967  00120A  0E00               	movlw	0
  7968  00120C  6FCF               	movwf	(i1___atdiv@quotient+1)& (0+255),b
  7969  00120E  0E00               	movlw	0
  7970  001210  6FD0               	movwf	(i1___atdiv@quotient+2)& (0+255),b
  7971                           
  7972                           ; BSR set to: 0
  7973  001212  51C9               	movf	i1___atdiv@divisor& (0+255),w,b
  7974  001214  11CA               	iorwf	(i1___atdiv@divisor+1)& (0+255),w,b
  7975  001216  11CB               	iorwf	(i1___atdiv@divisor+2)& (0+255),w,b
  7976  001218  B4D8               	btfsc	status,2,c
  7977  00121A  D023               	goto	i1l4466
  7978                           
  7979                           ; BSR set to: 0
  7980  00121C  0E01               	movlw	1
  7981  00121E  6FCC               	movwf	i1___atdiv@counter& (0+255),b
  7982  001220  D005               	goto	i1l4454
  7983  001222                     i1l4452:
  7984                           
  7985                           ; BSR set to: 0
  7986  001222  90D8               	bcf	status,0,c
  7987  001224  37C9               	rlcf	i1___atdiv@divisor& (0+255),f,b
  7988  001226  37CA               	rlcf	(i1___atdiv@divisor+1)& (0+255),f,b
  7989  001228  37CB               	rlcf	(i1___atdiv@divisor+2)& (0+255),f,b
  7990  00122A  2BCC               	incf	i1___atdiv@counter& (0+255),f,b
  7991  00122C                     i1l4454:
  7992                           
  7993                           ; BSR set to: 0
  7994  00122C  AFCB               	btfss	(i1___atdiv@divisor+2)& (0+255),7,b
  7995  00122E  D7F9               	goto	i1l4452
  7996  001230                     i1u446_20:
  7997                           
  7998                           ; BSR set to: 0
  7999  001230  90D8               	bcf	status,0,c
  8000  001232  37CE               	rlcf	i1___atdiv@quotient& (0+255),f,b
  8001  001234  37CF               	rlcf	(i1___atdiv@quotient+1)& (0+255),f,b
  8002  001236  37D0               	rlcf	(i1___atdiv@quotient+2)& (0+255),f,b
  8003                           
  8004                           ; BSR set to: 0
  8005  001238  51C9               	movf	i1___atdiv@divisor& (0+255),w,b
  8006  00123A  5DC6               	subwf	i1___atdiv@dividend& (0+255),w,b
  8007  00123C  51CA               	movf	(i1___atdiv@divisor+1)& (0+255),w,b
  8008  00123E  59C7               	subwfb	(i1___atdiv@dividend+1)& (0+255),w,b
  8009  001240  51CB               	movf	(i1___atdiv@divisor+2)& (0+255),w,b
  8010  001242  59C8               	subwfb	(i1___atdiv@dividend+2)& (0+255),w,b
  8011  001244  A0D8               	btfss	status,0,c
  8012  001246  D007               	goto	i1l781
  8013                           
  8014                           ; BSR set to: 0
  8015  001248  51C9               	movf	i1___atdiv@divisor& (0+255),w,b
  8016  00124A  5FC6               	subwf	i1___atdiv@dividend& (0+255),f,b
  8017  00124C  51CA               	movf	(i1___atdiv@divisor+1)& (0+255),w,b
  8018  00124E  5BC7               	subwfb	(i1___atdiv@dividend+1)& (0+255),f,b
  8019  001250  51CB               	movf	(i1___atdiv@divisor+2)& (0+255),w,b
  8020  001252  5BC8               	subwfb	(i1___atdiv@dividend+2)& (0+255),f,b
  8021                           
  8022                           ; BSR set to: 0
  8023  001254  81CE               	bsf	i1___atdiv@quotient& (0+255),0,b
  8024  001256                     i1l781:
  8025                           
  8026                           ; BSR set to: 0
  8027  001256  90D8               	bcf	status,0,c
  8028  001258  33CB               	rrcf	(i1___atdiv@divisor+2)& (0+255),f,b
  8029  00125A  33CA               	rrcf	(i1___atdiv@divisor+1)& (0+255),f,b
  8030  00125C  33C9               	rrcf	i1___atdiv@divisor& (0+255),f,b
  8031                           
  8032                           ; BSR set to: 0
  8033  00125E  2FCC               	decfsz	i1___atdiv@counter& (0+255),f,b
  8034  001260  D7E7               	goto	i1u446_20
  8035  001262                     i1l4466:
  8036                           
  8037                           ; BSR set to: 0
  8038  001262  51CD               	movf	i1___atdiv@sign& (0+255),w,b
  8039  001264  B4D8               	btfsc	status,2,c
  8040  001266  D006               	goto	i1l4470
  8041                           
  8042                           ; BSR set to: 0
  8043  001268  1FD0               	comf	(i1___atdiv@quotient+2)& (0+255),f,b
  8044  00126A  1FCF               	comf	(i1___atdiv@quotient+1)& (0+255),f,b
  8045  00126C  6DCE               	negf	i1___atdiv@quotient& (0+255),b
  8046  00126E  0E00               	movlw	0
  8047  001270  23CF               	addwfc	(i1___atdiv@quotient+1)& (0+255),f,b
  8048  001272  23D0               	addwfc	(i1___atdiv@quotient+2)& (0+255),f,b
  8049  001274                     i1l4470:
  8050                           
  8051                           ; BSR set to: 0
  8052  001274  C0CE  F0C6         	movff	i1___atdiv@quotient,?i1___atdiv
  8053  001278  C0CF  F0C7         	movff	i1___atdiv@quotient+1,?i1___atdiv+1
  8054  00127C  C0D0  F0C8         	movff	i1___atdiv@quotient+2,?i1___atdiv+2
  8055                           
  8056                           ; BSR set to: 0
  8057  001280  0012               	return		;funcret
  8058  001282                     __end_ofi1___atdiv:
  8059                           	opt callstack 0
  8060                           
  8061 ;; *************** function _ADC *****************
  8062 ;; Defined at:
  8063 ;;		line 309 in file "mylib.h"
  8064 ;; Parameters:    Size  Location     Type
  8065 ;;		None
  8066 ;; Auto vars:     Size  Location     Type
  8067 ;;  resultH         1   31[COMRAM] unsigned char 
  8068 ;;  resultL         1   30[COMRAM] unsigned char 
  8069 ;; Return value:  Size  Location     Type
  8070 ;;                  1    wreg      void 
  8071 ;; Registers used:
  8072 ;;		wreg, status,2, status,0
  8073 ;; Tracked objects:
  8074 ;;		On entry : 0/0
  8075 ;;		On exit  : 0/0
  8076 ;;		Unchanged: 0/0
  8077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  8078 ;;      Params:         0       0       0       0
  8079 ;;      Locals:         2       0       0       0
  8080 ;;      Temps:          2       0       0       0
  8081 ;;      Totals:         4       0       0       0
  8082 ;;Total ram usage:        4 bytes
  8083 ;; Hardware stack levels used:    1
  8084 ;; Hardware stack levels required when called:    3
  8085 ;; This function calls:
  8086 ;;		Nothing
  8087 ;; This function is called by:
  8088 ;;		_InterruptAction_low
  8089 ;; This function uses a non-reentrant model
  8090 ;;
  8091                           
  8092                           	psect	text48
  8093  001B6C                     __ptext48:
  8094                           	opt callstack 0
  8095  001B6C                     _ADC:
  8096                           	opt callstack 20
  8097                           
  8098                           ;mylib.h: 310: unsigned char resultL;;mylib.h: 311: unsigned char resultH;;mylib.h: 312:
      +                           ADCON0bits.GO=1;
  8099                           
  8100                           ; BSR set to: 0
  8101                           ;incstack = 0
  8102  001B6C  82C2               	bsf	194,1,c	;volatile
  8103  001B6E                     i1l196:
  8104  001B6E  B2C2               	btfsc	194,1,c	;volatile
  8105  001B70  D7FE               	goto	i1l196
  8106                           
  8107                           ;mylib.h: 315: resultH = ADRESH;
  8108  001B72  CFC4 F020          	movff	4036,ADC@resultH	;volatile
  8109                           
  8110                           ;mylib.h: 316: resultL = ADRESL;
  8111  001B76  CFC3 F01F          	movff	4035,ADC@resultL	;volatile
  8112                           
  8113                           ;mylib.h: 317: flexor =(resultH<<8) + resultL;
  8114  001B7A  5020               	movf	ADC@resultH^0,w,c
  8115  001B7C  6E1E               	movwf	(??_ADC+1)^0,c
  8116  001B7E  6A1D               	clrf	??_ADC^0,c
  8117  001B80  501F               	movf	ADC@resultL^0,w,c
  8118  001B82  241D               	addwf	??_ADC^0,w,c
  8119  001B84  6E2F               	movwf	_flexor^0,c
  8120  001B86  0E00               	movlw	0
  8121  001B88  201E               	addwfc	(??_ADC+1)^0,w,c
  8122  001B8A  6E30               	movwf	(_flexor+1)^0,c
  8123                           
  8124                           ;mylib.h: 318: resultH = ADRESH;
  8125  001B8C  CFC4 F020          	movff	4036,ADC@resultH	;volatile
  8126                           
  8127                           ;mylib.h: 319: resultL = ADRESL;
  8128  001B90  CFC3 F01F          	movff	4035,ADC@resultL	;volatile
  8129                           
  8130                           ;mylib.h: 320: extensor = (resultH<<8) + resultL;
  8131  001B94  5020               	movf	ADC@resultH^0,w,c
  8132  001B96  6E1E               	movwf	(??_ADC+1)^0,c
  8133  001B98  6A1D               	clrf	??_ADC^0,c
  8134  001B9A  501F               	movf	ADC@resultL^0,w,c
  8135  001B9C  241D               	addwf	??_ADC^0,w,c
  8136  001B9E  6E2D               	movwf	_extensor^0,c
  8137  001BA0  0E00               	movlw	0
  8138  001BA2  201E               	addwfc	(??_ADC+1)^0,w,c
  8139  001BA4  6E2E               	movwf	(_extensor+1)^0,c
  8140  001BA6  0012               	return		;funcret
  8141  001BA8                     __end_of_ADC:
  8142                           	opt callstack 0
  8143                           
  8144 ;; *************** function _InterruptAction *****************
  8145 ;; Defined at:
  8146 ;;		line 52 in file "main.c"
  8147 ;; Parameters:    Size  Location     Type
  8148 ;;		None
  8149 ;; Auto vars:     Size  Location     Type
  8150 ;;		None
  8151 ;; Return value:  Size  Location     Type
  8152 ;;                  1    wreg      void 
  8153 ;; Registers used:
  8154 ;;		wreg, status,2, status,0, cstack
  8155 ;; Tracked objects:
  8156 ;;		On entry : 0/0
  8157 ;;		On exit  : 0/0
  8158 ;;		Unchanged: 0/0
  8159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  8160 ;;      Params:         0       0       0       0
  8161 ;;      Locals:         0       0       0       0
  8162 ;;      Temps:          0       0       0       0
  8163 ;;      Totals:         0       0       0       0
  8164 ;;Total ram usage:        0 bytes
  8165 ;; Hardware stack levels used:    1
  8166 ;; Hardware stack levels required when called:    2
  8167 ;; This function calls:
  8168 ;;		_clearUSARTbuffers
  8169 ;;		i2_Delay_ms
  8170 ;;		i2_Display_letter
  8171 ;;		i2_percentage2threshold
  8172 ;;		i2_read_EEprom
  8173 ;; This function is called by:
  8174 ;;		Interrupt level 2
  8175 ;; This function uses a non-reentrant model
  8176 ;;
  8177                           
  8178                           	psect	intcode
  8179  000008                     __pintcode:
  8180                           	opt callstack 0
  8181  000008                     _InterruptAction:
  8182                           	opt callstack 19
  8183                           
  8184                           ;incstack = 0
  8185  000008  8242               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  8186  00000A  EFED  F007         	goto	int_func
  8187                           
  8188                           	psect	intcode_body
  8189  000FDA                     __pintcode_body:
  8190                           	opt callstack 19
  8191  000FDA                     int_func:
  8192                           	opt callstack 19
  8193                           
  8194                           ;main.c: 54: if(INTCONbits.INT0IF){
  8195  000FDA  A2F2               	btfss	242,1,c	;volatile
  8196  000FDC  D053               	goto	i2l455
  8197                           
  8198                           ;main.c: 55: deviceMode = (deviceMode + 1) % 2;
  8199  000FDE  2834               	incf	_deviceMode^0,w,c
  8200  000FE0  0B01               	andlw	1
  8201  000FE2  6E34               	movwf	_deviceMode^0,c
  8202                           
  8203                           ;main.c: 59: if(deviceMode == 0){
  8204  000FE4  5034               	movf	_deviceMode^0,w,c
  8205  000FE6  A4D8               	btfss	status,2,c
  8206  000FE8  D00A               	goto	i2l3664
  8207                           
  8208                           ;main.c: 60: Display_letter('H');
  8209  000FEA  0E48               	movlw	72
  8210  000FEC  EC95  F007         	call	i2_Display_letter
  8211                           
  8212                           ;main.c: 61: Delay_ms(1000);
  8213  000FF0  0E03               	movlw	3
  8214  000FF2  6E02               	movwf	(i2Delay_ms@time+1)^0,c
  8215  000FF4  0EE8               	movlw	232
  8216  000FF6  6E01               	movwf	i2Delay_ms@time^0,c
  8217  000FF8  EC3F  F00E         	call	i2_Delay_ms	;wreg free
  8218                           
  8219                           ;main.c: 62: }else if(deviceMode == 1) Display_letter('C');
  8220  000FFC  D00A               	goto	i2l3670
  8221  000FFE                     i2l3664:
  8222  000FFE  0434               	decf	_deviceMode^0,w,c
  8223  001000  A4D8               	btfss	status,2,c
  8224  001002  D004               	goto	i2l3668
  8225  001004  0E43               	movlw	67
  8226  001006  EC95  F007         	call	i2_Display_letter
  8227  00100A  D003               	goto	i2l3670
  8228  00100C                     i2l3668:
  8229                           
  8230                           ;main.c: 63: else Display_letter('E');
  8231  00100C  0E45               	movlw	69
  8232  00100E  EC95  F007         	call	i2_Display_letter
  8233  001012                     i2l3670:
  8234                           
  8235                           ;main.c: 65: if(TCF_E == 1){
  8236  001012  0432               	decf	_TCF_E^0,w,c
  8237  001014  A4D8               	btfss	status,2,c
  8238  001016  D018               	goto	i2l3680
  8239                           
  8240                           ;main.c: 66: THE_DATA = read_EEprom(THE_ADR);
  8241  001018  5033               	movf	_THE_ADR^0,w,c
  8242  00101A  EC3C  F00F         	call	i2_read_EEprom
  8243  00101E  6E3B               	movwf	_THE_DATA^0,c
  8244                           
  8245                           ;main.c: 67: thE = percentage2threshold(THE_DATA);
  8246  001020  503B               	movf	_THE_DATA^0,w,c
  8247  001022  EC55  F00B         	call	i2_percentage2threshold
  8248  001026  C015  F038         	movff	?i2_percentage2threshold,_thE
  8249  00102A  C016  F039         	movff	?i2_percentage2threshold+1,_thE+1
  8250                           
  8251                           ;main.c: 68: thE_h = thE;
  8252  00102E  C038  F0E8         	movff	_thE,_thE_h
  8253  001032  C039  F0E9         	movff	_thE+1,_thE_h+1
  8254                           
  8255                           ;main.c: 69: thE_l = thE - hysteresis;
  8256  001036  503C               	movf	_hysteresis^0,w,c
  8257  001038  5C38               	subwf	_thE^0,w,c
  8258  00103A  0100               	movlb	0	; () banked
  8259  00103C  6FE6               	movwf	_thE_l& (0+255),b
  8260  00103E  503D               	movf	(_hysteresis+1)^0,w,c
  8261  001040  5839               	subwfb	(_thE+1)^0,w,c
  8262  001042  6FE7               	movwf	(_thE_l+1)& (0+255),b
  8263                           
  8264                           ;main.c: 70: TCF_E = 0;
  8265  001044  0E00               	movlw	0
  8266  001046  6E32               	movwf	_TCF_E^0,c
  8267  001048                     i2l3680:
  8268                           
  8269                           ;main.c: 71: };main.c: 73: if(TCF_F == 1){
  8270  001048  0431               	decf	_TCF_F^0,w,c
  8271  00104A  A4D8               	btfss	status,2,c
  8272  00104C  D018               	goto	i2l3690
  8273                           
  8274                           ;main.c: 74: THF_DATA = read_EEprom(THF_ADR);
  8275  00104E  5040               	movf	_THF_ADR^0,w,c
  8276  001050  EC3C  F00F         	call	i2_read_EEprom
  8277  001054  6E3A               	movwf	_THF_DATA^0,c
  8278                           
  8279                           ;main.c: 75: thF = percentage2threshold(THF_DATA);
  8280  001056  503A               	movf	_THF_DATA^0,w,c
  8281  001058  EC55  F00B         	call	i2_percentage2threshold
  8282  00105C  C015  F036         	movff	?i2_percentage2threshold,_thF
  8283  001060  C016  F037         	movff	?i2_percentage2threshold+1,_thF+1
  8284                           
  8285                           ;main.c: 76: thF_h = thF;
  8286  001064  C036  F0E4         	movff	_thF,_thF_h
  8287  001068  C037  F0E5         	movff	_thF+1,_thF_h+1
  8288                           
  8289                           ;main.c: 77: thF_l = thF - hysteresis;
  8290  00106C  503C               	movf	_hysteresis^0,w,c
  8291  00106E  5C36               	subwf	_thF^0,w,c
  8292  001070  0100               	movlb	0	; () banked
  8293  001072  6FE2               	movwf	_thF_l& (0+255),b
  8294  001074  503D               	movf	(_hysteresis+1)^0,w,c
  8295  001076  5837               	subwfb	(_thF+1)^0,w,c
  8296  001078  6FE3               	movwf	(_thF_l+1)& (0+255),b
  8297                           
  8298                           ;main.c: 78: TCF_F = 0;
  8299  00107A  0E00               	movlw	0
  8300  00107C  6E31               	movwf	_TCF_F^0,c
  8301  00107E                     i2l3690:
  8302                           
  8303                           ;main.c: 79: };main.c: 80: clearUSARTbuffers();
  8304  00107E  EC4C  F00F         	call	_clearUSARTbuffers	;wreg free
  8305                           
  8306                           ;main.c: 81: INTCONbits.INT0IF = 0;
  8307  001082  92F2               	bcf	242,1,c	;volatile
  8308  001084                     i2l455:
  8309  001084  9242               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  8310  001086  0011               	retfie		f
  8311  001088                     __end_of_InterruptAction:
  8312                           	opt callstack 0
  8313                           
  8314 ;; *************** function i2_read_EEprom *****************
  8315 ;; Defined at:
  8316 ;;		line 419 in file "mylib.h"
  8317 ;; Parameters:    Size  Location     Type
  8318 ;;  address         1    wreg     unsigned char 
  8319 ;; Auto vars:     Size  Location     Type
  8320 ;;  address         1    0[COMRAM] unsigned char 
  8321 ;; Return value:  Size  Location     Type
  8322 ;;                  1    wreg      unsigned char 
  8323 ;; Registers used:
  8324 ;;		wreg, status,2
  8325 ;; Tracked objects:
  8326 ;;		On entry : 0/0
  8327 ;;		On exit  : 0/0
  8328 ;;		Unchanged: 0/0
  8329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  8330 ;;      Params:         0       0       0       0
  8331 ;;      Locals:         1       0       0       0
  8332 ;;      Temps:          0       0       0       0
  8333 ;;      Totals:         1       0       0       0
  8334 ;;Total ram usage:        1 bytes
  8335 ;; Hardware stack levels used:    1
  8336 ;; This function calls:
  8337 ;;		Nothing
  8338 ;; This function is called by:
  8339 ;;		_InterruptAction
  8340 ;; This function uses a non-reentrant model
  8341 ;;
  8342                           
  8343                           	psect	text50
  8344  001E78                     __ptext50:
  8345                           	opt callstack 0
  8346  001E78                     i2_read_EEprom:
  8347                           	opt callstack 20
  8348                           
  8349                           ;incstack = 0
  8350                           ;i2read_EEprom@address stored from wreg
  8351  001E78  6E01               	movwf	i2read_EEprom@address^0,c
  8352                           
  8353                           ;mylib.h: 420: EEADR = address;
  8354  001E7A  C001  FFA9         	movff	i2read_EEprom@address,4009	;volatile
  8355                           
  8356                           ;mylib.h: 421: EECON1bits.EEPGD = 0;
  8357  001E7E  9EA6               	bcf	166,7,c	;volsfr
  8358                           
  8359                           ;mylib.h: 422: EECON1bits.CFGS = 0;
  8360  001E80  9CA6               	bcf	166,6,c	;volsfr
  8361                           
  8362                           ;mylib.h: 424: EECON1bits.RD = 1;
  8363  001E82  80A6               	bsf	166,0,c	;volsfr
  8364                           
  8365                           ;mylib.h: 426: return EEDATA;
  8366  001E84  50A8               	movf	168,w,c	;volatile
  8367  001E86  0012               	return		;funcret
  8368  001E88                     __end_ofi2_read_EEprom:
  8369                           	opt callstack 0
  8370                           
  8371 ;; *************** function i2_percentage2threshold *****************
  8372 ;; Defined at:
  8373 ;;		line 325 in file "mylib.h"
  8374 ;; Parameters:    Size  Location     Type
  8375 ;;  percentage      1    wreg     unsigned char 
  8376 ;; Auto vars:     Size  Location     Type
  8377 ;;  percentage      1   22[COMRAM] unsigned char 
  8378 ;;  percentage2t    3   23[COMRAM] m
  8379 ;;  percentage2t    2   26[COMRAM] unsigned int 
  8380 ;; Return value:  Size  Location     Type
  8381 ;;                  2   20[COMRAM] unsigned int 
  8382 ;; Registers used:
  8383 ;;		wreg, status,2, status,0, cstack
  8384 ;; Tracked objects:
  8385 ;;		On entry : 0/0
  8386 ;;		On exit  : 0/0
  8387 ;;		Unchanged: 0/0
  8388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  8389 ;;      Params:         2       0       0       0
  8390 ;;      Locals:         6       0       0       0
  8391 ;;      Temps:          0       0       0       0
  8392 ;;      Totals:         8       0       0       0
  8393 ;;Total ram usage:        8 bytes
  8394 ;; Hardware stack levels used:    1
  8395 ;; Hardware stack levels required when called:    1
  8396 ;; This function calls:
  8397 ;;		i2___atdiv
  8398 ;;		i2___tmul
  8399 ;; This function is called by:
  8400 ;;		_InterruptAction
  8401 ;; This function uses a non-reentrant model
  8402 ;;
  8403                           
  8404                           	psect	text51
  8405  0016AA                     __ptext51:
  8406                           	opt callstack 0
  8407  0016AA                     i2_percentage2threshold:
  8408                           	opt callstack 19
  8409                           
  8410                           ;incstack = 0
  8411                           ;i2percentage2threshold@percentage stored from wreg
  8412  0016AA  6E17               	movwf	i2percentage2threshold@percentage^0,c
  8413                           
  8414                           ;mylib.h: 326: unsigned int threshold_int;;mylib.h: 327: if(percentage > 100) threshold_
      +                          int = 1023;
  8415  0016AC  0E64               	movlw	100
  8416  0016AE  6417               	cpfsgt	i2percentage2threshold@percentage^0,c
  8417  0016B0  D004               	goto	i2l3568
  8418  0016B2  0E03               	movlw	3
  8419  0016B4  6E1C               	movwf	(i2percentage2threshold@threshold_int+1)^0,c
  8420  0016B6  681B               	setf	i2percentage2threshold@threshold_int^0,c
  8421  0016B8  D02C               	goto	i2l3576
  8422  0016BA                     i2l3568:
  8423                           
  8424                           ;mylib.h: 328: else if(percentage <= 6) threshold_int = 10;
  8425  0016BA  0E07               	movlw	7
  8426  0016BC  6017               	cpfslt	i2percentage2threshold@percentage^0,c
  8427  0016BE  D005               	goto	i2l3572
  8428  0016C0  0E00               	movlw	0
  8429  0016C2  6E1C               	movwf	(i2percentage2threshold@threshold_int+1)^0,c
  8430  0016C4  0E0A               	movlw	10
  8431  0016C6  6E1B               	movwf	i2percentage2threshold@threshold_int^0,c
  8432  0016C8  D024               	goto	i2l3576
  8433  0016CA                     i2l3572:
  8434                           
  8435                           ;mylib.h: 329: else{;mylib.h: 330: short long threshold_shortlong = (short long)percenta
      +                          ge * (short long)1023 / (short long)100;
  8436  0016CA  0EFF               	movlw	255
  8437  0016CC  6E04               	movwf	i2___tmul@multiplicand^0,c
  8438  0016CE  0E03               	movlw	3
  8439  0016D0  6E05               	movwf	(i2___tmul@multiplicand+1)^0,c
  8440  0016D2  0E00               	movlw	0
  8441  0016D4  6E06               	movwf	(i2___tmul@multiplicand+2)^0,c
  8442  0016D6  5017               	movf	i2percentage2threshold@percentage^0,w,c
  8443  0016D8  6E01               	movwf	i2___tmul@multiplier^0,c
  8444  0016DA  6A02               	clrf	(i2___tmul@multiplier+1)^0,c
  8445  0016DC  6A03               	clrf	(i2___tmul@multiplier+2)^0,c
  8446  0016DE  EC73  F00D         	call	i2___tmul	;wreg free
  8447  0016E2  C001  F00A         	movff	?i2___tmul,i2___atdiv@dividend
  8448  0016E6  C002  F00B         	movff	?i2___tmul+1,i2___atdiv@dividend+1
  8449  0016EA  C003  F00C         	movff	?i2___tmul+2,i2___atdiv@dividend+2
  8450  0016EE  0E64               	movlw	100
  8451  0016F0  6E0D               	movwf	i2___atdiv@divisor^0,c
  8452  0016F2  0E00               	movlw	0
  8453  0016F4  6E0E               	movwf	(i2___atdiv@divisor+1)^0,c
  8454  0016F6  0E00               	movlw	0
  8455  0016F8  6E0F               	movwf	(i2___atdiv@divisor+2)^0,c
  8456  0016FA  EC41  F009         	call	i2___atdiv	;wreg free
  8457  0016FE  C00A  F018         	movff	?i2___atdiv,i2percentage2threshold@threshold_shortlong
  8458  001702  C00B  F019         	movff	?i2___atdiv+1,i2percentage2threshold@threshold_shortlong+1
  8459  001706  C00C  F01A         	movff	?i2___atdiv+2,i2percentage2threshold@threshold_shortlong+2
  8460                           
  8461                           ;mylib.h: 331: threshold_int = threshold_shortlong;
  8462  00170A  C018  F01B         	movff	i2percentage2threshold@threshold_shortlong,i2percentage2threshold@threshold_int
  8463  00170E  C019  F01C         	movff	i2percentage2threshold@threshold_shortlong+1,i2percentage2threshold@threshold_int
      +                          +1
  8464  001712                     i2l3576:
  8465                           
  8466                           ;mylib.h: 332: };mylib.h: 333: return threshold_int;
  8467  001712  C01B  F015         	movff	i2percentage2threshold@threshold_int,?i2_percentage2threshold
  8468  001716  C01C  F016         	movff	i2percentage2threshold@threshold_int+1,?i2_percentage2threshold+1
  8469  00171A  0012               	return		;funcret
  8470  00171C                     __end_ofi2_percentage2threshold:
  8471                           	opt callstack 0
  8472                           
  8473 ;; *************** function i2___tmul *****************
  8474 ;; Defined at:
  8475 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul24.c"
  8476 ;; Parameters:    Size  Location     Type
  8477 ;;  multiplier      3    0[COMRAM] unsigned um
  8478 ;;  multiplicand    3    3[COMRAM] unsigned um
  8479 ;; Auto vars:     Size  Location     Type
  8480 ;;  __tmul          3    6[COMRAM] unsigned um
  8481 ;; Return value:  Size  Location     Type
  8482 ;;                  3    0[COMRAM] unsigned um
  8483 ;; Registers used:
  8484 ;;		wreg, status,2, status,0
  8485 ;; Tracked objects:
  8486 ;;		On entry : 0/0
  8487 ;;		On exit  : 0/0
  8488 ;;		Unchanged: 0/0
  8489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  8490 ;;      Params:         6       0       0       0
  8491 ;;      Locals:         3       0       0       0
  8492 ;;      Temps:          0       0       0       0
  8493 ;;      Totals:         9       0       0       0
  8494 ;;Total ram usage:        9 bytes
  8495 ;; Hardware stack levels used:    1
  8496 ;; This function calls:
  8497 ;;		Nothing
  8498 ;; This function is called by:
  8499 ;;		i2_percentage2threshold
  8500 ;; This function uses a non-reentrant model
  8501 ;;
  8502                           
  8503                           	psect	text52
  8504  001AE6                     __ptext52:
  8505                           	opt callstack 0
  8506  001AE6                     i2___tmul:
  8507                           	opt callstack 19
  8508                           
  8509                           ;incstack = 0
  8510  001AE6  0E00               	movlw	0
  8511  001AE8  6E07               	movwf	i2___tmul@product^0,c
  8512  001AEA  0E00               	movlw	0
  8513  001AEC  6E08               	movwf	(i2___tmul@product+1)^0,c
  8514  001AEE  0E00               	movlw	0
  8515  001AF0  6E09               	movwf	(i2___tmul@product+2)^0,c
  8516  001AF2                     i2l3020:
  8517  001AF2  A001               	btfss	i2___tmul@multiplier^0,0,c
  8518  001AF4  D006               	goto	i2l3024
  8519  001AF6  5004               	movf	i2___tmul@multiplicand^0,w,c
  8520  001AF8  2607               	addwf	i2___tmul@product^0,f,c
  8521  001AFA  5005               	movf	(i2___tmul@multiplicand+1)^0,w,c
  8522  001AFC  2208               	addwfc	(i2___tmul@product+1)^0,f,c
  8523  001AFE  5006               	movf	(i2___tmul@multiplicand+2)^0,w,c
  8524  001B00  2209               	addwfc	(i2___tmul@product+2)^0,f,c
  8525  001B02                     i2l3024:
  8526  001B02  90D8               	bcf	status,0,c
  8527  001B04  3604               	rlcf	i2___tmul@multiplicand^0,f,c
  8528  001B06  3605               	rlcf	(i2___tmul@multiplicand+1)^0,f,c
  8529  001B08  3606               	rlcf	(i2___tmul@multiplicand+2)^0,f,c
  8530  001B0A  90D8               	bcf	status,0,c
  8531  001B0C  3203               	rrcf	(i2___tmul@multiplier+2)^0,f,c
  8532  001B0E  3202               	rrcf	(i2___tmul@multiplier+1)^0,f,c
  8533  001B10  3201               	rrcf	i2___tmul@multiplier^0,f,c
  8534  001B12  5001               	movf	i2___tmul@multiplier^0,w,c
  8535  001B14  1002               	iorwf	(i2___tmul@multiplier+1)^0,w,c
  8536  001B16  1003               	iorwf	(i2___tmul@multiplier+2)^0,w,c
  8537  001B18  A4D8               	btfss	status,2,c
  8538  001B1A  D7EB               	goto	i2l3020
  8539  001B1C  C007  F001         	movff	i2___tmul@product,?i2___tmul
  8540  001B20  C008  F002         	movff	i2___tmul@product+1,?i2___tmul+1
  8541  001B24  C009  F003         	movff	i2___tmul@product+2,?i2___tmul+2
  8542  001B28  0012               	return		;funcret
  8543  001B2A                     __end_ofi2___tmul:
  8544                           	opt callstack 0
  8545                           
  8546 ;; *************** function i2___atdiv *****************
  8547 ;; Defined at:
  8548 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\atdiv.c"
  8549 ;; Parameters:    Size  Location     Type
  8550 ;;  dividend        3    9[COMRAM] m
  8551 ;;  divisor         3   12[COMRAM] m
  8552 ;; Auto vars:     Size  Location     Type
  8553 ;;  __atdiv         3   17[COMRAM] m
  8554 ;;  __atdiv         1   16[COMRAM] unsigned char 
  8555 ;;  __atdiv         1   15[COMRAM] unsigned char 
  8556 ;; Return value:  Size  Location     Type
  8557 ;;                  3    9[COMRAM] m
  8558 ;; Registers used:
  8559 ;;		wreg, status,2, status,0
  8560 ;; Tracked objects:
  8561 ;;		On entry : 0/0
  8562 ;;		On exit  : 0/0
  8563 ;;		Unchanged: 0/0
  8564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  8565 ;;      Params:         6       0       0       0
  8566 ;;      Locals:         5       0       0       0
  8567 ;;      Temps:          0       0       0       0
  8568 ;;      Totals:        11       0       0       0
  8569 ;;Total ram usage:       11 bytes
  8570 ;; Hardware stack levels used:    1
  8571 ;; This function calls:
  8572 ;;		Nothing
  8573 ;; This function is called by:
  8574 ;;		i2_percentage2threshold
  8575 ;; This function uses a non-reentrant model
  8576 ;;
  8577                           
  8578                           	psect	text53
  8579  001282                     __ptext53:
  8580                           	opt callstack 0
  8581  001282                     i2___atdiv:
  8582                           	opt callstack 19
  8583                           
  8584                           ;incstack = 0
  8585  001282  0E00               	movlw	0
  8586  001284  6E11               	movwf	i2___atdiv@sign^0,c
  8587  001286  AE0F               	btfss	(i2___atdiv@divisor+2)^0,7,c
  8588  001288  D008               	goto	i2l3078
  8589  00128A  1E0F               	comf	(i2___atdiv@divisor+2)^0,f,c
  8590  00128C  1E0E               	comf	(i2___atdiv@divisor+1)^0,f,c
  8591  00128E  6C0D               	negf	i2___atdiv@divisor^0,c
  8592  001290  0E00               	movlw	0
  8593  001292  220E               	addwfc	(i2___atdiv@divisor+1)^0,f,c
  8594  001294  220F               	addwfc	(i2___atdiv@divisor+2)^0,f,c
  8595  001296  0E01               	movlw	1
  8596  001298  6E11               	movwf	i2___atdiv@sign^0,c
  8597  00129A                     i2l3078:
  8598  00129A  AE0C               	btfss	(i2___atdiv@dividend+2)^0,7,c
  8599  00129C  D008               	goto	i2l3084
  8600  00129E  1E0C               	comf	(i2___atdiv@dividend+2)^0,f,c
  8601  0012A0  1E0B               	comf	(i2___atdiv@dividend+1)^0,f,c
  8602  0012A2  6C0A               	negf	i2___atdiv@dividend^0,c
  8603  0012A4  0E00               	movlw	0
  8604  0012A6  220B               	addwfc	(i2___atdiv@dividend+1)^0,f,c
  8605  0012A8  220C               	addwfc	(i2___atdiv@dividend+2)^0,f,c
  8606  0012AA  0E01               	movlw	1
  8607  0012AC  1A11               	xorwf	i2___atdiv@sign^0,f,c
  8608  0012AE                     i2l3084:
  8609  0012AE  0E00               	movlw	0
  8610  0012B0  6E12               	movwf	i2___atdiv@quotient^0,c
  8611  0012B2  0E00               	movlw	0
  8612  0012B4  6E13               	movwf	(i2___atdiv@quotient+1)^0,c
  8613  0012B6  0E00               	movlw	0
  8614  0012B8  6E14               	movwf	(i2___atdiv@quotient+2)^0,c
  8615  0012BA  500D               	movf	i2___atdiv@divisor^0,w,c
  8616  0012BC  100E               	iorwf	(i2___atdiv@divisor+1)^0,w,c
  8617  0012BE  100F               	iorwf	(i2___atdiv@divisor+2)^0,w,c
  8618  0012C0  B4D8               	btfsc	status,2,c
  8619  0012C2  D023               	goto	i2l3104
  8620  0012C4  0E01               	movlw	1
  8621  0012C6  6E10               	movwf	i2___atdiv@counter^0,c
  8622  0012C8  D005               	goto	i2l3092
  8623  0012CA                     i2l3090:
  8624  0012CA  90D8               	bcf	status,0,c
  8625  0012CC  360D               	rlcf	i2___atdiv@divisor^0,f,c
  8626  0012CE  360E               	rlcf	(i2___atdiv@divisor+1)^0,f,c
  8627  0012D0  360F               	rlcf	(i2___atdiv@divisor+2)^0,f,c
  8628  0012D2  2A10               	incf	i2___atdiv@counter^0,f,c
  8629  0012D4                     i2l3092:
  8630  0012D4  AE0F               	btfss	(i2___atdiv@divisor+2)^0,7,c
  8631  0012D6  D7F9               	goto	i2l3090
  8632  0012D8                     i2u259_40:
  8633  0012D8  90D8               	bcf	status,0,c
  8634  0012DA  3612               	rlcf	i2___atdiv@quotient^0,f,c
  8635  0012DC  3613               	rlcf	(i2___atdiv@quotient+1)^0,f,c
  8636  0012DE  3614               	rlcf	(i2___atdiv@quotient+2)^0,f,c
  8637  0012E0  500D               	movf	i2___atdiv@divisor^0,w,c
  8638  0012E2  5C0A               	subwf	i2___atdiv@dividend^0,w,c
  8639  0012E4  500E               	movf	(i2___atdiv@divisor+1)^0,w,c
  8640  0012E6  580B               	subwfb	(i2___atdiv@dividend+1)^0,w,c
  8641  0012E8  500F               	movf	(i2___atdiv@divisor+2)^0,w,c
  8642  0012EA  580C               	subwfb	(i2___atdiv@dividend+2)^0,w,c
  8643  0012EC  A0D8               	btfss	status,0,c
  8644  0012EE  D007               	goto	i2l781
  8645  0012F0  500D               	movf	i2___atdiv@divisor^0,w,c
  8646  0012F2  5E0A               	subwf	i2___atdiv@dividend^0,f,c
  8647  0012F4  500E               	movf	(i2___atdiv@divisor+1)^0,w,c
  8648  0012F6  5A0B               	subwfb	(i2___atdiv@dividend+1)^0,f,c
  8649  0012F8  500F               	movf	(i2___atdiv@divisor+2)^0,w,c
  8650  0012FA  5A0C               	subwfb	(i2___atdiv@dividend+2)^0,f,c
  8651  0012FC  8012               	bsf	i2___atdiv@quotient^0,0,c
  8652  0012FE                     i2l781:
  8653  0012FE  90D8               	bcf	status,0,c
  8654  001300  320F               	rrcf	(i2___atdiv@divisor+2)^0,f,c
  8655  001302  320E               	rrcf	(i2___atdiv@divisor+1)^0,f,c
  8656  001304  320D               	rrcf	i2___atdiv@divisor^0,f,c
  8657  001306  2E10               	decfsz	i2___atdiv@counter^0,f,c
  8658  001308  D7E7               	goto	i2u259_40
  8659  00130A                     i2l3104:
  8660  00130A  5011               	movf	i2___atdiv@sign^0,w,c
  8661  00130C  B4D8               	btfsc	status,2,c
  8662  00130E  D006               	goto	i2l3108
  8663  001310  1E14               	comf	(i2___atdiv@quotient+2)^0,f,c
  8664  001312  1E13               	comf	(i2___atdiv@quotient+1)^0,f,c
  8665  001314  6C12               	negf	i2___atdiv@quotient^0,c
  8666  001316  0E00               	movlw	0
  8667  001318  2213               	addwfc	(i2___atdiv@quotient+1)^0,f,c
  8668  00131A  2214               	addwfc	(i2___atdiv@quotient+2)^0,f,c
  8669  00131C                     i2l3108:
  8670  00131C  C012  F00A         	movff	i2___atdiv@quotient,?i2___atdiv
  8671  001320  C013  F00B         	movff	i2___atdiv@quotient+1,?i2___atdiv+1
  8672  001324  C014  F00C         	movff	i2___atdiv@quotient+2,?i2___atdiv+2
  8673  001328  0012               	return		;funcret
  8674  00132A                     __end_ofi2___atdiv:
  8675                           	opt callstack 0
  8676                           
  8677 ;; *************** function i2_Display_letter *****************
  8678 ;; Defined at:
  8679 ;;		line 153 in file "mylib.h"
  8680 ;; Parameters:    Size  Location     Type
  8681 ;;  letter          1    wreg     unsigned char 
  8682 ;; Auto vars:     Size  Location     Type
  8683 ;;  letter          1    2[COMRAM] unsigned char 
  8684 ;; Return value:  Size  Location     Type
  8685 ;;                  1    wreg      void 
  8686 ;; Registers used:
  8687 ;;		wreg, status,2, status,0, cstack
  8688 ;; Tracked objects:
  8689 ;;		On entry : 0/0
  8690 ;;		On exit  : 0/0
  8691 ;;		Unchanged: 0/0
  8692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  8693 ;;      Params:         0       0       0       0
  8694 ;;      Locals:         1       0       0       0
  8695 ;;      Temps:          0       0       0       0
  8696 ;;      Totals:         1       0       0       0
  8697 ;;Total ram usage:        1 bytes
  8698 ;; Hardware stack levels used:    1
  8699 ;; Hardware stack levels required when called:    1
  8700 ;; This function calls:
  8701 ;;		i2_Display_segment
  8702 ;;		i2_Reset_segments
  8703 ;; This function is called by:
  8704 ;;		_InterruptAction
  8705 ;; This function uses a non-reentrant model
  8706 ;;
  8707                           
  8708                           	psect	text54
  8709  000F2A                     __ptext54:
  8710                           	opt callstack 0
  8711  000F2A                     i2_Display_letter:
  8712                           	opt callstack 19
  8713                           
  8714                           ;incstack = 0
  8715                           ;i2Display_letter@letter stored from wreg
  8716  000F2A  6E03               	movwf	i2Display_letter@letter^0,c
  8717                           
  8718                           ;mylib.h: 154: Reset_segments();
  8719  000F2C  EC44  F00F         	call	i2_Reset_segments	;wreg free
  8720                           
  8721                           ;mylib.h: 155: switch(letter){
  8722  000F30  D049               	goto	i2l3562
  8723  000F32                     i2l3554:
  8724                           
  8725                           ;mylib.h: 157: Display_segment(1,1);
  8726  000F32  0E01               	movlw	1
  8727  000F34  6E01               	movwf	i2Display_segment@on_off^0,c
  8728  000F36  0E01               	movlw	1
  8729  000F38  EC21  F00A         	call	i2_Display_segment
  8730                           
  8731                           ;mylib.h: 158: Display_segment(3,1);
  8732  000F3C  0E01               	movlw	1
  8733  000F3E  6E01               	movwf	i2Display_segment@on_off^0,c
  8734  000F40  0E03               	movlw	3
  8735  000F42  EC21  F00A         	call	i2_Display_segment
  8736                           
  8737                           ;mylib.h: 159: Display_segment(4,1);
  8738  000F46  0E01               	movlw	1
  8739  000F48  6E01               	movwf	i2Display_segment@on_off^0,c
  8740  000F4A  0E04               	movlw	4
  8741  000F4C  EC21  F00A         	call	i2_Display_segment
  8742                           
  8743                           ;mylib.h: 160: Display_segment(6,1);
  8744  000F50  0E01               	movlw	1
  8745  000F52  6E01               	movwf	i2Display_segment@on_off^0,c
  8746  000F54  0E06               	movlw	6
  8747  000F56  EC21  F00A         	call	i2_Display_segment
  8748                           
  8749                           ;mylib.h: 161: Display_segment(7,1);
  8750  000F5A  0E01               	movlw	1
  8751  000F5C  6E01               	movwf	i2Display_segment@on_off^0,c
  8752  000F5E  0E07               	movlw	7
  8753  000F60  EC21  F00A         	call	i2_Display_segment
  8754                           
  8755                           ;mylib.h: 162: break;
  8756  000F64  0012               	return	
  8757  000F66                     i2l3556:
  8758                           
  8759                           ;mylib.h: 164: Display_segment(1,1);
  8760  000F66  0E01               	movlw	1
  8761  000F68  6E01               	movwf	i2Display_segment@on_off^0,c
  8762  000F6A  0E01               	movlw	1
  8763  000F6C  EC21  F00A         	call	i2_Display_segment
  8764                           
  8765                           ;mylib.h: 165: Display_segment(2,1);
  8766  000F70  0E01               	movlw	1
  8767  000F72  6E01               	movwf	i2Display_segment@on_off^0,c
  8768  000F74  0E02               	movlw	2
  8769  000F76  EC21  F00A         	call	i2_Display_segment
  8770                           
  8771                           ;mylib.h: 166: Display_segment(5,1);
  8772  000F7A  0E01               	movlw	1
  8773  000F7C  6E01               	movwf	i2Display_segment@on_off^0,c
  8774  000F7E  0E05               	movlw	5
  8775  000F80  EC21  F00A         	call	i2_Display_segment
  8776                           
  8777                           ;mylib.h: 167: Display_segment(6,1);
  8778  000F84  0E01               	movlw	1
  8779  000F86  6E01               	movwf	i2Display_segment@on_off^0,c
  8780  000F88  0E06               	movlw	6
  8781  000F8A  EC21  F00A         	call	i2_Display_segment
  8782                           
  8783                           ;mylib.h: 168: Display_segment(7,1);
  8784  000F8E  0E01               	movlw	1
  8785  000F90  6E01               	movwf	i2Display_segment@on_off^0,c
  8786  000F92  0E07               	movlw	7
  8787  000F94  EC21  F00A         	call	i2_Display_segment
  8788                           
  8789                           ;mylib.h: 169: break;
  8790  000F98  0012               	return	
  8791  000F9A                     i2l3558:
  8792                           
  8793                           ;mylib.h: 171: Display_segment(1,1);
  8794  000F9A  0E01               	movlw	1
  8795  000F9C  6E01               	movwf	i2Display_segment@on_off^0,c
  8796  000F9E  0E01               	movlw	1
  8797  000FA0  EC21  F00A         	call	i2_Display_segment
  8798                           
  8799                           ;mylib.h: 172: Display_segment(2,1);
  8800  000FA4  0E01               	movlw	1
  8801  000FA6  6E01               	movwf	i2Display_segment@on_off^0,c
  8802  000FA8  0E02               	movlw	2
  8803  000FAA  EC21  F00A         	call	i2_Display_segment
  8804                           
  8805                           ;mylib.h: 173: Display_segment(5,1);
  8806  000FAE  0E01               	movlw	1
  8807  000FB0  6E01               	movwf	i2Display_segment@on_off^0,c
  8808  000FB2  0E05               	movlw	5
  8809  000FB4  EC21  F00A         	call	i2_Display_segment
  8810                           
  8811                           ;mylib.h: 174: Display_segment(6,1);
  8812  000FB8  0E01               	movlw	1
  8813  000FBA  6E01               	movwf	i2Display_segment@on_off^0,c
  8814  000FBC  0E06               	movlw	6
  8815  000FBE  EC21  F00A         	call	i2_Display_segment
  8816                           
  8817                           ;mylib.h: 175: break;
  8818  000FC2  0012               	return	
  8819  000FC4                     i2l3562:
  8820  000FC4  5003               	movf	i2Display_letter@letter^0,w,c
  8821                           
  8822                           ; Switch size 1, requested type "simple"
  8823                           ; Number of cases is 3, Range of values is 67 to 72
  8824                           ; switch strategies available:
  8825                           ; Name         Instructions Cycles
  8826                           ; simple_byte           10     6 (average)
  8827                           ;	Chosen strategy is simple_byte
  8828  000FC6  0A43               	xorlw	67	; case 67
  8829  000FC8  B4D8               	btfsc	status,2,c
  8830  000FCA  D7E7               	goto	i2l3558
  8831  000FCC  0A06               	xorlw	6	; case 69
  8832  000FCE  B4D8               	btfsc	status,2,c
  8833  000FD0  D7CA               	goto	i2l3556
  8834  000FD2  0A0D               	xorlw	13	; case 72
  8835  000FD4  A4D8               	btfss	status,2,c
  8836  000FD6  0012               	return	
  8837  000FD8  D7AC               	goto	i2l3554
  8838  000FDA                     __end_ofi2_Display_letter:
  8839                           	opt callstack 0
  8840                           
  8841 ;; *************** function i2_Reset_segments *****************
  8842 ;; Defined at:
  8843 ;;		line 115 in file "mylib.h"
  8844 ;; Parameters:    Size  Location     Type
  8845 ;;		None
  8846 ;; Auto vars:     Size  Location     Type
  8847 ;;		None
  8848 ;; Return value:  Size  Location     Type
  8849 ;;                  1    wreg      void 
  8850 ;; Registers used:
  8851 ;;		None
  8852 ;; Tracked objects:
  8853 ;;		On entry : 0/0
  8854 ;;		On exit  : 0/0
  8855 ;;		Unchanged: 0/0
  8856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  8857 ;;      Params:         0       0       0       0
  8858 ;;      Locals:         0       0       0       0
  8859 ;;      Temps:          0       0       0       0
  8860 ;;      Totals:         0       0       0       0
  8861 ;;Total ram usage:        0 bytes
  8862 ;; Hardware stack levels used:    1
  8863 ;; This function calls:
  8864 ;;		Nothing
  8865 ;; This function is called by:
  8866 ;;		i2_Display_letter
  8867 ;; This function uses a non-reentrant model
  8868 ;;
  8869                           
  8870                           	psect	text55
  8871  001E88                     __ptext55:
  8872                           	opt callstack 0
  8873  001E88                     i2_Reset_segments:
  8874                           	opt callstack 19
  8875                           
  8876                           ;mylib.h: 116: PORTDbits.RD4=0;
  8877                           
  8878                           ;incstack = 0
  8879  001E88  9883               	bcf	131,4,c	;volatile
  8880                           
  8881                           ;mylib.h: 117: PORTDbits.RD5=0;
  8882  001E8A  9A83               	bcf	131,5,c	;volatile
  8883                           
  8884                           ;mylib.h: 118: PORTDbits.RD6=0;
  8885  001E8C  9C83               	bcf	131,6,c	;volatile
  8886                           
  8887                           ;mylib.h: 119: PORTDbits.RD7=0;
  8888  001E8E  9E83               	bcf	131,7,c	;volatile
  8889                           
  8890                           ;mylib.h: 120: PORTBbits.RB0=0;
  8891  001E90  9081               	bcf	129,0,c	;volatile
  8892                           
  8893                           ;mylib.h: 121: PORTBbits.RB1=0;
  8894  001E92  9281               	bcf	129,1,c	;volatile
  8895                           
  8896                           ;mylib.h: 122: PORTBbits.RB2=0;
  8897  001E94  9481               	bcf	129,2,c	;volatile
  8898  001E96  0012               	return		;funcret
  8899  001E98                     __end_ofi2_Reset_segments:
  8900                           	opt callstack 0
  8901                           
  8902 ;; *************** function i2_Display_segment *****************
  8903 ;; Defined at:
  8904 ;;		line 126 in file "mylib.h"
  8905 ;; Parameters:    Size  Location     Type
  8906 ;;  segment         1    wreg     unsigned char 
  8907 ;;  on_off          1    0[COMRAM] unsigned char 
  8908 ;; Auto vars:     Size  Location     Type
  8909 ;;  segment         1    1[COMRAM] unsigned char 
  8910 ;; Return value:  Size  Location     Type
  8911 ;;                  1    wreg      void 
  8912 ;; Registers used:
  8913 ;;		wreg, status,2, status,0
  8914 ;; Tracked objects:
  8915 ;;		On entry : 0/0
  8916 ;;		On exit  : 0/0
  8917 ;;		Unchanged: 0/0
  8918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  8919 ;;      Params:         1       0       0       0
  8920 ;;      Locals:         1       0       0       0
  8921 ;;      Temps:          0       0       0       0
  8922 ;;      Totals:         2       0       0       0
  8923 ;;Total ram usage:        2 bytes
  8924 ;; Hardware stack levels used:    1
  8925 ;; This function calls:
  8926 ;;		Nothing
  8927 ;; This function is called by:
  8928 ;;		i2_Display_letter
  8929 ;; This function uses a non-reentrant model
  8930 ;;
  8931                           
  8932                           	psect	text56
  8933  001442                     __ptext56:
  8934                           	opt callstack 0
  8935  001442                     i2_Display_segment:
  8936                           	opt callstack 19
  8937                           
  8938                           ;incstack = 0
  8939                           ;i2Display_segment@segment stored from wreg
  8940  001442  6E02               	movwf	i2Display_segment@segment^0,c
  8941                           
  8942                           ;mylib.h: 127: switch(segment){
  8943  001444  D02A               	goto	i2l3006
  8944  001446                     i2l134:
  8945                           
  8946                           ;mylib.h: 129: PORTDbits.RD4=on_off;
  8947  001446  B001               	btfsc	i2Display_segment@on_off^0,0,c
  8948  001448  D002               	bra	i2u239_45
  8949  00144A  9883               	bcf	131,4,c	;volatile
  8950  00144C  D001               	bra	i2u239_46
  8951  00144E                     i2u239_45:
  8952  00144E  8883               	bsf	131,4,c	;volatile
  8953  001450                     i2u239_46:
  8954                           
  8955                           ;mylib.h: 130: break;
  8956  001450  0012               	return	
  8957  001452                     i2l136:
  8958                           
  8959                           ;mylib.h: 132: PORTDbits.RD5=on_off;
  8960  001452  B001               	btfsc	i2Display_segment@on_off^0,0,c
  8961  001454  D002               	bra	i2u240_45
  8962  001456  9A83               	bcf	131,5,c	;volatile
  8963  001458  D001               	bra	i2u240_46
  8964  00145A                     i2u240_45:
  8965  00145A  8A83               	bsf	131,5,c	;volatile
  8966  00145C                     i2u240_46:
  8967                           
  8968                           ;mylib.h: 133: break;
  8969  00145C  0012               	return	
  8970  00145E                     i2l137:
  8971                           
  8972                           ;mylib.h: 135: PORTDbits.RD6=on_off;
  8973  00145E  B001               	btfsc	i2Display_segment@on_off^0,0,c
  8974  001460  D002               	bra	i2u241_45
  8975  001462  9C83               	bcf	131,6,c	;volatile
  8976  001464  D001               	bra	i2u241_46
  8977  001466                     i2u241_45:
  8978  001466  8C83               	bsf	131,6,c	;volatile
  8979  001468                     i2u241_46:
  8980                           
  8981                           ;mylib.h: 136: break;
  8982  001468  0012               	return	
  8983  00146A                     i2l138:
  8984                           
  8985                           ;mylib.h: 138: PORTDbits.RD7=on_off;
  8986  00146A  B001               	btfsc	i2Display_segment@on_off^0,0,c
  8987  00146C  D002               	bra	i2u242_45
  8988  00146E  9E83               	bcf	131,7,c	;volatile
  8989  001470  D001               	bra	i2u242_46
  8990  001472                     i2u242_45:
  8991  001472  8E83               	bsf	131,7,c	;volatile
  8992  001474                     i2u242_46:
  8993                           
  8994                           ;mylib.h: 139: break;
  8995  001474  0012               	return	
  8996  001476                     i2l139:
  8997                           
  8998                           ;mylib.h: 141: PORTBbits.RB0=on_off;
  8999  001476  B001               	btfsc	i2Display_segment@on_off^0,0,c
  9000  001478  D002               	bra	i2u243_45
  9001  00147A  9081               	bcf	129,0,c	;volatile
  9002  00147C  D001               	bra	i2u243_46
  9003  00147E                     i2u243_45:
  9004  00147E  8081               	bsf	129,0,c	;volatile
  9005  001480                     i2u243_46:
  9006                           
  9007                           ;mylib.h: 142: break;
  9008  001480  0012               	return	
  9009  001482                     i2l140:
  9010                           
  9011                           ;mylib.h: 144: PORTBbits.RB1=on_off;
  9012  001482  B001               	btfsc	i2Display_segment@on_off^0,0,c
  9013  001484  D002               	bra	i2u244_45
  9014  001486  9281               	bcf	129,1,c	;volatile
  9015  001488  D001               	bra	i2u244_46
  9016  00148A                     i2u244_45:
  9017  00148A  8281               	bsf	129,1,c	;volatile
  9018  00148C                     i2u244_46:
  9019                           
  9020                           ;mylib.h: 145: break;
  9021  00148C  0012               	return	
  9022  00148E                     i2l141:
  9023                           
  9024                           ;mylib.h: 147: PORTBbits.RB2=on_off;
  9025  00148E  B001               	btfsc	i2Display_segment@on_off^0,0,c
  9026  001490  D002               	bra	i2u245_45
  9027  001492  9481               	bcf	129,2,c	;volatile
  9028  001494  D001               	bra	i2u245_46
  9029  001496                     i2u245_45:
  9030  001496  8481               	bsf	129,2,c	;volatile
  9031  001498                     i2u245_46:
  9032                           
  9033                           ;mylib.h: 148: break;
  9034  001498  0012               	return	
  9035  00149A                     i2l3006:
  9036  00149A  5002               	movf	i2Display_segment@segment^0,w,c
  9037                           
  9038                           ; Switch size 1, requested type "simple"
  9039                           ; Number of cases is 7, Range of values is 1 to 7
  9040                           ; switch strategies available:
  9041                           ; Name         Instructions Cycles
  9042                           ; simple_byte           22    12 (average)
  9043                           ;	Chosen strategy is simple_byte
  9044  00149C  0A01               	xorlw	1	; case 1
  9045  00149E  B4D8               	btfsc	status,2,c
  9046  0014A0  D7D2               	goto	i2l134
  9047  0014A2  0A03               	xorlw	3	; case 2
  9048  0014A4  B4D8               	btfsc	status,2,c
  9049  0014A6  D7D5               	goto	i2l136
  9050  0014A8  0A01               	xorlw	1	; case 3
  9051  0014AA  B4D8               	btfsc	status,2,c
  9052  0014AC  D7D8               	goto	i2l137
  9053  0014AE  0A07               	xorlw	7	; case 4
  9054  0014B0  B4D8               	btfsc	status,2,c
  9055  0014B2  D7DB               	goto	i2l138
  9056  0014B4  0A01               	xorlw	1	; case 5
  9057  0014B6  B4D8               	btfsc	status,2,c
  9058  0014B8  D7DE               	goto	i2l139
  9059  0014BA  0A03               	xorlw	3	; case 6
  9060  0014BC  B4D8               	btfsc	status,2,c
  9061  0014BE  D7E1               	goto	i2l140
  9062  0014C0  0A01               	xorlw	1	; case 7
  9063  0014C2  A4D8               	btfss	status,2,c
  9064  0014C4  0012               	return	
  9065  0014C6  D7E3               	goto	i2l141
  9066  0014C8                     __end_ofi2_Display_segment:
  9067                           	opt callstack 0
  9068                           
  9069 ;; *************** function i2_Delay_ms *****************
  9070 ;; Defined at:
  9071 ;;		line 106 in file "mylib.h"
  9072 ;; Parameters:    Size  Location     Type
  9073 ;;  time            2    0[COMRAM] unsigned int 
  9074 ;; Auto vars:     Size  Location     Type
  9075 ;;  Delay_ms        2    3[COMRAM] unsigned int 
  9076 ;; Return value:  Size  Location     Type
  9077 ;;                  1    wreg      void 
  9078 ;; Registers used:
  9079 ;;		wreg, status,2, status,0
  9080 ;; Tracked objects:
  9081 ;;		On entry : 0/0
  9082 ;;		On exit  : 0/0
  9083 ;;		Unchanged: 0/0
  9084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9085 ;;      Params:         2       0       0       0
  9086 ;;      Locals:         2       0       0       0
  9087 ;;      Temps:          1       0       0       0
  9088 ;;      Totals:         5       0       0       0
  9089 ;;Total ram usage:        5 bytes
  9090 ;; Hardware stack levels used:    1
  9091 ;; This function calls:
  9092 ;;		Nothing
  9093 ;; This function is called by:
  9094 ;;		_InterruptAction
  9095 ;; This function uses a non-reentrant model
  9096 ;;
  9097                           
  9098                           	psect	text57
  9099  001C7E                     __ptext57:
  9100                           	opt callstack 0
  9101  001C7E                     i2_Delay_ms:
  9102                           	opt callstack 20
  9103                           
  9104                           ;mylib.h: 107: unsigned int timer;;mylib.h: 108: if(time>0)
  9105                           
  9106                           ;incstack = 0
  9107  001C7E  5001               	movf	i2Delay_ms@time^0,w,c
  9108  001C80  1002               	iorwf	(i2Delay_ms@time+1)^0,w,c
  9109  001C82  B4D8               	btfsc	status,2,c
  9110  001C84  0012               	return	
  9111                           
  9112                           ;mylib.h: 109: for(timer=0; timer<time; timer++){
  9113  001C86  0E00               	movlw	0
  9114  001C88  6E05               	movwf	(i2Delay_ms@timer+1)^0,c
  9115  001C8A  0E00               	movlw	0
  9116  001C8C  6E04               	movwf	i2Delay_ms@timer^0,c
  9117  001C8E  D009               	goto	i2l124
  9118  001C90                     i2l3548:
  9119                           
  9120                           ;mylib.h: 110: _delay((unsigned long)((1)*(40000000/4000.0)));
  9121  001C90  0E0D               	movlw	13
  9122  001C92  6E03               	movwf	??i2_Delay_ms^0,c
  9123  001C94  0EFC               	movlw	252
  9124  001C96                     i2u576_47:
  9125  001C96  2EE8               	decfsz	wreg,f,c
  9126  001C98  D7FE               	bra	i2u576_47
  9127  001C9A  2E03               	decfsz	??i2_Delay_ms^0,f,c
  9128  001C9C  D7FC               	bra	i2u576_47
  9129  001C9E  4A04               	infsnz	i2Delay_ms@timer^0,f,c
  9130  001CA0  2A05               	incf	(i2Delay_ms@timer+1)^0,f,c
  9131  001CA2                     i2l124:
  9132  001CA2  5001               	movf	i2Delay_ms@time^0,w,c
  9133  001CA4  5C04               	subwf	i2Delay_ms@timer^0,w,c
  9134  001CA6  5002               	movf	(i2Delay_ms@time+1)^0,w,c
  9135  001CA8  5805               	subwfb	(i2Delay_ms@timer+1)^0,w,c
  9136  001CAA  B0D8               	btfsc	status,0,c
  9137  001CAC  0012               	return	
  9138  001CAE  D7F0               	goto	i2l3548
  9139  001CB0                     __end_ofi2_Delay_ms:
  9140                           	opt callstack 0
  9141                           
  9142 ;; *************** function _clearUSARTbuffers *****************
  9143 ;; Defined at:
  9144 ;;		line 608 in file "mylib.h"
  9145 ;; Parameters:    Size  Location     Type
  9146 ;;		None
  9147 ;; Auto vars:     Size  Location     Type
  9148 ;;  i_count         1    1[COMRAM] unsigned char 
  9149 ;;  dataClearBuf    1    0        unsigned char 
  9150 ;; Return value:  Size  Location     Type
  9151 ;;                  1    wreg      void 
  9152 ;; Registers used:
  9153 ;;		wreg, status,2, status,0
  9154 ;; Tracked objects:
  9155 ;;		On entry : 0/0
  9156 ;;		On exit  : 0/0
  9157 ;;		Unchanged: 0/0
  9158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  9159 ;;      Params:         0       0       0       0
  9160 ;;      Locals:         2       0       0       0
  9161 ;;      Temps:          0       0       0       0
  9162 ;;      Totals:         2       0       0       0
  9163 ;;Total ram usage:        2 bytes
  9164 ;; Hardware stack levels used:    1
  9165 ;; This function calls:
  9166 ;;		Nothing
  9167 ;; This function is called by:
  9168 ;;		_InterruptAction
  9169 ;; This function uses a non-reentrant model
  9170 ;;
  9171                           
  9172                           	psect	text58
  9173  001E98                     __ptext58:
  9174                           	opt callstack 0
  9175  001E98                     _clearUSARTbuffers:
  9176                           	opt callstack 20
  9177                           
  9178                           ;mylib.h: 609: unsigned char dataClearBuffer;;mylib.h: 610: unsigned char i_count;;mylib
      +                          .h: 611: for(i_count = 0; i_count < 5; i_count++){
  9179                           
  9180                           ;incstack = 0
  9181  001E98  0E00               	movlw	0
  9182  001E9A  6E02               	movwf	clearUSARTbuffers@i_count^0,c
  9183  001E9C                     i2l358:
  9184  001E9C  50AE               	movf	174,w,c	;volatile
  9185  001E9E  2A02               	incf	clearUSARTbuffers@i_count^0,f,c
  9186  001EA0  0E04               	movlw	4
  9187  001EA2  6402               	cpfsgt	clearUSARTbuffers@i_count^0,c
  9188  001EA4  D7FB               	goto	i2l358
  9189  001EA6  0012               	return	
  9190  001EA8                     __end_of_clearUSARTbuffers:
  9191                           	opt callstack 0
  9192  0000                     
  9193                           	psect	rparam
  9194  0000                     
  9195                           	psect	temp
  9196  000042                     btemp:
  9197                           	opt callstack 0
  9198  000042                     	ds	1
  9199  0000                     int$flags	set	btemp
  9200  0000                     wtemp8	set	btemp+1
  9201  0000                     ttemp5	set	btemp+1
  9202  0000                     ttemp6	set	btemp+4
  9203  0000                     ttemp7	set	btemp+8
  9204                           tosu	equ	0xFFF
  9205                           tosh	equ	0xFFE
  9206                           tosl	equ	0xFFD
  9207                           stkptr	equ	0xFFC
  9208                           pclatu	equ	0xFFB
  9209                           pclath	equ	0xFFA
  9210                           pcl	equ	0xFF9
  9211                           tblptru	equ	0xFF8
  9212                           tblptrh	equ	0xFF7
  9213                           tblptrl	equ	0xFF6
  9214                           tablat	equ	0xFF5
  9215                           prodh	equ	0xFF4
  9216                           prodl	equ	0xFF3
  9217                           indf0	equ	0xFEF
  9218                           postinc0	equ	0xFEE
  9219                           postdec0	equ	0xFED
  9220                           preinc0	equ	0xFEC
  9221                           plusw0	equ	0xFEB
  9222                           fsr0h	equ	0xFEA
  9223                           fsr0l	equ	0xFE9
  9224                           wreg	equ	0xFE8
  9225                           indf1	equ	0xFE7
  9226                           postinc1	equ	0xFE6
  9227                           postdec1	equ	0xFE5
  9228                           preinc1	equ	0xFE4
  9229                           plusw1	equ	0xFE3
  9230                           fsr1h	equ	0xFE2
  9231                           fsr1l	equ	0xFE1
  9232                           bsr	equ	0xFE0
  9233                           indf2	equ	0xFDF
  9234                           postinc2	equ	0xFDE
  9235                           postdec2	equ	0xFDD
  9236                           preinc2	equ	0xFDC
  9237                           plusw2	equ	0xFDB
  9238                           fsr2h	equ	0xFDA
  9239                           fsr2l	equ	0xFD9
  9240                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        46
    BSS         127
    Persistent  14
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     38      65
    BANK0           160     28     138
    BANK1           256     48      98
    BANK2           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    None.

Critical Paths under _InterruptAction_low in COMRAM

    _InterruptAction_low->i1___lwdiv
    i1___lwdiv->i1___wmul
    _amplifiedSignalValue->i1___tmul
    i1___atdiv->i1___tmul

Critical Paths under _InterruptAction in COMRAM

    _InterruptAction->i2_percentage2threshold
    i2_percentage2threshold->i2___atdiv
    i2___atdiv->i2___tmul
    i2_Display_letter->i2_Display_segment

Critical Paths under _main in BANK0

    None.

Critical Paths under _InterruptAction_low in BANK0

    _InterruptAction_low->_amplifiedSignalValue
    _amplifiedSignalValue->i1___atdiv

Critical Paths under _InterruptAction in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_percentage2threshold
    _velMapping->___ltdiv
    _sendUSART_int->_absFunc
    _readUSART_withTIMEOUT->___awmod
    _percentage2threshold->___atdiv
    ___atdiv->___tmul
    _blinkDisplayLetterC->___lwmod
    _Display_letter->_Display_segment
    _GraspPreshape->_waitHandReached
    _waitHandReached->_waitFingerReached
    _waitFingerReached->_getFingerStatus
    _getFingerStatus->_readUSART
    _GraspControl->___lwdiv
    _getHandPosition->_getFingerPosition
    _getFingerPosition->_readUSART
    _readUSART->___awmod
    ___lwdiv->___wmul
    _MoveMotor->_sendUSART
    _Display_number->___lwmod

Critical Paths under _InterruptAction_low in BANK1

    None.

Critical Paths under _InterruptAction in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InterruptAction_low in BANK2

    None.

Critical Paths under _InterruptAction in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                20    20      0   39898
                                             28 BANK1     20    20      0
                           _Delay_ms
                     _Display_letter
                     _Display_number
                       _GraspControl
                      _GraspPreshape
                     _Reset_segments
                            _absFunc
                   _adjustEEPROMdata
                _blinkDisplayLetterC
                     _conditionRelax
                          _configADC
                        _configUSART
                         _config_DIO
                   _config_interrupt
                      _config_timer0
                      _config_timer1
                  _disableModeSwitch
               _percentage2threshold
              _readUSART_withTIMEOUT
                        _read_EEprom
                          _sendUSART
                      _sendUSART_int
                           _signFunc
                         _velMapping
                       _write_EEprom
 ---------------------------------------------------------------------------------
 (1) _write_EEprom                                         2     1      1     422
                                              0 BANK1      2     1      1
 ---------------------------------------------------------------------------------
 (1) _velMapping                                          13     9      4    2432
                                             10 BANK1     13     9      4
                            ___ltdiv
                             ___tmul
 ---------------------------------------------------------------------------------
 (2) ___ltdiv                                             10     4      6     421
                                              0 BANK1     10     4      6
 ---------------------------------------------------------------------------------
 (1) _signFunc                                             5     1      4     639
                                              0 BANK1      5     1      4
 ---------------------------------------------------------------------------------
 (1) _sendUSART_int                                        4     2      2     434
                                              6 BANK1      4     2      2
                            _absFunc (ARG)
                          _sendUSART
 ---------------------------------------------------------------------------------
 (1) _read_EEprom                                          1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _readUSART_withTIMEOUT                                3     3      0     980
                                              6 BANK1      3     3      0
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) _percentage2threshold                                 8     6      2    1508
                                             20 BANK1      8     6      2
                            ___atdiv
                             ___tmul
 ---------------------------------------------------------------------------------
 (2) ___tmul                                               9     3      6     606
                                              0 BANK1      9     3      6
 ---------------------------------------------------------------------------------
 (2) ___atdiv                                             11     5      6     735
                                              9 BANK1     11     5      6
                             ___tmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _disableModeSwitch                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _config_timer1                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _config_timer0                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _config_interrupt                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _config_DIO                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _configUSART                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _configADC                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _conditionRelax                                       6     4      2     440
                                              0 BANK1      5     3      2
 ---------------------------------------------------------------------------------
 (1) _blinkDisplayLetterC                                  2     2      0    6547
                                              5 BANK1      2     2      0
                     _Display_letter
                     _Reset_segments
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) _Display_letter                                       1     1      0    5859
                                              2 BANK1      1     1      0
                    _Display_segment
                     _Reset_segments
 ---------------------------------------------------------------------------------
 (1) _adjustEEPROMdata                                     5     4      1     561
                                              0 BANK1      5     4      1
 ---------------------------------------------------------------------------------
 (1) _absFunc                                              6     2      4     468
                                              0 BANK1      6     2      4
 ---------------------------------------------------------------------------------
 (1) _GraspPreshape                                        1     1      0    1324
                                             13 BANK1      1     1      0
                          _sendUSART
                    _waitHandReached
 ---------------------------------------------------------------------------------
 (2) _waitHandReached                                      1     1      0    1262
                                             12 BANK1      1     1      0
                  _waitFingerReached
 ---------------------------------------------------------------------------------
 (3) _waitFingerReached                                    3     3      0    1132
                                              9 BANK1      3     3      0
                    _getFingerStatus
 ---------------------------------------------------------------------------------
 (4) _getFingerStatus                                      2     2      0    1033
                                              7 BANK1      2     2      0
                          _readUSART
                          _sendUSART
 ---------------------------------------------------------------------------------
 (1) _GraspControl                                        13    10      3    7740
                                             13 BANK1     13    10      3
                          _MoveMotor
                            ___lwdiv
                             ___wmul
                    _getHandPosition
 ---------------------------------------------------------------------------------
 (2) _getHandPosition                                      2     2      0    1163
                                              9 BANK1      2     2      0
                  _getFingerPosition
 ---------------------------------------------------------------------------------
 (3) _getFingerPosition                                    2     2      0    1033
                                              7 BANK1      2     2      0
                          _readUSART
                          _sendUSART
 ---------------------------------------------------------------------------------
 (5) _readUSART                                            1     1      0     937
                                              6 BANK1      1     1      0
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     903
                                              0 BANK1      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     812
                                              0 BANK1      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     821
                                              6 BANK1      7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _MoveMotor                                            8     5      3    2960
                                              1 BANK1      8     5      3
                          _sendUSART
 ---------------------------------------------------------------------------------
 (2) _sendUSART                                            1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Display_number                                       2     0      2    6991
                                              5 BANK1      2     0      2
                    _Display_segment
                     _Reset_segments
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     592
                                              0 BANK1      5     1      4
 ---------------------------------------------------------------------------------
 (2) _Reset_segments                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Display_segment                                      2     1      1    5828
                                              0 BANK1      2     1      1
 ---------------------------------------------------------------------------------
 (1) _Delay_ms                                             5     3      2     314
                                              0 BANK1      5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _InterruptAction_low                                  9     9      0    2397
                                             19 BANK0      9     9      0
                                _ADC
               _amplifiedSignalValue
                          i1___awmod
                          i1___lwdiv
                           i1___wmul
 ---------------------------------------------------------------------------------
 (8) i1___wmul                                             6     2      4     263
                                             28 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) i1___lwdiv                                            7     3      4     381
                                             34 COMRAM     4     0      4
                                              0 BANK0      3     3      0
                           i1___wmul (ARG)
 ---------------------------------------------------------------------------------
 (8) i1___awmod                                            6     2      4     348
                                             28 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) _amplifiedSignalValue                                 8     5      3    1313
                                             11 BANK0      8     5      3
                          i1___atdiv
                           i1___tmul
 ---------------------------------------------------------------------------------
 (9) i1___tmul                                             9     3      6     206
                                             28 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (9) i1___atdiv                                           11     5      6     515
                                              0 BANK0     11     5      6
                           i1___tmul (ARG)
 ---------------------------------------------------------------------------------
 (8) _ADC                                                  4     4      0      92
                                             28 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _InterruptAction                                     0     0      0    1335
                  _clearUSARTbuffers
                         i2_Delay_ms
                   i2_Display_letter
             i2_percentage2threshold
                      i2_read_EEprom
 ---------------------------------------------------------------------------------
 (11) i2_read_EEprom                                       1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (11) i2_percentage2threshold                              8     6      2     610
                                             20 COMRAM     8     6      2
                          i2___atdiv
                           i2___tmul
 ---------------------------------------------------------------------------------
 (12) i2___tmul                                            9     3      6     144
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (12) i2___atdiv                                          11     5      6     352
                                              9 COMRAM    11     5      6
                           i2___tmul (ARG)
 ---------------------------------------------------------------------------------
 (11) i2_Display_letter                                    1     1      0     562
                                              2 COMRAM     1     1      0
                  i2_Display_segment
                   i2_Reset_segments
 ---------------------------------------------------------------------------------
 (12) i2_Reset_segments                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i2_Display_segment                                   2     1      1     540
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (11) i2_Delay_ms                                          5     3      2      94
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (11) _clearUSARTbuffers                                   2     2      0      47
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Delay_ms
   _Display_letter
     _Display_segment
     _Reset_segments
   _Display_number
     _Display_segment
     _Reset_segments
     ___lwmod
   _GraspControl
     _MoveMotor
       _sendUSART
     ___lwdiv
       ___wmul (ARG)
     ___wmul
     _getHandPosition
       _getFingerPosition
         _readUSART
           ___awmod
         _sendUSART
   _GraspPreshape
     _sendUSART
     _waitHandReached
       _waitFingerReached
         _getFingerStatus
           _readUSART
             ___awmod
           _sendUSART
   _Reset_segments
   _absFunc
   _adjustEEPROMdata
   _blinkDisplayLetterC
     _Display_letter
       _Display_segment
       _Reset_segments
     _Reset_segments
     ___lwmod
   _conditionRelax
   _configADC
   _configUSART
   _config_DIO
   _config_interrupt
   _config_timer0
   _config_timer1
   _disableModeSwitch
   _percentage2threshold
     ___atdiv
       ___tmul (ARG)
     ___tmul
   _readUSART_withTIMEOUT
     ___awmod
   _read_EEprom
   _sendUSART
   _sendUSART_int
     _absFunc (ARG)
     _sendUSART (ARG)
   _signFunc
   _velMapping
     ___ltdiv
     ___tmul
   _write_EEprom

 _InterruptAction_low (ROOT)
   _ADC
   _amplifiedSignalValue
     i1___atdiv
       i1___tmul (ARG)
     i1___tmul
   i1___awmod
   i1___lwdiv
     i1___wmul (ARG)
   i1___wmul

 _InterruptAction (ROOT)
   _clearUSARTbuffers
   i2_Delay_ms
   i2_Display_letter
     i2_Display_segment
     i2_Reset_segments
   i2_percentage2threshold
     i2___atdiv
       i2___tmul (ARG)
     i2___tmul
   i2_read_EEprom

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     30      62       7       38.3%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     1C      8A       5       86.3%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     26      41       1       69.1%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     12D       3        0.0%
DATA                 0      0     12D      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Sat Apr 18 19:11:12 2020

                     amplifiedSignalValue@signalVal 00D1                               __end_of_sendUSART_int 1E40  
                      __size_of_blinkDisplayLetterC 004A                                    ??_Display_letter 0134  
                                  ___atdiv@quotient 0143                                                  _ir 009D  
                                                _is 002B                                    ??_Display_number 0139  
                                                _iw 0035                                                  bsr 000FE0  
                               ___wmul@multiplicand 0134                                    i1___wmul@product 0021  
                               main@extensor_active 015E                                        __CFG_CP0$OFF 000000  
                                      __CFG_CP1$OFF 000000                                        __CFG_CP2$OFF 000000  
                                      __CFG_CP3$OFF 000000                                     ?_conditionRelax 0132  
                                               l124 1BD4                                                 l140 13FA  
                                               l220 1C2E                                                 l141 1406  
                                               l134 13BE                                                 l136 13CA  
                                               l216 1C44                                                 l137 13D6  
                                               l225 1CCE                                                 l138 13E2  
                                               l218 1C2A                                                 l139 13EE  
                                               l260 1D8E                                                 l500 044C  
                                               l174 1EBE                                                 l502 0468  
                                               _ADC 1B6C                                                 l530 065E  
                                               l515 0558                                                 l517 0574  
                                     _GraspPreshape 1088                                                 l486 035E  
                                               l781 11AE                                        __CFG_CPB$OFF 000000  
                                      __CFG_CPD$OFF 000000                                   ??_Display_segment 0133  
                                  ?_waitHandReached 0001                                                 _Pos 0092  
                                               _thE 0038                                                 _thF 0036  
                                      ___awmod@sign 0137                                                 wreg 000FE8  
                                     ?_GraspControl 013F                                        __CFG_IESO$ON 000000  
                                              ?_ADC 0001                                        __CFG_LVP$OFF 000000  
                                      main@Prealert 015A                                                l1044 18BC  
                                              l1039 18C8                                                l1064 19C6  
                                              l1074 1B62                                                l4200 17DA  
                                              l4204 17E4                                                l4300 1D52  
                                              l5020 02A0                                                l5110 0454  
                                              l5102 03E4                                                l5030 02C4  
                                              l4208 17F2                                                l5120 0486  
                                              l5104 03EE                                                l4242 1412  
                                              l4410 1B38                                                l4402 19BC  
                                              l4330 114A                                                l4314 1A26  
                                              l5210 06B4                                                l5202 067A  
                                              l5042 02F8                                                l4412 1B40  
                                              l5204 06A2                                                l5060 0346  
                                              l5036 02DE                                                l4262 0E6A  
                                              l4270 0F12                                                l4342 117A  
                                              l4318 1A36                                                l5310 0814  
                                              l5302 07D6                                                l5230 06EE  
                                              l5222 06D6                                                l5214 06C0  
                                              l5134 04BC                                                l5126 04A8  
                                              l5062 034E                                                l4192 17BA  
                                              l4184 17A0                                                l4264 0EA6  
                                              l4360 11CC                                                l4344 1184  
                                              l4336 115E                                                l5048 0312  
                                              l4418 1B58                                                l4194 17C2  
                                              l4290 1D82                                                l4266 0EE2  
                                              l4610 15E6                                                l4370 1888  
                                              l5322 0836                                                l5306 07EC  
                                              l5314 0824                                                l5250 0728  
                                              l5234 06F8                                                l5226 06E2  
                                              l5218 06CA                                                l5170 05AE  
                                              l5154 0560                                                l5146 04F0  
                                              l5090 03B0                                                l5082 039C  
                                              l4188 17AC                                                l4540 19F4  
                                              l4356 11BA                                                l4372 1892  
                                              l5332 0854                                                l5244 0718  
                                              l5164 0596                                                l5148 04FA  
                                              l5076 0380                                                l4526 1BBA  
                                              l4550 0C22                                                l4390 1994  
                                              l4286 1D76                                                l4614 162E  
                                              l4606 15D6                                                l5318 082C  
                                              l5262 074A                                                l5246 071E  
                                              l5190 05F6                                                l4560 0D4E  
                                              l4552 0C5E                                                l4392 199C  
                                              l4536 19E2                                                l4704 1E20  
                                              l5336 0860                                                l5192 0600  
                                              l5352 08D0                                                l4562 0D72  
                                              l4554 0C9A                                                l4546 0BC2  
                                              l5282 0790                                                l5274 0770  
                                              l5266 0754                                                l5178 05C2  
                                              l4564 0DC6                                                l4556 0CCA  
                                              l4548 0C0A                                                l4820 0B0C  
                                              l4724 1092                                                l4732 1110  
                                              l4716 13A8                                                l5348 087E  
                                              l5292 07AA                                                l4558 0D06  
                                              l4830 0B44                                                l4806 0AA8  
                                              l4750 095A                                                l4726 10BC  
                                              l4734 1126                                                l4646 1C34  
                                              l4718 13B0                                                l5278 0780  
                                              l5198 0666                                                l4568 0E02  
                                              l4832 0B58                                                l4808 0ABE  
                                              l4752 0960                                                l4728 10E6  
                                              l4648 1C48                                                l4584 1722  
                                              l5288 07A0                                                l4842 0B90  
                                              l4818 0AF6                                                l4770 09C6  
                                              l4762 0998                                                l4690 1A76  
                                              l4850 154A                                                l4594 177A  
                                              l5298 07BC                                                l4772 09D8  
                                              l4596 1780                                                l4782 0A10  
                                              l4846 0BA6                                                l4694 1A90  
                                              l4870 158C                                                l4862 1578  
                                              l4784 0A24                                                l4696 1A98  
                                              l4864 1580                                                l4880 159C  
                                              l4794 0A5C                                                l4882 15C0  
                                              l4796 0A70                                                u5020 1574  
                                              u4135 13C6                                                u4136 13C8  
                                              u4080 17C6                                                u4145 13D2  
                                              u4146 13D4                                                u4330 1896  
                                              u4155 13DE                                                u4156 13E0  
                                              u4165 13EA                                                u4166 13EC  
                                              u5310 0394                                                u4175 13F6  
                                              u4176 13F8                                                u4360 19A0  
                                              u5400 049A                                                u5240 0330  
                                              u4185 1402                                                u4186 1404  
                                              u4290 1188                                                u4195 140E  
                                              u4196 1410                                                u4700 0984  
                                              u4390 1B44                                                u4720 09A8  
                                              u4810 0A48                                                u4730 09B0  
                                              u4910 0B1E                                                u4830 0A82  
                                              u4750 09EA                                                u4680 0972  
                                              u4930 0B30                                                u4850 0A94  
                                              u4770 09FC                                                u5490 05AA  
                                              u4950 0B6A                                                u4870 0AD0  
                                              u4790 0A36                                                u4970 0B7C  
                                              u4890 0AE2                                                u5757 1BC2  
                                     __CFG_FCMEN$ON 000000                                                _main 017A  
                                              fsr2h 000FDA                                                indf2 000FDF  
                                              fsr1l 000FE1                                                fsr2l 000FD9  
                                              btemp 0042                            ??i2_percentage2threshold 0017  
                                     __CFG_BOREN$ON 000000                              i2Display_letter@letter 0003  
                                              prodh 000FF4                                                prodl 000FF3  
                                              start 0176                                _extensor_averagePart 0027  
                                     __CFG_MCLRE$ON 000000                                        ___param_bank 000000  
                        __size_of_disableModeSwitch 0006                                               ??_ADC 001D  
                                      ?_read_EEprom 0001                                      i1___atdiv@sign 00CD  
                                    _USARTinput_val 0060                                        main@comState 0155  
                     __size_of_amplifiedSignalValue 0080                                      ?_GraspPreshape 0001  
                                             ?_main 0001                                     __end_of___atdiv 11DA  
                                             _CT10F 009C                                               _EEADR 000FA9  
                                   __end_of___awmod 17FC                    i2percentage2threshold@percentage 0017  
                    percentage2threshold@percentage 014D                                     __end_of___ltdiv 18D6  
                                   __end_of___lwdiv 19D0                                     __end_of_absFunc 1AA2  
                                   __end_of___lwmod 1B6C                                               i2l124 1CA2  
                                             i2l140 1482                                               i1l196 1B6E  
                                             i2l141 148E                                               i2l134 1446  
                                             i1l463 0156                                               i2l136 1452  
                                             i2l137 145E                                               i2l138 146A  
                                             i2l139 1476                                               i1l781 1256  
                                             i2l358 1E9C                                               i2l455 1084  
                                             i2l781 12FE                                               _RCREG 000FAE  
                                  ?_getFingerStatus 0001                                               _TCF_E 0032  
                                             _TCF_F 0031                                               _TMR1H 000FCF  
                                             _TMR0L 000FD6                                               _TMR1L 000FCE  
                                             _SPBRG 000FAF                                      ??_GraspControl 0142  
                                             _TXREG 000FAD                                               _Dbyte 00BC  
                                     __CFG_WRT0$OFF 000000                                       __CFG_WRT1$OFF 000000  
                                     __CFG_WRT2$OFF 000000                                       __CFG_WRT3$OFF 000000  
                               getFingerPosition@MA 0139                                         ?i2_Delay_ms 0001  
                                    __CFG_EBTR0$OFF 000000                                      __CFG_EBTR1$OFF 000000  
                                    __CFG_EBTR2$OFF 000000                                      __CFG_EBTR3$OFF 000000  
                                             _Sbyte 00BE                                       __CFG_WRTB$OFF 000000  
                                     __CFG_WRTC$OFF 000000                                       __CFG_WRTD$OFF 000000  
                                    i1___awmod@sign 0022                          GraspPreshape@preshapeState 013F  
                                    __CFG_EBTRB$OFF 000000                            i2Display_segment@segment 0002  
                                             _thE_h 00E8                                               _thE_l 00E6  
                                             _thF_h 00E4                                               _thF_l 00E2  
                                             main@S 015C                                        main@speedExt 0156  
                                             tablat 000FF5                                    __end_ofi1___tmul 1AE6  
                                  __end_ofi1___wmul 1D4E                                    __end_ofi2___tmul 1B2A  
                                   velMapping@value 013C                                               ttemp5 0043  
                                             ttemp6 0046                                               ttemp7 004A  
                                             status 000FD8                               __size_of_write_EEprom 002A  
                                   ??_config_timer0 0132                                     ??_config_timer1 0132  
                               i1___wmul@multiplier 001D                                               wtemp8 0043  
                                __size_ofi1___atdiv 00A8                                      _Reset_segments 1E68  
                                __size_ofi1___awmod 0070                                  __size_ofi1___lwdiv 0054  
                                  __end_of_Delay_ms 1BE2                                  __size_ofi2___atdiv 00A8  
                                   __initialization 1638                                      __CFG_HPOL$HIGH 000000  
                        __size_ofi2_Display_segment 0086                            __end_of_adjustEEPROMdata 1C4C  
                                      __end_of_main 08E0                 i2percentage2threshold@threshold_int 001B  
                 percentage2threshold@threshold_int 014B                                      __CFG_OSC$HSPLL 000000  
                                   _USARTinput_data 0100                                      _flexor_average 0098  
                                    __CFG_LPOL$HIGH 000000                                              ??_main 014E  
                                        MoveMotor@S 0137                                  i1___atdiv@dividend 00C6  
                                     __activetblptr 000002                                        _write_EEprom 1CB0  
                                            _ADRESH 000FC4                                              _ADRESL 000FC3  
                                            _EEDATA 000FA8                                              _EECON2 000FA7  
                                     main@firstByte 0154                                              i1l1064 1974  
                                            i1l3610 181C                                              i1l3630 1862  
                                            i1l3622 184A                                              i1l3614 182A  
                                            i1l3606 1810                                              i1l4440 11F2  
                                            i1l4424 1AAE                                              i1l3616 1832  
                            __end_of_Reset_segments 1E78                                              i1l3626 1854  
                                            i2l3020 1AF2                                              i1l4452 1222  
                                            i1l4428 1ABE                                              i2l3006 149A  
                                            i1l4470 1274                                              i1l4454 122C  
                                            i1l4446 1206                                              i1l4622 14D2  
                                            i2l3104 130A                                              i2l3024 1B02  
                                            i1l4632 1536                                              i1l4466 1262  
                                            i1l4626 14DC                                              i2l3108 131C  
                                            i2l3090 12CA                                              i2l3092 12D4  
                                            i2l3084 12AE                                              i1l4908 196A  
                                            i2l3078 129A                                      __CFG_WDTEN$OFF 000000  
                                            i1l4936 011A                                              i1l4938 011C  
                                            i1l4896 1942                                              i2l3554 0F32  
                                            i2l3562 0FC4                                              i1l4898 194A  
                                            i2l3548 1C90                                              i2l3556 0F66  
                                            i2l3572 16CA                                              i2l3558 0F9A  
                                            i2l3670 1012                                              i2l3576 1712  
                                            i2l3568 16BA                                              i2l3680 1048  
                                            i2l3664 0FFE                                              i2l3690 107E  
                                            i2l3668 100C                                      __CFG_WINEN$OFF 000000  
                                     main@forthbyte 014E                                    _extensor_average 0096  
                   __size_ofi2_percentage2threshold 0072                            __end_ofi2_Reset_segments 1E98  
                                i1___atdiv@quotient 00CE                                __size_of_configUSART 001A  
                                    __CFG_SSPMX$RD1 000000                                 __size_ofi2_Delay_ms 0032  
                                            ___tmul 1A1A                                              ___wmul 1D02  
                                         ??___atdiv 0141                                      __CFG_STVREN$ON 000000  
                                         ??___awmod 0136                                      i2___atdiv@sign 0011  
                                         ??___ltdiv 0138                                           ??___lwdiv 013C  
                                         ??_absFunc 0136                                           ??___lwmod 0136  
                                   ??_GraspPreshape 013F                                              _flexor 002F  
                                __size_of_MoveMotor 0036                                              clear_0 167E  
                                            clear_1 168A                                              clear_2 1696  
                                   ___awmod@divisor 0134                                       Delay_ms@timer 0135  
                                   ___awmod@counter 0136                                       main@thirdByte 015D  
                                     main@speedFlex 0158                              velMapping@resultingVel 0147  
                                 __end_ofi1___atdiv 1282                                   __end_ofi1___awmod 186C  
                                  __end_of_signFunc 1E28                       __size_of_percentage2threshold 0074  
                                 __end_ofi1___lwdiv 197E                                        __pdataCOMRAM 003C  
                                 __end_ofi2___atdiv 132A                               i1___tmul@multiplicand 0020  
                         __size_of_config_interrupt 000C                                              tblptrh 000FF7  
                                            tblptrl 000FF6                                              tblptru 000FF8  
                                   _InterruptAction 0008                                 _blinkDisplayLetterC 19D0  
                                   ?_Reset_segments 0001                                          __accesstop 0060  
                           __end_of__initialization 169C                                     __CFG_FLTAMX$RC1 000000  
                                     ___rparam_used 000001                                   GraspControl@speed 0140  
                                   __CFG_T1OSCMX$ON 000000                                __end_of_GraspControl 0BBC  
                            GraspControl@graspState 0142                                       GraspControl@S 013F  
                       __end_of_InterruptAction_low 0176                                     _Display_segment 13BA  
                                    __pcstackCOMRAM 0001                           __size_ofi2_Display_letter 00B0  
                                      __pidataBANK0 1CDA                                    ??_conditionRelax 0134  
                              ?_blinkDisplayLetterC 0001                                      readUSART@value 0138  
                              __size_of_read_EEprom 0012                                           ?i1___tmul 001D  
                                         ?i1___wmul 001D                                           ?i2___tmul 0001  
                            i2_percentage2threshold 16AA                                  __size_of_configADC 0032  
                                         ?_Delay_ms 0132                                   main@PrealertLimit 0150  
                             _readUSART_withTIMEOUT 171C                                         MoveMotor@D8 0138  
                               i1___tmul@multiplier 001D                                          __pbssBANK0 0060  
                                        __pbssBANK1 0100                                   __end_of_MoveMotor 1C18  
                            __size_ofi2_read_EEprom 0010                                  __size_of_readUSART 0054  
                                        __pnvCOMRAM 0036                                  i2___atdiv@dividend 000A  
                                read_EEprom@address 0132                                          ADC@resultH 0020  
                                        ADC@resultL 001F                          conditionRelax@conditionMet 0136  
                              sendUSART_int@lowpart 013A                            __size_of_getHandPosition 0022  
                                __size_of_sendUSART 000E                                          _blinkCount 009A  
                             ??_blinkDisplayLetterC 0137                                             ?___tmul 0132  
                        conditionRelax@closingState 0132                                             ?___wmul 0132  
                                 _waitFingerReached 1D8C                                     __CFG_WDPS$32768 000000  
                                        _deviceMode 0034                                  ?_waitFingerReached 0001  
                                 _getFingerPosition 1DF6                                          ??i1___tmul 0023  
                                        ??i1___wmul 0021                                          ??i2___tmul 0007  
                                   __CFG_PWM4MX$RB5 000000                             __end_of_InterruptAction 1088  
                             Display_segment@on_off 0132                                  ?_getFingerPosition 0001  
                                        _config_DIO 1E40                                  i2___atdiv@quotient 0012  
                               ??_waitFingerReached 013B                                        ??i2_Delay_ms 0003  
                                        ??_Delay_ms 0134                                             _MVE_ADR 00C4  
                                           _THE_ADR 0033                                             _MVF_ADR 00C3  
                                           _THF_ADR 0040                                 ??_getFingerPosition 0139  
                          __size_of_waitHandReached 001C                              __size_of_sendUSART_int 0018  
                      __end_of_amplifiedSignalValue 1548                                           _ADCHSbits 000F99  
                                 _clearUSARTbuffers 1E98                                     __CFG_PWMPIN$OFF 000000  
                                           _STPbyte 00BD                                  _flexor_averagePart 0029  
                           __end_of_Display_segment 1442                                  ?_clearUSARTbuffers 0001  
                                   __CFG_PWRTEN$OFF 000000                                             __Hparam 0000  
                                           _PrePos0 00B7                                             _PrePos2 00B2  
                                           _PrePos4 00AD                                           ?_signFunc 0132  
                         __end_of_waitFingerReached 1DA8                                             __Lparam 0000  
                                 __end_of_configADC 1C7E                                 ??_clearUSARTbuffers 0001  
                                 ?_adjustEEPROMdata 0132                                             ___atdiv 1132  
                                __end_ofi2_Delay_ms 1CB0                                             ___awmod 178C  
                                   __size_of___tmul 0044                                     __size_of___wmul 0026  
                                           ___ltdiv 186C                                             ___lwdiv 197E  
                                           _absFunc 1A5E                                             ___lwmod 1B2A  
                         __end_of_getFingerPosition 1E10                                      main@secondByte 0160  
                       GraspControl@thumbPercentage 0143                                adjustEEPROMdata@data 0132  
                                     i2_read_EEprom 1E78                                  ??_adjustEEPROMdata 0133  
                              adjustEEPROMdata@type 0133                                             __pcinit 1638  
                                           __ramtop 0300                                             __ptext0 017A  
                                           __ptext1 1CB0                                             __ptext2 132A  
                                           __ptext3 186C                                             __ptext4 1E10  
                                           __ptext5 1E28                                             __ptext6 1E56  
                                           __ptext7 171C                                             __ptext8 15C4  
                                           __ptext9 1A1A                                   __end_of_readUSART 192A  
                                         _T0CONbits 000FD5                                        __size_of_ADC 003C  
                        amplifiedSignalValue@maxVal 00D3                                           _T1CONbits 000FCD  
                                           _thEbyte 00C2                                             _mvEbyte 00C0  
                                 i1___lwdiv@divisor 0025                                             _thFbyte 00C1  
                                           _mvFbyte 00BF                                   i1___lwdiv@counter 00C6  
                                  _config_interrupt 1EC4                                    ___awmod@dividend 0132  
                            ?_readUSART_withTIMEOUT 0001                             __size_of_Display_letter 00CA  
                                 __end_of_sendUSART 1EC4                             __size_of_Display_number 02A4  
                         __end_of_clearUSARTbuffers 1EA8                                      sendUSART_int@A 0138  
                                    __pintcode_body 0FDA                                end_of_initialization 169C  
                          __size_of_getFingerStatus 001A                               __size_of_GraspControl 02DC  
                                     __Lmediumconst 0000                                             int_func 0FDA  
                                        _velMapping 132A                                  MoveMotor@FirstByte 013A  
                                  i2___tmul@product 0007                               __end_of_config_timer0 1EB6  
                             __end_of_config_timer1 1DC2                                Display_letter@letter 0134  
                                  ___ltdiv@dividend 0132                                   ?i2_Reset_segments 0001  
                                        ??_signFunc 0136                                           _RCSTAbits 000FAB  
                                  i2_Display_letter 0F2A                                  ??i2_Reset_segments 0001  
                                           postdec1 000FE5                                             postinc0 000FEE  
                                           postinc2 000FDE                                      ?i2_read_EEprom 0001  
                                     _sendUSART_int 1E28                                          _hysteresis 003C  
                             i1___wmul@multiplicand 001F                                 write_EEprom@address 0133  
                                 ??_getHandPosition 013B                                           _PORTBbits 000F81  
                                         _PORTDbits 000F83                                          main@SCFLAG 014F  
                                  ?_InterruptAction 0001                                         ?_config_DIO 0001  
                                         _TRISAbits 000F92                                           _TRISBbits 000F93  
                                         _TRISCbits 000F94                                        _GraspControl 08E0  
                                         _TRISDbits 000F95                                    ??_Reset_segments 0132  
                                         _TRISEbits 000F96                         waitFingerReached@statusBit4 013D  
                                  ___ltdiv@quotient 0138                                           i1___atdiv 11DA  
                                         i1___awmod 17FC                                           i1___lwdiv 192A  
                             getFingerStatus@MA3210 0139                                           i2___atdiv 1282  
                                     ??_configUSART 0132                                    ?_Display_segment 0132  
                      __end_of_percentage2threshold 1638                                           _TXSTAbits 000FAC  
                                 ??_waitHandReached 013E                                       velMapping@aux 0142  
                        __size_of_waitFingerReached 001C                                      ?_sendUSART_int 0138  
                        __size_of_getFingerPosition 001A                                    __CFG_EXCLKMX$RC3 000000  
                           ?i2_percentage2threshold 0015                                      __end_of___tmul 1A5E  
                                    __end_of___wmul 1D28                                         _BAUDCONbits 000FAA  
                              _amplifiedSignalValue 14C8                                       __pidataCOMRAM 1ED0  
                             __end_of_GraspPreshape 1132                             i2Display_segment@on_off 0001  
                                  write_EEprom@data 0132                               i2___tmul@multiplicand 0004  
                               start_initialization 1638                                   __size_ofi1___tmul 0044  
                                 __size_ofi1___wmul 0026                                         __end_of_ADC 1BA8  
                                signFunc@signResult 0136                                   __size_ofi2___tmul 0044  
                                        ?i1___atdiv 00C6                                          ?i1___awmod 001D  
                                        ?i1___lwdiv 0023                             getHandPosition@i_finger 013C  
                        __size_of_clearUSARTbuffers 0010                                          ?i2___atdiv 000A  
                                 __size_of_Delay_ms 003A  amplifiedSignalValue@amplifiedSignalValue_shortlong 00D6  
                                 i1___atdiv@divisor 00C9                                   i1___atdiv@counter 00CC  
                                       ?_velMapping 013C                                           _MoveMotor 1BE2  
                                 ??_getFingerStatus 0139                                 __size_of_config_DIO 0016  
                                 _USARTinput_length 00C5                                     ??i2_read_EEprom 0001  
                               __end_of_configUSART 1DDC                      __end_ofi2_percentage2threshold 171C  
                                     ??_read_EEprom 0132                                            ??___tmul 0138  
                                          ??___wmul 0136                                        Delay_ms@time 0132  
                                       __pdataBANK0 009E                                  i1___awmod@dividend 001D  
                             ?_amplifiedSignalValue 00D1                                        MoveMotor@D70 0139  
                        GraspControl@auxspeed_thumb 0145                                      ___tmul@product 0138  
                      __size_of_InterruptAction_low 015E                                        MoveMotor@vel 0134  
                         readUSART_withTIMEOUT@time 013A                                         __pbssCOMRAM 0027  
                                     __pcstackBANK0 00C6                                       __pcstackBANK1 0132  
                                    _Display_letter 0E60                                     i2Delay_ms@timer 0004  
                                    _Display_number 0BBC                               sendUSART_int@highpart 013B  
                               i2___tmul@multiplier 0001           i2percentage2threshold@threshold_shortlong 0018  
           percentage2threshold@threshold_shortlong 0148                                          sendUSART@A 0132  
                       __end_of_blinkDisplayLetterC 1A1A                                           __pnvBANK0 00E2  
                                        ?_MoveMotor 0133                                   i2___atdiv@divisor 000D  
                          __end_of_config_interrupt 1ED0                                   i2___atdiv@counter 0010  
                                  ___lwdiv@dividend 0138                                     ??_sendUSART_int 013A  
                                         __pintcode 0008                                            ?___atdiv 013B  
                                 __size_of_signFunc 0018                                            ?___awmod 0132  
                                          ?___ltdiv 0132                                            ?___lwdiv 0138  
                                          ?_absFunc 0132                                            ?___lwmod 0132  
                                         _configADC 1C4C                                         __pintcodelo 0018  
                           ??_readUSART_withTIMEOUT 0138                                 __end_of_read_EEprom 1E68  
                            __end_of_Display_letter 0F2A                                 __size_of_velMapping 0090  
                              _percentage2threshold 15C4                              __end_of_Display_number 0E60  
                           __size_of_conditionRelax 007C                                           _readUSART 18D6  
                                     absFunc@result 0136                                       ?_write_EEprom 0132  
                                       ??i1___atdiv 0026                           __size_of_adjustEEPROMdata 0034  
                                       ??i1___awmod 0021                            __end_ofi2_Display_letter 0FDA  
                                  ___lwdiv@quotient 013D                                         ??i1___lwdiv 0027  
                                       ??i2___atdiv 0010                                           _sendUSART 1EB6  
                            Display_segment@segment 0133                                      ___wmul@product 0136  
                                       _configUSART 1DC2                                i2read_EEprom@address 0001  
                                          _IPR1bits 000F9F                                            _PIE1bits 000F9D  
                                   _getHandPosition 1D4E                                            i1u328_20 1836  
                                          i1u507_20 194E                           adjustEEPROMdata@defVal_mv 0135  
                                          i1u446_20 1230                                            i2u240_45 145A  
                                          i2u240_46 145C                                            i2u241_45 1466  
                                          i2u241_46 1468                                            i1u459_20 152A  
                                          i2u242_45 1472                                            i2u242_46 1474  
                                          i2u243_45 147E                                            i2u243_46 1480  
                                          i2u244_45 148A                                            i2u244_46 148C  
                                          i2u245_45 1496                                            i2u245_46 1498  
                                          i2u239_45 144E                                            i2u239_46 1450  
                                   ___ltdiv@divisor 0135                                            _PIR1bits 000F9E  
                                          i2u259_40 12D8                                            i2u576_47 1C96  
                                   ___ltdiv@counter 013B                            clearUSARTbuffers@i_count 0002  
                                          _RCONbits 000FD0                                            _THE_DATA 003B  
                                          _MVE_DATA 003F                                            _THF_DATA 003A  
                                          _MVF_DATA 003E                              ??_amplifiedSignalValue 0026  
                                        ?_configADC 0001                                          _ADCON0bits 000FC2  
                                        _ADCON1bits 000FC1                                          _ADCON2bits 000FC0  
                                          i1___tmul 1AA2                                   ___wmul@multiplier 0132  
                                          i1___wmul 1D28                                            i2___tmul 1AE6  
                             ?_percentage2threshold 0146                                     ?_Display_letter 0001  
                         __size_ofi2_Reset_segments 0010                                        ??_config_DIO 0132  
                                   ?_Display_number 0137                                      ??_write_EEprom 0133  
                                         main@speed 0152                                 ___tmul@multiplicand 0135  
                                         main@state 0161                                            _Delay_ms 1BA8  
                                        ?_readUSART 0001                                     _waitHandReached 1D70  
                                       _INTCON2bits 000FF1                                         _controlRate 0041  
                                         copy_data0 164C                                           copy_data1 166C  
                                        ?_sendUSART 0001                                          _EECON1bits 000FA6  
                                       ??_MoveMotor 0136                                            __Hrparam 0000  
                                          __Lrparam 0000                                   main@flexor_active 015F  
                                __end_of_config_DIO 1E56                              getFingerPosition@value 013A  
                                 i1___awmod@divisor 001F                                         _read_EEprom 1E56  
                                 i1___awmod@counter 0021                                    __size_of___atdiv 00A8  
                                  __size_of___awmod 0070                                    __size_of___ltdiv 006A  
                                  __size_of___lwdiv 0052                                    __size_of_absFunc 0044  
                                  __size_of___lwmod 0042                         GraspControl@auxspeed_little 014A  
                                        _ANSEL0bits 000FB8                                          _ANSEL1bits 000FB9  
                                    i2Delay_ms@time 0001        amplifiedSignalValue@amplifiedSignalValue_int 00D4  
                            waitHandReached@motorID 013E                               adjustEEPROMdata@value 0136  
                            __size_of_config_timer0 000E                              __size_of_config_timer1 001A  
                                          absFunc@A 0132                                            absFunc@B 0134  
                                   ___lwdiv@divisor 013A                          readUSART_withTIMEOUT@value 0139  
                                   ___lwdiv@counter 013C                                            __ptext10 1132  
                                          __ptext11 1ED6                                            __ptext20 0E60  
                                          __ptext12 1DA8                                            __ptext21 1C18  
                                          __ptext13 1EA8                                            __ptext30 18D6  
                                          __ptext22 1A5E                                            __ptext14 1EC4  
                                          __ptext31 178C                                            __ptext23 1088  
                                          __ptext15 1E40                                            __ptext40 1BA8  
                                          __ptext32 1D02                                            __ptext24 1D70  
                                          __ptext16 1DC2                                            __ptext33 197E  
                                          __ptext25 1D8C                                            __ptext17 1C4C  
                                          __ptext50 1E78                                            __ptext42 1D28  
                                          __ptext34 1BE2                                            __ptext26 1DDC  
                                          __ptext18 1548                                            __ptext51 16AA  
                                          __ptext43 192A                                            __ptext35 1EB6  
                                          __ptext27 08E0                                            __ptext19 19D0  
                                          __ptext52 1AE6                                            __ptext44 17FC  
                                          __ptext36 0BBC                                            __ptext28 1D4E  
                                          __ptext53 1282                                            __ptext45 14C8  
                                          __ptext37 1B2A                                            __ptext29 1DF6  
                                          __ptext54 0F2A                                            __ptext46 1AA2  
                                          __ptext38 1E68                                            __ptext55 1E88  
                                          __ptext47 11DA                                            __ptext39 13BA  
                                          __ptext56 1442                                            __ptext48 1B6C  
                                          __ptext57 1C7E                                            __ptext58 1E98  
                                   _getFingerStatus 1DDC                                            _closing1 00A8  
                                          _closing3 00A3                                            _closing5 009E  
                           __end_of_getHandPosition 1D70                            __size_of_InterruptAction 1080  
                                         signFunc@E 0134                                           signFunc@F 0132  
                                i1___lwdiv@dividend 0023                                 _InterruptAction_low 0018  
                                      ??_velMapping 0140                                       __size_of_main 0766  
                                          _extensor 002D                                            _signFunc 1E10  
                              Display_number@number 0137                            __size_of_Display_segment 0088  
                                          int$flags 0042                                         ??_configADC 0132  
                                 _disableModeSwitch 1ED6                              ??_percentage2threshold 0148  
                              ?_InterruptAction_low 0001                                  i1___lwdiv@quotient 00C7  
                                ?_disableModeSwitch 0001                             __end_of_waitHandReached 1D8C  
                                        _INTCONbits 000FF2                                  __end_of_velMapping 13BA  
                                    _conditionRelax 1548                                         ??_readUSART 0138  
                                  _adjustEEPROMdata 1C18                                 ??_disableModeSwitch 0132  
                               velMapping@threshold 013E                                     MoveMotor@MA3210 0133  
                                          intlevel1 0000                                            intlevel2 0000  
                                  i1___tmul@product 0023                                         ??_sendUSART 0132  
                                  ___lwmod@dividend 0132                              __size_of_GraspPreshape 00AA  
                           __size_of_Reset_segments 0010                                       _config_timer0 1EA8  
                                     _config_timer1 1DA8                                   ?_config_interrupt 0001  
                              __end_of_write_EEprom 1CDA                           __end_of_disableModeSwitch 1EDC  
                                ??_config_interrupt 0132                                   ___tmul@multiplier 0132  
                             __end_ofi2_read_EEprom 1E88                                   i2_Display_segment 1442  
                             ??_InterruptAction_low 00D9                                  ?i2_Display_segment 0001  
                       getFingerStatus@statusFinger 013A                              __end_of_conditionRelax 15C4  
                           __end_of_getFingerStatus 1DF6                                    i2_Reset_segments 1E88  
                                   ___lwmod@divisor 0134                      __size_of_readUSART_withTIMEOUT 0070  
                                   ___lwmod@counter 0136                       __end_of_readUSART_withTIMEOUT 178C  
                                        i2_Delay_ms 1C7E                                 ??i2_Display_segment 0002  
                                  ___atdiv@dividend 013B                                   ?i2_Display_letter 0001  
                                  ?_getHandPosition 0001                                  ??i2_Display_letter 0003  
                                   ___atdiv@divisor 013E                                        ?_configUSART 0001  
                          waitFingerReached@motorID 013B                                     ___atdiv@counter 0141  
                                    ?_config_timer0 0001                                      ?_config_timer1 0001  
                                 ??_InterruptAction 001D                             waitFingerReached@status 013C  
                                      ___atdiv@sign 0142                           __end_ofi2_Display_segment 14C8  
